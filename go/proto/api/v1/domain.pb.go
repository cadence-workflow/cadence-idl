// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: uber/cadence/api/v1/domain.proto

package apiv1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DomainStatus int32

const (
	DomainStatus_DOMAIN_STATUS_INVALID    DomainStatus = 0
	DomainStatus_DOMAIN_STATUS_REGISTERED DomainStatus = 1
	DomainStatus_DOMAIN_STATUS_DEPRECATED DomainStatus = 2
	DomainStatus_DOMAIN_STATUS_DELETED    DomainStatus = 3
)

var DomainStatus_name = map[int32]string{
	0: "DOMAIN_STATUS_INVALID",
	1: "DOMAIN_STATUS_REGISTERED",
	2: "DOMAIN_STATUS_DEPRECATED",
	3: "DOMAIN_STATUS_DELETED",
}

var DomainStatus_value = map[string]int32{
	"DOMAIN_STATUS_INVALID":    0,
	"DOMAIN_STATUS_REGISTERED": 1,
	"DOMAIN_STATUS_DEPRECATED": 2,
	"DOMAIN_STATUS_DELETED":    3,
}

func (x DomainStatus) String() string {
	return proto.EnumName(DomainStatus_name, int32(x))
}

func (DomainStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{0}
}

type ArchivalStatus int32

const (
	ArchivalStatus_ARCHIVAL_STATUS_INVALID  ArchivalStatus = 0
	ArchivalStatus_ARCHIVAL_STATUS_DISABLED ArchivalStatus = 1
	ArchivalStatus_ARCHIVAL_STATUS_ENABLED  ArchivalStatus = 2
)

var ArchivalStatus_name = map[int32]string{
	0: "ARCHIVAL_STATUS_INVALID",
	1: "ARCHIVAL_STATUS_DISABLED",
	2: "ARCHIVAL_STATUS_ENABLED",
}

var ArchivalStatus_value = map[string]int32{
	"ARCHIVAL_STATUS_INVALID":  0,
	"ARCHIVAL_STATUS_DISABLED": 1,
	"ARCHIVAL_STATUS_ENABLED":  2,
}

func (x ArchivalStatus) String() string {
	return proto.EnumName(ArchivalStatus_name, int32(x))
}

func (ArchivalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{1}
}

type Domain struct {
	Id                               string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                             string                             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status                           DomainStatus                       `protobuf:"varint,3,opt,name=status,proto3,enum=uber.cadence.api.v1.DomainStatus" json:"status,omitempty"`
	Description                      string                             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	OwnerEmail                       string                             `protobuf:"bytes,5,opt,name=owner_email,json=ownerEmail,proto3" json:"owner_email,omitempty"`
	Data                             map[string]string                  `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WorkflowExecutionRetentionPeriod *types.Duration                    `protobuf:"bytes,7,opt,name=workflow_execution_retention_period,json=workflowExecutionRetentionPeriod,proto3" json:"workflow_execution_retention_period,omitempty"`
	BadBinaries                      *BadBinaries                       `protobuf:"bytes,8,opt,name=bad_binaries,json=badBinaries,proto3" json:"bad_binaries,omitempty"`
	HistoryArchivalStatus            ArchivalStatus                     `protobuf:"varint,9,opt,name=history_archival_status,json=historyArchivalStatus,proto3,enum=uber.cadence.api.v1.ArchivalStatus" json:"history_archival_status,omitempty"`
	HistoryArchivalUri               string                             `protobuf:"bytes,10,opt,name=history_archival_uri,json=historyArchivalUri,proto3" json:"history_archival_uri,omitempty"`
	VisibilityArchivalStatus         ArchivalStatus                     `protobuf:"varint,11,opt,name=visibility_archival_status,json=visibilityArchivalStatus,proto3,enum=uber.cadence.api.v1.ArchivalStatus" json:"visibility_archival_status,omitempty"`
	VisibilityArchivalUri            string                             `protobuf:"bytes,12,opt,name=visibility_archival_uri,json=visibilityArchivalUri,proto3" json:"visibility_archival_uri,omitempty"`
	ActiveClusterName                string                             `protobuf:"bytes,13,opt,name=active_cluster_name,json=activeClusterName,proto3" json:"active_cluster_name,omitempty"`
	Clusters                         []*ClusterReplicationConfiguration `protobuf:"bytes,14,rep,name=clusters,proto3" json:"clusters,omitempty"`
	FailoverVersion                  int64                              `protobuf:"varint,15,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	IsGlobalDomain                   bool                               `protobuf:"varint,16,opt,name=is_global_domain,json=isGlobalDomain,proto3" json:"is_global_domain,omitempty"`
	FailoverInfo                     *FailoverInfo                      `protobuf:"bytes,17,opt,name=failover_info,json=failoverInfo,proto3" json:"failover_info,omitempty"`
	IsolationGroups                  *IsolationGroupConfiguration       `protobuf:"bytes,18,opt,name=isolation_groups,json=isolationGroups,proto3" json:"isolation_groups,omitempty"`
	AsyncWorkflowConfig              *AsyncWorkflowConfiguration        `protobuf:"bytes,19,opt,name=async_workflow_config,json=asyncWorkflowConfig,proto3" json:"async_workflow_config,omitempty"`
	ActiveClusters                   *ActiveClusters                    `protobuf:"bytes,20,opt,name=active_clusters,json=activeClusters,proto3" json:"active_clusters,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}                           `json:"-"`
	XXX_unrecognized                 []byte                             `json:"-"`
	XXX_sizecache                    int32                              `json:"-"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{0}
}
func (m *Domain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return m.Size()
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Domain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain) GetStatus() DomainStatus {
	if m != nil {
		return m.Status
	}
	return DomainStatus_DOMAIN_STATUS_INVALID
}

func (m *Domain) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Domain) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *Domain) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Domain) GetWorkflowExecutionRetentionPeriod() *types.Duration {
	if m != nil {
		return m.WorkflowExecutionRetentionPeriod
	}
	return nil
}

func (m *Domain) GetBadBinaries() *BadBinaries {
	if m != nil {
		return m.BadBinaries
	}
	return nil
}

func (m *Domain) GetHistoryArchivalStatus() ArchivalStatus {
	if m != nil {
		return m.HistoryArchivalStatus
	}
	return ArchivalStatus_ARCHIVAL_STATUS_INVALID
}

func (m *Domain) GetHistoryArchivalUri() string {
	if m != nil {
		return m.HistoryArchivalUri
	}
	return ""
}

func (m *Domain) GetVisibilityArchivalStatus() ArchivalStatus {
	if m != nil {
		return m.VisibilityArchivalStatus
	}
	return ArchivalStatus_ARCHIVAL_STATUS_INVALID
}

func (m *Domain) GetVisibilityArchivalUri() string {
	if m != nil {
		return m.VisibilityArchivalUri
	}
	return ""
}

func (m *Domain) GetActiveClusterName() string {
	if m != nil {
		return m.ActiveClusterName
	}
	return ""
}

func (m *Domain) GetClusters() []*ClusterReplicationConfiguration {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *Domain) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *Domain) GetIsGlobalDomain() bool {
	if m != nil {
		return m.IsGlobalDomain
	}
	return false
}

func (m *Domain) GetFailoverInfo() *FailoverInfo {
	if m != nil {
		return m.FailoverInfo
	}
	return nil
}

func (m *Domain) GetIsolationGroups() *IsolationGroupConfiguration {
	if m != nil {
		return m.IsolationGroups
	}
	return nil
}

func (m *Domain) GetAsyncWorkflowConfig() *AsyncWorkflowConfiguration {
	if m != nil {
		return m.AsyncWorkflowConfig
	}
	return nil
}

func (m *Domain) GetActiveClusters() *ActiveClusters {
	if m != nil {
		return m.ActiveClusters
	}
	return nil
}

type ClusterReplicationConfiguration struct {
	ClusterName          string   `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterReplicationConfiguration) Reset()         { *m = ClusterReplicationConfiguration{} }
func (m *ClusterReplicationConfiguration) String() string { return proto.CompactTextString(m) }
func (*ClusterReplicationConfiguration) ProtoMessage()    {}
func (*ClusterReplicationConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{1}
}
func (m *ClusterReplicationConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterReplicationConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterReplicationConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterReplicationConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterReplicationConfiguration.Merge(m, src)
}
func (m *ClusterReplicationConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ClusterReplicationConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterReplicationConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterReplicationConfiguration proto.InternalMessageInfo

func (m *ClusterReplicationConfiguration) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type BadBinaries struct {
	Binaries             map[string]*BadBinaryInfo `protobuf:"bytes,1,rep,name=binaries,proto3" json:"binaries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *BadBinaries) Reset()         { *m = BadBinaries{} }
func (m *BadBinaries) String() string { return proto.CompactTextString(m) }
func (*BadBinaries) ProtoMessage()    {}
func (*BadBinaries) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{2}
}
func (m *BadBinaries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadBinaries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadBinaries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadBinaries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadBinaries.Merge(m, src)
}
func (m *BadBinaries) XXX_Size() int {
	return m.Size()
}
func (m *BadBinaries) XXX_DiscardUnknown() {
	xxx_messageInfo_BadBinaries.DiscardUnknown(m)
}

var xxx_messageInfo_BadBinaries proto.InternalMessageInfo

func (m *BadBinaries) GetBinaries() map[string]*BadBinaryInfo {
	if m != nil {
		return m.Binaries
	}
	return nil
}

type BadBinaryInfo struct {
	Reason               string           `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Operator             string           `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	CreatedTime          *types.Timestamp `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BadBinaryInfo) Reset()         { *m = BadBinaryInfo{} }
func (m *BadBinaryInfo) String() string { return proto.CompactTextString(m) }
func (*BadBinaryInfo) ProtoMessage()    {}
func (*BadBinaryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{3}
}
func (m *BadBinaryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadBinaryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadBinaryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadBinaryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadBinaryInfo.Merge(m, src)
}
func (m *BadBinaryInfo) XXX_Size() int {
	return m.Size()
}
func (m *BadBinaryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BadBinaryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BadBinaryInfo proto.InternalMessageInfo

func (m *BadBinaryInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BadBinaryInfo) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *BadBinaryInfo) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

type FailoverInfo struct {
	FailoverVersion         int64            `protobuf:"varint,1,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	FailoverStartTimestamp  *types.Timestamp `protobuf:"bytes,2,opt,name=failover_start_timestamp,json=failoverStartTimestamp,proto3" json:"failover_start_timestamp,omitempty"`
	FailoverExpireTimestamp *types.Timestamp `protobuf:"bytes,3,opt,name=failover_expire_timestamp,json=failoverExpireTimestamp,proto3" json:"failover_expire_timestamp,omitempty"`
	CompletedShardCount     int32            `protobuf:"varint,4,opt,name=completed_shard_count,json=completedShardCount,proto3" json:"completed_shard_count,omitempty"`
	PendingShards           []int32          `protobuf:"varint,5,rep,packed,name=pending_shards,json=pendingShards,proto3" json:"pending_shards,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}         `json:"-"`
	XXX_unrecognized        []byte           `json:"-"`
	XXX_sizecache           int32            `json:"-"`
}

func (m *FailoverInfo) Reset()         { *m = FailoverInfo{} }
func (m *FailoverInfo) String() string { return proto.CompactTextString(m) }
func (*FailoverInfo) ProtoMessage()    {}
func (*FailoverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{4}
}
func (m *FailoverInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailoverInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailoverInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailoverInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverInfo.Merge(m, src)
}
func (m *FailoverInfo) XXX_Size() int {
	return m.Size()
}
func (m *FailoverInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverInfo proto.InternalMessageInfo

func (m *FailoverInfo) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *FailoverInfo) GetFailoverStartTimestamp() *types.Timestamp {
	if m != nil {
		return m.FailoverStartTimestamp
	}
	return nil
}

func (m *FailoverInfo) GetFailoverExpireTimestamp() *types.Timestamp {
	if m != nil {
		return m.FailoverExpireTimestamp
	}
	return nil
}

func (m *FailoverInfo) GetCompletedShardCount() int32 {
	if m != nil {
		return m.CompletedShardCount
	}
	return 0
}

func (m *FailoverInfo) GetPendingShards() []int32 {
	if m != nil {
		return m.PendingShards
	}
	return nil
}

// ActiveClusters contains the configuration of active-active domain's active clusters/regions
type ActiveClusters struct {
	// region_to_cluster is a map of region name to active cluster info
	RegionToCluster      map[string]*ActiveClusterInfo `protobuf:"bytes,1,rep,name=region_to_cluster,json=regionToCluster,proto3" json:"region_to_cluster,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ActiveClusters) Reset()         { *m = ActiveClusters{} }
func (m *ActiveClusters) String() string { return proto.CompactTextString(m) }
func (*ActiveClusters) ProtoMessage()    {}
func (*ActiveClusters) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{5}
}
func (m *ActiveClusters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveClusters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveClusters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveClusters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveClusters.Merge(m, src)
}
func (m *ActiveClusters) XXX_Size() int {
	return m.Size()
}
func (m *ActiveClusters) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveClusters.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveClusters proto.InternalMessageInfo

func (m *ActiveClusters) GetRegionToCluster() map[string]*ActiveClusterInfo {
	if m != nil {
		return m.RegionToCluster
	}
	return nil
}

// ActiveCluster contains the configuration of active-active domain's active cluster/region
type ActiveClusterInfo struct {
	ActiveClusterName    string   `protobuf:"bytes,1,opt,name=active_cluster_name,json=activeClusterName,proto3" json:"active_cluster_name,omitempty"`
	FailoverVersion      int64    `protobuf:"varint,15,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActiveClusterInfo) Reset()         { *m = ActiveClusterInfo{} }
func (m *ActiveClusterInfo) String() string { return proto.CompactTextString(m) }
func (*ActiveClusterInfo) ProtoMessage()    {}
func (*ActiveClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_824795d6ae7d8e2f, []int{6}
}
func (m *ActiveClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveClusterInfo.Merge(m, src)
}
func (m *ActiveClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActiveClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveClusterInfo proto.InternalMessageInfo

func (m *ActiveClusterInfo) GetActiveClusterName() string {
	if m != nil {
		return m.ActiveClusterName
	}
	return ""
}

func (m *ActiveClusterInfo) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func init() {
	proto.RegisterEnum("uber.cadence.api.v1.DomainStatus", DomainStatus_name, DomainStatus_value)
	proto.RegisterEnum("uber.cadence.api.v1.ArchivalStatus", ArchivalStatus_name, ArchivalStatus_value)
	proto.RegisterType((*Domain)(nil), "uber.cadence.api.v1.Domain")
	proto.RegisterMapType((map[string]string)(nil), "uber.cadence.api.v1.Domain.DataEntry")
	proto.RegisterType((*ClusterReplicationConfiguration)(nil), "uber.cadence.api.v1.ClusterReplicationConfiguration")
	proto.RegisterType((*BadBinaries)(nil), "uber.cadence.api.v1.BadBinaries")
	proto.RegisterMapType((map[string]*BadBinaryInfo)(nil), "uber.cadence.api.v1.BadBinaries.BinariesEntry")
	proto.RegisterType((*BadBinaryInfo)(nil), "uber.cadence.api.v1.BadBinaryInfo")
	proto.RegisterType((*FailoverInfo)(nil), "uber.cadence.api.v1.FailoverInfo")
	proto.RegisterType((*ActiveClusters)(nil), "uber.cadence.api.v1.ActiveClusters")
	proto.RegisterMapType((map[string]*ActiveClusterInfo)(nil), "uber.cadence.api.v1.ActiveClusters.RegionToClusterEntry")
	proto.RegisterType((*ActiveClusterInfo)(nil), "uber.cadence.api.v1.ActiveClusterInfo")
}

func init() { proto.RegisterFile("uber/cadence/api/v1/domain.proto", fileDescriptor_824795d6ae7d8e2f) }

var fileDescriptor_824795d6ae7d8e2f = []byte{
	// 1153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0xfe, 0x51, 0x8a, 0xfd, 0x73, 0x86, 0xb2, 0x2c, 0xaf, 0xed, 0x98, 0x51, 0x0b, 0x47, 0x51,
	0x90, 0x42, 0x0d, 0x50, 0x2a, 0x56, 0x8b, 0x36, 0xe9, 0x9f, 0x83, 0x2c, 0x31, 0xae, 0x0a, 0xd7,
	0x35, 0x28, 0xc5, 0x05, 0x9a, 0x03, 0xb1, 0x22, 0x57, 0xd2, 0x36, 0x14, 0x97, 0x58, 0x52, 0x72,
	0x7c, 0x2b, 0xfa, 0x30, 0x7d, 0x88, 0x1e, 0x7b, 0xea, 0xb1, 0x8f, 0x50, 0xf8, 0x49, 0x0a, 0x2e,
	0x97, 0xb4, 0x28, 0xd1, 0x7f, 0x6e, 0xe4, 0xcc, 0x7c, 0xdf, 0xcc, 0x0e, 0xbf, 0x99, 0x25, 0xd4,
	0x66, 0x43, 0xc2, 0x9b, 0x36, 0x76, 0x88, 0x67, 0x93, 0x26, 0xf6, 0x69, 0x73, 0x7e, 0xd8, 0x74,
	0xd8, 0x14, 0x53, 0x4f, 0xf7, 0x39, 0x0b, 0x19, 0xda, 0x89, 0x22, 0x74, 0x19, 0xa1, 0x63, 0x9f,
	0xea, 0xf3, 0xc3, 0xea, 0xc1, 0x98, 0xb1, 0xb1, 0x4b, 0x9a, 0x22, 0x64, 0x38, 0x1b, 0x35, 0x9d,
	0x19, 0xc7, 0x21, 0x65, 0x12, 0x54, 0x7d, 0xb2, 0xec, 0x0f, 0xe9, 0x94, 0x04, 0x21, 0x9e, 0xfa,
	0x32, 0x20, 0x37, 0xaf, 0xcd, 0xa6, 0xd3, 0x84, 0xa2, 0xfe, 0x07, 0xc0, 0x7a, 0x57, 0x14, 0x82,
	0xca, 0x50, 0xa0, 0x8e, 0xa6, 0xd4, 0x94, 0xc6, 0x43, 0xb3, 0x40, 0x1d, 0x84, 0xe0, 0x81, 0x87,
	0xa7, 0x44, 0x2b, 0x08, 0x8b, 0x78, 0x46, 0xaf, 0x61, 0x3d, 0x08, 0x71, 0x38, 0x0b, 0xb4, 0x62,
	0x4d, 0x69, 0x94, 0x5b, 0x4f, 0xf5, 0x9c, 0xba, 0xf5, 0x98, 0xb0, 0x2f, 0x02, 0x4d, 0x09, 0x40,
	0x35, 0x50, 0x1d, 0x12, 0xd8, 0x9c, 0xfa, 0xd1, 0x09, 0xb4, 0x07, 0x82, 0x75, 0xd1, 0x84, 0x9e,
	0x80, 0xca, 0x2e, 0x3c, 0xc2, 0x2d, 0x32, 0xc5, 0xd4, 0xd5, 0xd6, 0x44, 0x04, 0x08, 0x93, 0x11,
	0x59, 0xd0, 0x6b, 0x78, 0xe0, 0xe0, 0x10, 0x6b, 0xeb, 0xb5, 0x62, 0x43, 0x6d, 0x3d, 0xbf, 0x25,
	0xb7, 0xde, 0xc5, 0x21, 0x36, 0xbc, 0x90, 0x5f, 0x9a, 0x02, 0x82, 0x26, 0xf0, 0xec, 0x82, 0xf1,
	0xf7, 0x23, 0x97, 0x5d, 0x58, 0xe4, 0x03, 0xb1, 0x67, 0x51, 0x46, 0x8b, 0x93, 0x90, 0x78, 0xe2,
	0xc9, 0x27, 0x9c, 0x32, 0x47, 0xfb, 0x7f, 0x4d, 0x69, 0xa8, 0xad, 0xc7, 0x7a, 0xdc, 0x58, 0x3d,
	0x69, 0xac, 0xde, 0x95, 0x8d, 0x37, 0x6b, 0x09, 0x8b, 0x91, 0x90, 0x98, 0x09, 0xc7, 0x99, 0xa0,
	0x40, 0x1d, 0x28, 0x0d, 0xb1, 0x63, 0x0d, 0xa9, 0x87, 0x39, 0x25, 0x81, 0xb6, 0x21, 0x28, 0x6b,
	0xb9, 0xc5, 0x1e, 0x61, 0xe7, 0x48, 0xc6, 0x99, 0xea, 0xf0, 0xfa, 0x05, 0xbd, 0x83, 0xfd, 0x09,
	0x0d, 0x42, 0xc6, 0x2f, 0x2d, 0xcc, 0xed, 0x09, 0x9d, 0x63, 0xd7, 0x92, 0x8d, 0x7f, 0x28, 0x1a,
	0xff, 0x2c, 0x97, 0xaf, 0x2d, 0x63, 0x65, 0xeb, 0xf7, 0x24, 0x47, 0xd6, 0x8c, 0x5e, 0xc2, 0xee,
	0x0a, 0xf9, 0x8c, 0x53, 0x0d, 0x44, 0xc3, 0xd1, 0x12, 0xe8, 0x2d, 0xa7, 0x08, 0x43, 0x75, 0x4e,
	0x03, 0x3a, 0xa4, 0x2e, 0x0d, 0x57, 0x2b, 0x52, 0xef, 0x5f, 0x91, 0x76, 0x4d, 0xb3, 0x54, 0xd4,
	0x97, 0xb0, 0x9f, 0x97, 0x22, 0xaa, 0xab, 0x24, 0xea, 0xda, 0x5b, 0x85, 0x46, 0xa5, 0xe9, 0xb0,
	0x83, 0xed, 0x90, 0xce, 0x89, 0x65, 0xbb, 0xb3, 0x20, 0x24, 0xdc, 0x12, 0xa2, 0xdd, 0x14, 0x98,
	0xed, 0xd8, 0xd5, 0x89, 0x3d, 0xa7, 0x91, 0x82, 0xcf, 0x60, 0x43, 0x06, 0x06, 0x5a, 0x59, 0xe8,
	0xe8, 0x8b, 0xdc, 0xc2, 0x25, 0xc6, 0x24, 0xbe, 0x4b, 0x6d, 0xf1, 0xed, 0x3b, 0xcc, 0x1b, 0xd1,
	0x71, 0x22, 0x84, 0x94, 0x05, 0x7d, 0x0a, 0x95, 0x11, 0xa6, 0x2e, 0x9b, 0x13, 0x6e, 0xcd, 0x09,
	0x0f, 0x22, 0x75, 0x6f, 0xd5, 0x94, 0x46, 0xd1, 0xdc, 0x4a, 0xec, 0xe7, 0xb1, 0x19, 0x35, 0xa0,
	0x42, 0x03, 0x6b, 0xec, 0xb2, 0x21, 0x76, 0xad, 0x78, 0xfe, 0xb5, 0x4a, 0x4d, 0x69, 0x6c, 0x98,
	0x65, 0x1a, 0x1c, 0x0b, 0xb3, 0x1c, 0xc6, 0x37, 0xb0, 0x99, 0x92, 0x52, 0x6f, 0xc4, 0xb4, 0x6d,
	0x21, 0xa3, 0xfc, 0x79, 0x7b, 0x23, 0x23, 0x7b, 0xde, 0x88, 0x99, 0xa5, 0xd1, 0xc2, 0x1b, 0x7a,
	0x17, 0x65, 0x64, 0xae, 0xa8, 0xd9, 0x1a, 0x73, 0x36, 0xf3, 0x03, 0x0d, 0x09, 0xaa, 0x97, 0xb9,
	0x54, 0xbd, 0x24, 0xf8, 0x38, 0x8a, 0xcd, 0x1e, 0x79, 0x8b, 0x66, 0x9c, 0x01, 0xb2, 0x61, 0x0f,
	0x07, 0x97, 0x9e, 0x6d, 0xa5, 0xa3, 0x65, 0x0b, 0x80, 0xb6, 0x23, 0x32, 0x34, 0xf3, 0x15, 0x11,
	0x21, 0x7e, 0x96, 0x80, 0x6c, 0x82, 0x1d, 0xbc, 0xea, 0x43, 0x27, 0xb0, 0x95, 0xfd, 0xc0, 0x81,
	0xb6, 0x2b, 0xe8, 0x6f, 0x10, 0xdc, 0xe2, 0x17, 0x0f, 0xcc, 0x72, 0x46, 0x01, 0x41, 0xf5, 0x2b,
	0x78, 0x98, 0xae, 0x06, 0x54, 0x81, 0xe2, 0x7b, 0x72, 0x29, 0x57, 0x5e, 0xf4, 0x88, 0x76, 0x61,
	0x6d, 0x8e, 0xdd, 0x59, 0xb2, 0xf4, 0xe2, 0x97, 0xaf, 0x0b, 0xaf, 0x94, 0x7a, 0x17, 0x9e, 0xdc,
	0x21, 0x09, 0xf4, 0x14, 0x4a, 0x19, 0x0d, 0xc6, 0xbc, 0xaa, 0x7d, 0xad, 0xbe, 0xfa, 0x9f, 0x0a,
	0xa8, 0x0b, 0x43, 0x8f, 0x7e, 0x80, 0x8d, 0x74, 0x51, 0x28, 0x42, 0x8d, 0xfa, 0x5d, 0x8b, 0x42,
	0x4f, 0x1e, 0xe2, 0xf5, 0x96, 0xe2, 0xab, 0x16, 0x6c, 0x66, 0x5c, 0x39, 0xc7, 0x7b, 0xb5, 0x78,
	0x3c, 0xb5, 0x55, 0xbf, 0x35, 0xd7, 0xa5, 0x90, 0xd3, 0x42, 0x0b, 0x7e, 0x57, 0x60, 0x33, 0xe3,
	0x44, 0x8f, 0x60, 0x9d, 0x13, 0x1c, 0x30, 0x4f, 0x26, 0x91, 0x6f, 0xa8, 0x0a, 0x1b, 0xcc, 0x27,
	0x1c, 0x87, 0x8c, 0xcb, 0x4e, 0xa6, 0xef, 0xe8, 0x3b, 0x28, 0xd9, 0x9c, 0xe0, 0x90, 0x38, 0x56,
	0x74, 0x5d, 0x89, 0x8b, 0x44, 0x6d, 0x55, 0x57, 0x56, 0xee, 0x20, 0xb9, 0xcb, 0x4c, 0x55, 0xc6,
	0x47, 0x96, 0xfa, 0x5f, 0x05, 0x28, 0x2d, 0xea, 0x3d, 0x77, 0xfc, 0x94, 0xfc, 0xf1, 0x1b, 0x80,
	0x96, 0x86, 0x06, 0x21, 0xe6, 0xa1, 0x95, 0x5e, 0x98, 0xb2, 0x23, 0xb7, 0x95, 0xf1, 0x28, 0xc1,
	0xf6, 0x23, 0x68, 0x6a, 0x47, 0xe7, 0xf0, 0x38, 0x65, 0x25, 0x1f, 0x7c, 0xca, 0xc9, 0x02, 0xed,
	0xdd, 0xa7, 0xdb, 0x4f, 0xc0, 0x86, 0xc0, 0x5e, 0xf3, 0xb6, 0x60, 0xcf, 0x66, 0x53, 0xdf, 0x25,
	0x51, 0xab, 0x82, 0x09, 0xe6, 0x8e, 0x65, 0xb3, 0x99, 0x17, 0x8a, 0xab, 0x73, 0xcd, 0xdc, 0x49,
	0x9d, 0xfd, 0xc8, 0xd7, 0x89, 0x5c, 0xe8, 0x39, 0x94, 0x7d, 0xe2, 0x39, 0xd4, 0x1b, 0xc7, 0x88,
	0x40, 0x5b, 0xab, 0x15, 0x1b, 0x6b, 0xe6, 0xa6, 0xb4, 0x8a, 0xd0, 0xa0, 0x7e, 0xa5, 0x40, 0x39,
	0x3b, 0x28, 0xc8, 0x81, 0x6d, 0x4e, 0xc6, 0xd1, 0x96, 0x08, 0x59, 0x32, 0x69, 0x52, 0x92, 0xaf,
	0xee, 0x31, 0x68, 0xba, 0x29, 0xc0, 0x03, 0x26, 0x0d, 0xb1, 0x38, 0xb7, 0x78, 0xd6, 0x5a, 0xfd,
	0x15, 0x76, 0xf3, 0x02, 0x73, 0xa4, 0xfa, 0x6d, 0x56, 0xaa, 0x9f, 0xdc, 0x5d, 0xc3, 0xb2, 0x5c,
	0x3d, 0xd8, 0x5e, 0xf1, 0xdf, 0x74, 0x5d, 0x28, 0x37, 0x5d, 0x17, 0xf7, 0x5f, 0xee, 0x2f, 0x7e,
	0x53, 0xa0, 0xb4, 0xf8, 0xe7, 0x83, 0x1e, 0xc3, 0x5e, 0xf7, 0xa7, 0x1f, 0xdb, 0xbd, 0x53, 0xab,
	0x3f, 0x68, 0x0f, 0xde, 0xf6, 0xad, 0xde, 0xe9, 0x79, 0xfb, 0xa4, 0xd7, 0xad, 0xfc, 0x0f, 0x7d,
	0x0c, 0x5a, 0xd6, 0x65, 0x1a, 0xc7, 0xbd, 0xfe, 0xc0, 0x30, 0x8d, 0x6e, 0x45, 0x59, 0xf5, 0x76,
	0x8d, 0x33, 0xd3, 0xe8, 0xb4, 0x07, 0x46, 0xb7, 0x52, 0x58, 0xa5, 0xed, 0x1a, 0x27, 0x46, 0xe4,
	0x2a, 0xbe, 0x98, 0x40, 0x79, 0xe9, 0x5a, 0xfd, 0x08, 0xf6, 0xdb, 0x66, 0xe7, 0xfb, 0xde, 0x79,
	0xfb, 0x24, 0xb7, 0x8a, 0x65, 0x67, 0xb7, 0xd7, 0x6f, 0x1f, 0x9d, 0x88, 0x2a, 0x72, 0xa0, 0xc6,
	0x69, 0xec, 0x2c, 0x1c, 0x8d, 0xff, 0xbe, 0x3a, 0x50, 0xfe, 0xb9, 0x3a, 0x50, 0xfe, 0xbd, 0x3a,
	0x50, 0x60, 0xdf, 0x66, 0xd3, 0xbc, 0x0f, 0x74, 0xa4, 0xc6, 0x0d, 0x39, 0x8b, 0x64, 0x7f, 0xa6,
	0xfc, 0x72, 0x38, 0xa6, 0xe1, 0x64, 0x36, 0xd4, 0x6d, 0x36, 0x6d, 0x2e, 0xfe, 0x9a, 0x7e, 0x46,
	0x1d, 0xb7, 0x39, 0x66, 0xf1, 0x8f, 0xac, 0xfc, 0x4f, 0xfd, 0x06, 0xfb, 0x74, 0x7e, 0x38, 0x5c,
	0x17, 0xb6, 0xcf, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x92, 0x65, 0xfd, 0xfe, 0x43, 0x0b, 0x00,
	0x00,
}

func (m *Domain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Domain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ActiveClusters != nil {
		{
			size, err := m.ActiveClusters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.AsyncWorkflowConfig != nil {
		{
			size, err := m.AsyncWorkflowConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.IsolationGroups != nil {
		{
			size, err := m.IsolationGroups.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.FailoverInfo != nil {
		{
			size, err := m.FailoverInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.IsGlobalDomain {
		i--
		if m.IsGlobalDomain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clusters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDomain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.ActiveClusterName) > 0 {
		i -= len(m.ActiveClusterName)
		copy(dAtA[i:], m.ActiveClusterName)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.ActiveClusterName)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.VisibilityArchivalUri) > 0 {
		i -= len(m.VisibilityArchivalUri)
		copy(dAtA[i:], m.VisibilityArchivalUri)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.VisibilityArchivalUri)))
		i--
		dAtA[i] = 0x62
	}
	if m.VisibilityArchivalStatus != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.VisibilityArchivalStatus))
		i--
		dAtA[i] = 0x58
	}
	if len(m.HistoryArchivalUri) > 0 {
		i -= len(m.HistoryArchivalUri)
		copy(dAtA[i:], m.HistoryArchivalUri)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.HistoryArchivalUri)))
		i--
		dAtA[i] = 0x52
	}
	if m.HistoryArchivalStatus != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.HistoryArchivalStatus))
		i--
		dAtA[i] = 0x48
	}
	if m.BadBinaries != nil {
		{
			size, err := m.BadBinaries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.WorkflowExecutionRetentionPeriod != nil {
		{
			size, err := m.WorkflowExecutionRetentionPeriod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDomain(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OwnerEmail) > 0 {
		i -= len(m.OwnerEmail)
		copy(dAtA[i:], m.OwnerEmail)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.OwnerEmail)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterReplicationConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterReplicationConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterReplicationConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BadBinaries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadBinaries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadBinaries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Binaries) > 0 {
		for k := range m.Binaries {
			v := m.Binaries[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDomain(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BadBinaryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadBinaryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadBinaryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FailoverInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailoverInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailoverInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PendingShards) > 0 {
		dAtA10 := make([]byte, len(m.PendingShards)*10)
		var j9 int
		for _, num1 := range m.PendingShards {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintDomain(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x2a
	}
	if m.CompletedShardCount != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.CompletedShardCount))
		i--
		dAtA[i] = 0x20
	}
	if m.FailoverExpireTimestamp != nil {
		{
			size, err := m.FailoverExpireTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FailoverStartTimestamp != nil {
		{
			size, err := m.FailoverStartTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActiveClusters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveClusters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveClusters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegionToCluster) > 0 {
		for k := range m.RegionToCluster {
			v := m.RegionToCluster[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDomain(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDomain(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDomain(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActiveClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintDomain(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ActiveClusterName) > 0 {
		i -= len(m.ActiveClusterName)
		copy(dAtA[i:], m.ActiveClusterName)
		i = encodeVarintDomain(dAtA, i, uint64(len(m.ActiveClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDomain(dAtA []byte, offset int, v uint64) int {
	offset -= sovDomain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDomain(uint64(m.Status))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.OwnerEmail)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + 1 + len(v) + sovDomain(uint64(len(v)))
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	if m.WorkflowExecutionRetentionPeriod != nil {
		l = m.WorkflowExecutionRetentionPeriod.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.BadBinaries != nil {
		l = m.BadBinaries.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.HistoryArchivalStatus != 0 {
		n += 1 + sovDomain(uint64(m.HistoryArchivalStatus))
	}
	l = len(m.HistoryArchivalUri)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.VisibilityArchivalStatus != 0 {
		n += 1 + sovDomain(uint64(m.VisibilityArchivalStatus))
	}
	l = len(m.VisibilityArchivalUri)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.ActiveClusterName)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovDomain(uint64(l))
		}
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovDomain(uint64(m.FailoverVersion))
	}
	if m.IsGlobalDomain {
		n += 3
	}
	if m.FailoverInfo != nil {
		l = m.FailoverInfo.Size()
		n += 2 + l + sovDomain(uint64(l))
	}
	if m.IsolationGroups != nil {
		l = m.IsolationGroups.Size()
		n += 2 + l + sovDomain(uint64(l))
	}
	if m.AsyncWorkflowConfig != nil {
		l = m.AsyncWorkflowConfig.Size()
		n += 2 + l + sovDomain(uint64(l))
	}
	if m.ActiveClusters != nil {
		l = m.ActiveClusters.Size()
		n += 2 + l + sovDomain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterReplicationConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BadBinaries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Binaries) > 0 {
		for k, v := range m.Binaries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDomain(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BadBinaryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FailoverInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailoverVersion != 0 {
		n += 1 + sovDomain(uint64(m.FailoverVersion))
	}
	if m.FailoverStartTimestamp != nil {
		l = m.FailoverStartTimestamp.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.FailoverExpireTimestamp != nil {
		l = m.FailoverExpireTimestamp.Size()
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.CompletedShardCount != 0 {
		n += 1 + sovDomain(uint64(m.CompletedShardCount))
	}
	if len(m.PendingShards) > 0 {
		l = 0
		for _, e := range m.PendingShards {
			l += sovDomain(uint64(e))
		}
		n += 1 + sovDomain(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActiveClusters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegionToCluster) > 0 {
		for k, v := range m.RegionToCluster {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDomain(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovDomain(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovDomain(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActiveClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActiveClusterName)
	if l > 0 {
		n += 1 + l + sovDomain(uint64(l))
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovDomain(uint64(m.FailoverVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDomain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDomain(x uint64) (n int) {
	return sovDomain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Domain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DomainStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionRetentionPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionRetentionPeriod == nil {
				m.WorkflowExecutionRetentionPeriod = &types.Duration{}
			}
			if err := m.WorkflowExecutionRetentionPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadBinaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BadBinaries == nil {
				m.BadBinaries = &BadBinaries{}
			}
			if err := m.BadBinaries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalStatus", wireType)
			}
			m.HistoryArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryArchivalStatus |= ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryArchivalUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalStatus", wireType)
			}
			m.VisibilityArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisibilityArchivalStatus |= ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisibilityArchivalUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &ClusterReplicationConfiguration{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobalDomain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobalDomain = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailoverInfo == nil {
				m.FailoverInfo = &FailoverInfo{}
			}
			if err := m.FailoverInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsolationGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsolationGroups == nil {
				m.IsolationGroups = &IsolationGroupConfiguration{}
			}
			if err := m.IsolationGroups.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncWorkflowConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AsyncWorkflowConfig == nil {
				m.AsyncWorkflowConfig = &AsyncWorkflowConfiguration{}
			}
			if err := m.AsyncWorkflowConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveClusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveClusters == nil {
				m.ActiveClusters = &ActiveClusters{}
			}
			if err := m.ActiveClusters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterReplicationConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterReplicationConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterReplicationConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadBinaries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadBinaries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadBinaries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binaries == nil {
				m.Binaries = make(map[string]*BadBinaryInfo)
			}
			var mapkey string
			var mapvalue *BadBinaryInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDomain
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDomain
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BadBinaryInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Binaries[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BadBinaryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadBinaryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadBinaryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailoverInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailoverInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailoverInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverStartTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailoverStartTimestamp == nil {
				m.FailoverStartTimestamp = &types.Timestamp{}
			}
			if err := m.FailoverStartTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverExpireTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailoverExpireTimestamp == nil {
				m.FailoverExpireTimestamp = &types.Timestamp{}
			}
			if err := m.FailoverExpireTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedShardCount", wireType)
			}
			m.CompletedShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedShardCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingShards = append(m.PendingShards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomain
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDomain
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingShards) == 0 {
					m.PendingShards = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingShards = append(m.PendingShards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingShards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveClusters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveClusters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveClusters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionToCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionToCluster == nil {
				m.RegionToCluster = make(map[string]*ActiveClusterInfo)
			}
			var mapkey string
			var mapvalue *ActiveClusterInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDomain
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDomain
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDomain
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ActiveClusterInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDomain(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDomain
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RegionToCluster[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDomain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDomain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDomain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDomain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDomain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDomain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDomain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDomain = fmt.Errorf("proto: unexpected end of group")
)
