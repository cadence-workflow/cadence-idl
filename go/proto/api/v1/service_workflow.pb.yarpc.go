// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: uber/cadence/api/v1/service_workflow.proto

package apiv1

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// WorkflowAPIYARPCClient is the YARPC client-side interface for the WorkflowAPI service.
type WorkflowAPIYARPCClient interface {
	RestartWorkflowExecution(context.Context, *RestartWorkflowExecutionRequest, ...yarpc.CallOption) (*RestartWorkflowExecutionResponse, error)
	StartWorkflowExecution(context.Context, *StartWorkflowExecutionRequest, ...yarpc.CallOption) (*StartWorkflowExecutionResponse, error)
	StartWorkflowExecutionAsync(context.Context, *StartWorkflowExecutionAsyncRequest, ...yarpc.CallOption) (*StartWorkflowExecutionAsyncResponse, error)
	SignalWorkflowExecution(context.Context, *SignalWorkflowExecutionRequest, ...yarpc.CallOption) (*SignalWorkflowExecutionResponse, error)
	SignalWithStartWorkflowExecution(context.Context, *SignalWithStartWorkflowExecutionRequest, ...yarpc.CallOption) (*SignalWithStartWorkflowExecutionResponse, error)
	SignalWithStartWorkflowExecutionAsync(context.Context, *SignalWithStartWorkflowExecutionAsyncRequest, ...yarpc.CallOption) (*SignalWithStartWorkflowExecutionAsyncResponse, error)
	ResetWorkflowExecution(context.Context, *ResetWorkflowExecutionRequest, ...yarpc.CallOption) (*ResetWorkflowExecutionResponse, error)
	RequestCancelWorkflowExecution(context.Context, *RequestCancelWorkflowExecutionRequest, ...yarpc.CallOption) (*RequestCancelWorkflowExecutionResponse, error)
	TerminateWorkflowExecution(context.Context, *TerminateWorkflowExecutionRequest, ...yarpc.CallOption) (*TerminateWorkflowExecutionResponse, error)
	DescribeWorkflowExecution(context.Context, *DescribeWorkflowExecutionRequest, ...yarpc.CallOption) (*DescribeWorkflowExecutionResponse, error)
	QueryWorkflow(context.Context, *QueryWorkflowRequest, ...yarpc.CallOption) (*QueryWorkflowResponse, error)
	DescribeTaskList(context.Context, *DescribeTaskListRequest, ...yarpc.CallOption) (*DescribeTaskListResponse, error)
	GetTaskListsByDomain(context.Context, *GetTaskListsByDomainRequest, ...yarpc.CallOption) (*GetTaskListsByDomainResponse, error)
	ListTaskListPartitions(context.Context, *ListTaskListPartitionsRequest, ...yarpc.CallOption) (*ListTaskListPartitionsResponse, error)
	GetClusterInfo(context.Context, *GetClusterInfoRequest, ...yarpc.CallOption) (*GetClusterInfoResponse, error)
	GetWorkflowExecutionHistory(context.Context, *GetWorkflowExecutionHistoryRequest, ...yarpc.CallOption) (*GetWorkflowExecutionHistoryResponse, error)
	RefreshWorkflowTasks(context.Context, *RefreshWorkflowTasksRequest, ...yarpc.CallOption) (*RefreshWorkflowTasksResponse, error)
	DiagnoseWorkflowExecution(context.Context, *DiagnoseWorkflowExecutionRequest, ...yarpc.CallOption) (*DiagnoseWorkflowExecutionResponse, error)
}

func newWorkflowAPIYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) WorkflowAPIYARPCClient {
	return &_WorkflowAPIYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.cadence.api.v1.WorkflowAPI",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewWorkflowAPIYARPCClient builds a new YARPC client for the WorkflowAPI service.
func NewWorkflowAPIYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) WorkflowAPIYARPCClient {
	return newWorkflowAPIYARPCClient(clientConfig, nil, options...)
}

// WorkflowAPIYARPCServer is the YARPC server-side interface for the WorkflowAPI service.
type WorkflowAPIYARPCServer interface {
	RestartWorkflowExecution(context.Context, *RestartWorkflowExecutionRequest) (*RestartWorkflowExecutionResponse, error)
	StartWorkflowExecution(context.Context, *StartWorkflowExecutionRequest) (*StartWorkflowExecutionResponse, error)
	StartWorkflowExecutionAsync(context.Context, *StartWorkflowExecutionAsyncRequest) (*StartWorkflowExecutionAsyncResponse, error)
	SignalWorkflowExecution(context.Context, *SignalWorkflowExecutionRequest) (*SignalWorkflowExecutionResponse, error)
	SignalWithStartWorkflowExecution(context.Context, *SignalWithStartWorkflowExecutionRequest) (*SignalWithStartWorkflowExecutionResponse, error)
	SignalWithStartWorkflowExecutionAsync(context.Context, *SignalWithStartWorkflowExecutionAsyncRequest) (*SignalWithStartWorkflowExecutionAsyncResponse, error)
	ResetWorkflowExecution(context.Context, *ResetWorkflowExecutionRequest) (*ResetWorkflowExecutionResponse, error)
	RequestCancelWorkflowExecution(context.Context, *RequestCancelWorkflowExecutionRequest) (*RequestCancelWorkflowExecutionResponse, error)
	TerminateWorkflowExecution(context.Context, *TerminateWorkflowExecutionRequest) (*TerminateWorkflowExecutionResponse, error)
	DescribeWorkflowExecution(context.Context, *DescribeWorkflowExecutionRequest) (*DescribeWorkflowExecutionResponse, error)
	QueryWorkflow(context.Context, *QueryWorkflowRequest) (*QueryWorkflowResponse, error)
	DescribeTaskList(context.Context, *DescribeTaskListRequest) (*DescribeTaskListResponse, error)
	GetTaskListsByDomain(context.Context, *GetTaskListsByDomainRequest) (*GetTaskListsByDomainResponse, error)
	ListTaskListPartitions(context.Context, *ListTaskListPartitionsRequest) (*ListTaskListPartitionsResponse, error)
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error)
	GetWorkflowExecutionHistory(context.Context, *GetWorkflowExecutionHistoryRequest) (*GetWorkflowExecutionHistoryResponse, error)
	RefreshWorkflowTasks(context.Context, *RefreshWorkflowTasksRequest) (*RefreshWorkflowTasksResponse, error)
	DiagnoseWorkflowExecution(context.Context, *DiagnoseWorkflowExecutionRequest) (*DiagnoseWorkflowExecutionResponse, error)
}

type buildWorkflowAPIYARPCProceduresParams struct {
	Server      WorkflowAPIYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildWorkflowAPIYARPCProcedures(params buildWorkflowAPIYARPCProceduresParams) []transport.Procedure {
	handler := &_WorkflowAPIYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.cadence.api.v1.WorkflowAPI",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "RestartWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RestartWorkflowExecution,
							NewRequest:  newWorkflowAPIServiceRestartWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "StartWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.StartWorkflowExecution,
							NewRequest:  newWorkflowAPIServiceStartWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "StartWorkflowExecutionAsync",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.StartWorkflowExecutionAsync,
							NewRequest:  newWorkflowAPIServiceStartWorkflowExecutionAsyncYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "SignalWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.SignalWorkflowExecution,
							NewRequest:  newWorkflowAPIServiceSignalWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "SignalWithStartWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.SignalWithStartWorkflowExecution,
							NewRequest:  newWorkflowAPIServiceSignalWithStartWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "SignalWithStartWorkflowExecutionAsync",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.SignalWithStartWorkflowExecutionAsync,
							NewRequest:  newWorkflowAPIServiceSignalWithStartWorkflowExecutionAsyncYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ResetWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ResetWorkflowExecution,
							NewRequest:  newWorkflowAPIServiceResetWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RequestCancelWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RequestCancelWorkflowExecution,
							NewRequest:  newWorkflowAPIServiceRequestCancelWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "TerminateWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.TerminateWorkflowExecution,
							NewRequest:  newWorkflowAPIServiceTerminateWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeWorkflowExecution,
							NewRequest:  newWorkflowAPIServiceDescribeWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "QueryWorkflow",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.QueryWorkflow,
							NewRequest:  newWorkflowAPIServiceQueryWorkflowYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeTaskList",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeTaskList,
							NewRequest:  newWorkflowAPIServiceDescribeTaskListYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetTaskListsByDomain",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetTaskListsByDomain,
							NewRequest:  newWorkflowAPIServiceGetTaskListsByDomainYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListTaskListPartitions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListTaskListPartitions,
							NewRequest:  newWorkflowAPIServiceListTaskListPartitionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetClusterInfo",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetClusterInfo,
							NewRequest:  newWorkflowAPIServiceGetClusterInfoYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetWorkflowExecutionHistory",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetWorkflowExecutionHistory,
							NewRequest:  newWorkflowAPIServiceGetWorkflowExecutionHistoryYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RefreshWorkflowTasks",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RefreshWorkflowTasks,
							NewRequest:  newWorkflowAPIServiceRefreshWorkflowTasksYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DiagnoseWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DiagnoseWorkflowExecution,
							NewRequest:  newWorkflowAPIServiceDiagnoseWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// BuildWorkflowAPIYARPCProcedures prepares an implementation of the WorkflowAPI service for YARPC registration.
func BuildWorkflowAPIYARPCProcedures(server WorkflowAPIYARPCServer) []transport.Procedure {
	return buildWorkflowAPIYARPCProcedures(buildWorkflowAPIYARPCProceduresParams{Server: server})
}

// FxWorkflowAPIYARPCClientParams defines the input
// for NewFxWorkflowAPIYARPCClient. It provides the
// paramaters to get a WorkflowAPIYARPCClient in an
// Fx application.
type FxWorkflowAPIYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxWorkflowAPIYARPCClientResult defines the output
// of NewFxWorkflowAPIYARPCClient. It provides a
// WorkflowAPIYARPCClient to an Fx application.
type FxWorkflowAPIYARPCClientResult struct {
	fx.Out

	Client WorkflowAPIYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxWorkflowAPIYARPCClient provides a WorkflowAPIYARPCClient
// to an Fx application using the given name for routing.
//
//	fx.Provide(
//	  apiv1.NewFxWorkflowAPIYARPCClient("service-name"),
//	  ...
//	)
func NewFxWorkflowAPIYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxWorkflowAPIYARPCClientParams) FxWorkflowAPIYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxWorkflowAPIYARPCClientResult{
			Client: newWorkflowAPIYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxWorkflowAPIYARPCProceduresParams defines the input
// for NewFxWorkflowAPIYARPCProcedures. It provides the
// paramaters to get WorkflowAPIYARPCServer procedures in an
// Fx application.
type FxWorkflowAPIYARPCProceduresParams struct {
	fx.In

	Server      WorkflowAPIYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxWorkflowAPIYARPCProceduresResult defines the output
// of NewFxWorkflowAPIYARPCProcedures. It provides
// WorkflowAPIYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxWorkflowAPIYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxWorkflowAPIYARPCProcedures provides WorkflowAPIYARPCServer procedures to an Fx application.
// It expects a WorkflowAPIYARPCServer to be present in the container.
//
//	fx.Provide(
//	  apiv1.NewFxWorkflowAPIYARPCProcedures(),
//	  ...
//	)
func NewFxWorkflowAPIYARPCProcedures() interface{} {
	return func(params FxWorkflowAPIYARPCProceduresParams) FxWorkflowAPIYARPCProceduresResult {
		return FxWorkflowAPIYARPCProceduresResult{
			Procedures: buildWorkflowAPIYARPCProcedures(buildWorkflowAPIYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.cadence.api.v1.WorkflowAPI",
				FileDescriptors: yarpcFileDescriptorClosure674d14d2fee4e473,
			},
		}
	}
}

type _WorkflowAPIYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_WorkflowAPIYARPCCaller) RestartWorkflowExecution(ctx context.Context, request *RestartWorkflowExecutionRequest, options ...yarpc.CallOption) (*RestartWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RestartWorkflowExecution", request, newWorkflowAPIServiceRestartWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RestartWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceRestartWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) StartWorkflowExecution(ctx context.Context, request *StartWorkflowExecutionRequest, options ...yarpc.CallOption) (*StartWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "StartWorkflowExecution", request, newWorkflowAPIServiceStartWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*StartWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceStartWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) StartWorkflowExecutionAsync(ctx context.Context, request *StartWorkflowExecutionAsyncRequest, options ...yarpc.CallOption) (*StartWorkflowExecutionAsyncResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "StartWorkflowExecutionAsync", request, newWorkflowAPIServiceStartWorkflowExecutionAsyncYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*StartWorkflowExecutionAsyncResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceStartWorkflowExecutionAsyncYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) SignalWorkflowExecution(ctx context.Context, request *SignalWorkflowExecutionRequest, options ...yarpc.CallOption) (*SignalWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SignalWorkflowExecution", request, newWorkflowAPIServiceSignalWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SignalWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceSignalWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) SignalWithStartWorkflowExecution(ctx context.Context, request *SignalWithStartWorkflowExecutionRequest, options ...yarpc.CallOption) (*SignalWithStartWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SignalWithStartWorkflowExecution", request, newWorkflowAPIServiceSignalWithStartWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SignalWithStartWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceSignalWithStartWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) SignalWithStartWorkflowExecutionAsync(ctx context.Context, request *SignalWithStartWorkflowExecutionAsyncRequest, options ...yarpc.CallOption) (*SignalWithStartWorkflowExecutionAsyncResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SignalWithStartWorkflowExecutionAsync", request, newWorkflowAPIServiceSignalWithStartWorkflowExecutionAsyncYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SignalWithStartWorkflowExecutionAsyncResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceSignalWithStartWorkflowExecutionAsyncYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) ResetWorkflowExecution(ctx context.Context, request *ResetWorkflowExecutionRequest, options ...yarpc.CallOption) (*ResetWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ResetWorkflowExecution", request, newWorkflowAPIServiceResetWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ResetWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceResetWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) RequestCancelWorkflowExecution(ctx context.Context, request *RequestCancelWorkflowExecutionRequest, options ...yarpc.CallOption) (*RequestCancelWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RequestCancelWorkflowExecution", request, newWorkflowAPIServiceRequestCancelWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RequestCancelWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceRequestCancelWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) TerminateWorkflowExecution(ctx context.Context, request *TerminateWorkflowExecutionRequest, options ...yarpc.CallOption) (*TerminateWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "TerminateWorkflowExecution", request, newWorkflowAPIServiceTerminateWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*TerminateWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceTerminateWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) DescribeWorkflowExecution(ctx context.Context, request *DescribeWorkflowExecutionRequest, options ...yarpc.CallOption) (*DescribeWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeWorkflowExecution", request, newWorkflowAPIServiceDescribeWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceDescribeWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) QueryWorkflow(ctx context.Context, request *QueryWorkflowRequest, options ...yarpc.CallOption) (*QueryWorkflowResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "QueryWorkflow", request, newWorkflowAPIServiceQueryWorkflowYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*QueryWorkflowResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceQueryWorkflowYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) DescribeTaskList(ctx context.Context, request *DescribeTaskListRequest, options ...yarpc.CallOption) (*DescribeTaskListResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeTaskList", request, newWorkflowAPIServiceDescribeTaskListYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeTaskListResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceDescribeTaskListYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) GetTaskListsByDomain(ctx context.Context, request *GetTaskListsByDomainRequest, options ...yarpc.CallOption) (*GetTaskListsByDomainResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetTaskListsByDomain", request, newWorkflowAPIServiceGetTaskListsByDomainYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetTaskListsByDomainResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceGetTaskListsByDomainYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) ListTaskListPartitions(ctx context.Context, request *ListTaskListPartitionsRequest, options ...yarpc.CallOption) (*ListTaskListPartitionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListTaskListPartitions", request, newWorkflowAPIServiceListTaskListPartitionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListTaskListPartitionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceListTaskListPartitionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) GetClusterInfo(ctx context.Context, request *GetClusterInfoRequest, options ...yarpc.CallOption) (*GetClusterInfoResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetClusterInfo", request, newWorkflowAPIServiceGetClusterInfoYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetClusterInfoResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceGetClusterInfoYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) GetWorkflowExecutionHistory(ctx context.Context, request *GetWorkflowExecutionHistoryRequest, options ...yarpc.CallOption) (*GetWorkflowExecutionHistoryResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetWorkflowExecutionHistory", request, newWorkflowAPIServiceGetWorkflowExecutionHistoryYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetWorkflowExecutionHistoryResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceGetWorkflowExecutionHistoryYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) RefreshWorkflowTasks(ctx context.Context, request *RefreshWorkflowTasksRequest, options ...yarpc.CallOption) (*RefreshWorkflowTasksResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RefreshWorkflowTasks", request, newWorkflowAPIServiceRefreshWorkflowTasksYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RefreshWorkflowTasksResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceRefreshWorkflowTasksYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowAPIYARPCCaller) DiagnoseWorkflowExecution(ctx context.Context, request *DiagnoseWorkflowExecutionRequest, options ...yarpc.CallOption) (*DiagnoseWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DiagnoseWorkflowExecution", request, newWorkflowAPIServiceDiagnoseWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DiagnoseWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowAPIServiceDiagnoseWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

type _WorkflowAPIYARPCHandler struct {
	server WorkflowAPIYARPCServer
}

func (h *_WorkflowAPIYARPCHandler) RestartWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RestartWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RestartWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceRestartWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RestartWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) StartWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *StartWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*StartWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceStartWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.StartWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) StartWorkflowExecutionAsync(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *StartWorkflowExecutionAsyncRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*StartWorkflowExecutionAsyncRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceStartWorkflowExecutionAsyncYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.StartWorkflowExecutionAsync(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) SignalWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SignalWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SignalWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceSignalWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SignalWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) SignalWithStartWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SignalWithStartWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SignalWithStartWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceSignalWithStartWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SignalWithStartWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) SignalWithStartWorkflowExecutionAsync(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SignalWithStartWorkflowExecutionAsyncRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SignalWithStartWorkflowExecutionAsyncRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceSignalWithStartWorkflowExecutionAsyncYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SignalWithStartWorkflowExecutionAsync(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) ResetWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ResetWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ResetWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceResetWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ResetWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) RequestCancelWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RequestCancelWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RequestCancelWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceRequestCancelWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RequestCancelWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) TerminateWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *TerminateWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*TerminateWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceTerminateWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.TerminateWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) DescribeWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceDescribeWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) QueryWorkflow(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *QueryWorkflowRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*QueryWorkflowRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceQueryWorkflowYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.QueryWorkflow(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) DescribeTaskList(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeTaskListRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeTaskListRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceDescribeTaskListYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeTaskList(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) GetTaskListsByDomain(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetTaskListsByDomainRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetTaskListsByDomainRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceGetTaskListsByDomainYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetTaskListsByDomain(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) ListTaskListPartitions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListTaskListPartitionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListTaskListPartitionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceListTaskListPartitionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListTaskListPartitions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) GetClusterInfo(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetClusterInfoRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetClusterInfoRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceGetClusterInfoYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetClusterInfo(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) GetWorkflowExecutionHistory(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetWorkflowExecutionHistoryRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetWorkflowExecutionHistoryRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceGetWorkflowExecutionHistoryYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetWorkflowExecutionHistory(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) RefreshWorkflowTasks(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RefreshWorkflowTasksRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RefreshWorkflowTasksRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceRefreshWorkflowTasksYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RefreshWorkflowTasks(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowAPIYARPCHandler) DiagnoseWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DiagnoseWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DiagnoseWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowAPIServiceDiagnoseWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DiagnoseWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newWorkflowAPIServiceRestartWorkflowExecutionYARPCRequest() proto.Message {
	return &RestartWorkflowExecutionRequest{}
}

func newWorkflowAPIServiceRestartWorkflowExecutionYARPCResponse() proto.Message {
	return &RestartWorkflowExecutionResponse{}
}

func newWorkflowAPIServiceStartWorkflowExecutionYARPCRequest() proto.Message {
	return &StartWorkflowExecutionRequest{}
}

func newWorkflowAPIServiceStartWorkflowExecutionYARPCResponse() proto.Message {
	return &StartWorkflowExecutionResponse{}
}

func newWorkflowAPIServiceStartWorkflowExecutionAsyncYARPCRequest() proto.Message {
	return &StartWorkflowExecutionAsyncRequest{}
}

func newWorkflowAPIServiceStartWorkflowExecutionAsyncYARPCResponse() proto.Message {
	return &StartWorkflowExecutionAsyncResponse{}
}

func newWorkflowAPIServiceSignalWorkflowExecutionYARPCRequest() proto.Message {
	return &SignalWorkflowExecutionRequest{}
}

func newWorkflowAPIServiceSignalWorkflowExecutionYARPCResponse() proto.Message {
	return &SignalWorkflowExecutionResponse{}
}

func newWorkflowAPIServiceSignalWithStartWorkflowExecutionYARPCRequest() proto.Message {
	return &SignalWithStartWorkflowExecutionRequest{}
}

func newWorkflowAPIServiceSignalWithStartWorkflowExecutionYARPCResponse() proto.Message {
	return &SignalWithStartWorkflowExecutionResponse{}
}

func newWorkflowAPIServiceSignalWithStartWorkflowExecutionAsyncYARPCRequest() proto.Message {
	return &SignalWithStartWorkflowExecutionAsyncRequest{}
}

func newWorkflowAPIServiceSignalWithStartWorkflowExecutionAsyncYARPCResponse() proto.Message {
	return &SignalWithStartWorkflowExecutionAsyncResponse{}
}

func newWorkflowAPIServiceResetWorkflowExecutionYARPCRequest() proto.Message {
	return &ResetWorkflowExecutionRequest{}
}

func newWorkflowAPIServiceResetWorkflowExecutionYARPCResponse() proto.Message {
	return &ResetWorkflowExecutionResponse{}
}

func newWorkflowAPIServiceRequestCancelWorkflowExecutionYARPCRequest() proto.Message {
	return &RequestCancelWorkflowExecutionRequest{}
}

func newWorkflowAPIServiceRequestCancelWorkflowExecutionYARPCResponse() proto.Message {
	return &RequestCancelWorkflowExecutionResponse{}
}

func newWorkflowAPIServiceTerminateWorkflowExecutionYARPCRequest() proto.Message {
	return &TerminateWorkflowExecutionRequest{}
}

func newWorkflowAPIServiceTerminateWorkflowExecutionYARPCResponse() proto.Message {
	return &TerminateWorkflowExecutionResponse{}
}

func newWorkflowAPIServiceDescribeWorkflowExecutionYARPCRequest() proto.Message {
	return &DescribeWorkflowExecutionRequest{}
}

func newWorkflowAPIServiceDescribeWorkflowExecutionYARPCResponse() proto.Message {
	return &DescribeWorkflowExecutionResponse{}
}

func newWorkflowAPIServiceQueryWorkflowYARPCRequest() proto.Message {
	return &QueryWorkflowRequest{}
}

func newWorkflowAPIServiceQueryWorkflowYARPCResponse() proto.Message {
	return &QueryWorkflowResponse{}
}

func newWorkflowAPIServiceDescribeTaskListYARPCRequest() proto.Message {
	return &DescribeTaskListRequest{}
}

func newWorkflowAPIServiceDescribeTaskListYARPCResponse() proto.Message {
	return &DescribeTaskListResponse{}
}

func newWorkflowAPIServiceGetTaskListsByDomainYARPCRequest() proto.Message {
	return &GetTaskListsByDomainRequest{}
}

func newWorkflowAPIServiceGetTaskListsByDomainYARPCResponse() proto.Message {
	return &GetTaskListsByDomainResponse{}
}

func newWorkflowAPIServiceListTaskListPartitionsYARPCRequest() proto.Message {
	return &ListTaskListPartitionsRequest{}
}

func newWorkflowAPIServiceListTaskListPartitionsYARPCResponse() proto.Message {
	return &ListTaskListPartitionsResponse{}
}

func newWorkflowAPIServiceGetClusterInfoYARPCRequest() proto.Message {
	return &GetClusterInfoRequest{}
}

func newWorkflowAPIServiceGetClusterInfoYARPCResponse() proto.Message {
	return &GetClusterInfoResponse{}
}

func newWorkflowAPIServiceGetWorkflowExecutionHistoryYARPCRequest() proto.Message {
	return &GetWorkflowExecutionHistoryRequest{}
}

func newWorkflowAPIServiceGetWorkflowExecutionHistoryYARPCResponse() proto.Message {
	return &GetWorkflowExecutionHistoryResponse{}
}

func newWorkflowAPIServiceRefreshWorkflowTasksYARPCRequest() proto.Message {
	return &RefreshWorkflowTasksRequest{}
}

func newWorkflowAPIServiceRefreshWorkflowTasksYARPCResponse() proto.Message {
	return &RefreshWorkflowTasksResponse{}
}

func newWorkflowAPIServiceDiagnoseWorkflowExecutionYARPCRequest() proto.Message {
	return &DiagnoseWorkflowExecutionRequest{}
}

func newWorkflowAPIServiceDiagnoseWorkflowExecutionYARPCResponse() proto.Message {
	return &DiagnoseWorkflowExecutionResponse{}
}

var (
	emptyWorkflowAPIServiceRestartWorkflowExecutionYARPCRequest               = &RestartWorkflowExecutionRequest{}
	emptyWorkflowAPIServiceRestartWorkflowExecutionYARPCResponse              = &RestartWorkflowExecutionResponse{}
	emptyWorkflowAPIServiceStartWorkflowExecutionYARPCRequest                 = &StartWorkflowExecutionRequest{}
	emptyWorkflowAPIServiceStartWorkflowExecutionYARPCResponse                = &StartWorkflowExecutionResponse{}
	emptyWorkflowAPIServiceStartWorkflowExecutionAsyncYARPCRequest            = &StartWorkflowExecutionAsyncRequest{}
	emptyWorkflowAPIServiceStartWorkflowExecutionAsyncYARPCResponse           = &StartWorkflowExecutionAsyncResponse{}
	emptyWorkflowAPIServiceSignalWorkflowExecutionYARPCRequest                = &SignalWorkflowExecutionRequest{}
	emptyWorkflowAPIServiceSignalWorkflowExecutionYARPCResponse               = &SignalWorkflowExecutionResponse{}
	emptyWorkflowAPIServiceSignalWithStartWorkflowExecutionYARPCRequest       = &SignalWithStartWorkflowExecutionRequest{}
	emptyWorkflowAPIServiceSignalWithStartWorkflowExecutionYARPCResponse      = &SignalWithStartWorkflowExecutionResponse{}
	emptyWorkflowAPIServiceSignalWithStartWorkflowExecutionAsyncYARPCRequest  = &SignalWithStartWorkflowExecutionAsyncRequest{}
	emptyWorkflowAPIServiceSignalWithStartWorkflowExecutionAsyncYARPCResponse = &SignalWithStartWorkflowExecutionAsyncResponse{}
	emptyWorkflowAPIServiceResetWorkflowExecutionYARPCRequest                 = &ResetWorkflowExecutionRequest{}
	emptyWorkflowAPIServiceResetWorkflowExecutionYARPCResponse                = &ResetWorkflowExecutionResponse{}
	emptyWorkflowAPIServiceRequestCancelWorkflowExecutionYARPCRequest         = &RequestCancelWorkflowExecutionRequest{}
	emptyWorkflowAPIServiceRequestCancelWorkflowExecutionYARPCResponse        = &RequestCancelWorkflowExecutionResponse{}
	emptyWorkflowAPIServiceTerminateWorkflowExecutionYARPCRequest             = &TerminateWorkflowExecutionRequest{}
	emptyWorkflowAPIServiceTerminateWorkflowExecutionYARPCResponse            = &TerminateWorkflowExecutionResponse{}
	emptyWorkflowAPIServiceDescribeWorkflowExecutionYARPCRequest              = &DescribeWorkflowExecutionRequest{}
	emptyWorkflowAPIServiceDescribeWorkflowExecutionYARPCResponse             = &DescribeWorkflowExecutionResponse{}
	emptyWorkflowAPIServiceQueryWorkflowYARPCRequest                          = &QueryWorkflowRequest{}
	emptyWorkflowAPIServiceQueryWorkflowYARPCResponse                         = &QueryWorkflowResponse{}
	emptyWorkflowAPIServiceDescribeTaskListYARPCRequest                       = &DescribeTaskListRequest{}
	emptyWorkflowAPIServiceDescribeTaskListYARPCResponse                      = &DescribeTaskListResponse{}
	emptyWorkflowAPIServiceGetTaskListsByDomainYARPCRequest                   = &GetTaskListsByDomainRequest{}
	emptyWorkflowAPIServiceGetTaskListsByDomainYARPCResponse                  = &GetTaskListsByDomainResponse{}
	emptyWorkflowAPIServiceListTaskListPartitionsYARPCRequest                 = &ListTaskListPartitionsRequest{}
	emptyWorkflowAPIServiceListTaskListPartitionsYARPCResponse                = &ListTaskListPartitionsResponse{}
	emptyWorkflowAPIServiceGetClusterInfoYARPCRequest                         = &GetClusterInfoRequest{}
	emptyWorkflowAPIServiceGetClusterInfoYARPCResponse                        = &GetClusterInfoResponse{}
	emptyWorkflowAPIServiceGetWorkflowExecutionHistoryYARPCRequest            = &GetWorkflowExecutionHistoryRequest{}
	emptyWorkflowAPIServiceGetWorkflowExecutionHistoryYARPCResponse           = &GetWorkflowExecutionHistoryResponse{}
	emptyWorkflowAPIServiceRefreshWorkflowTasksYARPCRequest                   = &RefreshWorkflowTasksRequest{}
	emptyWorkflowAPIServiceRefreshWorkflowTasksYARPCResponse                  = &RefreshWorkflowTasksResponse{}
	emptyWorkflowAPIServiceDiagnoseWorkflowExecutionYARPCRequest              = &DiagnoseWorkflowExecutionRequest{}
	emptyWorkflowAPIServiceDiagnoseWorkflowExecutionYARPCResponse             = &DiagnoseWorkflowExecutionResponse{}
)

var yarpcFileDescriptorClosure674d14d2fee4e473 = [][]byte{
	// uber/cadence/api/v1/service_workflow.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcd, 0x6f, 0xdc, 0xc6,
		0x15, 0x07, 0xf5, 0xad, 0xb7, 0x92, 0x2c, 0x8d, 0xbe, 0xd6, 0x2b, 0xeb, 0x8b, 0x8e, 0x53, 0xd5,
		0x89, 0x57, 0xb5, 0x94, 0xd8, 0x89, 0x93, 0x36, 0x90, 0xd7, 0x96, 0xa3, 0xc2, 0x4e, 0x55, 0x4a,
		0xb5, 0xd1, 0x5e, 0x88, 0x11, 0x39, 0x5a, 0x8d, 0xc5, 0x25, 0xa9, 0x99, 0xa1, 0x94, 0x4d, 0x0e,
		0x45, 0x8b, 0x20, 0x05, 0x8a, 0xb6, 0xe8, 0xb5, 0x40, 0xd1, 0x1e, 0x7a, 0xc8, 0xa9, 0xb9, 0xf4,
		0x5f, 0x28, 0xfa, 0x7f, 0xf4, 0x2f, 0xc8, 0xa9, 0xc7, 0x06, 0x05, 0x67, 0x86, 0xfb, 0x25, 0x92,
		0xbb, 0x92, 0x13, 0xd8, 0xe9, 0x6d, 0x67, 0xe6, 0xfd, 0xde, 0xbc, 0x79, 0x5f, 0xf3, 0xe6, 0x2d,
		0xe1, 0x66, 0x74, 0x40, 0xd8, 0xba, 0x83, 0x5d, 0xe2, 0x3b, 0x64, 0x1d, 0x87, 0x74, 0xfd, 0xf4,
		0xf6, 0x3a, 0x27, 0xec, 0x94, 0x3a, 0xc4, 0x3e, 0x0b, 0xd8, 0xf1, 0xa1, 0x17, 0x9c, 0x95, 0x43,
		0x16, 0x88, 0x00, 0x4d, 0xc7, 0xb4, 0x65, 0x4d, 0x5b, 0xc6, 0x21, 0x2d, 0x9f, 0xde, 0x2e, 0x2d,
		0x55, 0x83, 0xa0, 0xea, 0x91, 0x75, 0x49, 0x72, 0x10, 0x1d, 0xae, 0xbb, 0x11, 0xc3, 0x82, 0x06,
		0xbe, 0x02, 0x95, 0x96, 0x3b, 0xd7, 0x05, 0xad, 0x11, 0x2e, 0x70, 0x2d, 0xd4, 0x04, 0x2b, 0x69,
		0x12, 0x38, 0x41, 0xad, 0xd6, 0x60, 0xb1, 0x9a, 0x46, 0x71, 0x44, 0xb9, 0x08, 0x58, 0x3d, 0xd9,
		0x25, 0x8d, 0xe4, 0x24, 0x22, 0x0d, 0x02, 0x33, 0x8d, 0x40, 0x60, 0x7e, 0xec, 0x51, 0x2e, 0xf2,
		0x68, 0xda, 0x75, 0x60, 0xfe, 0xd3, 0x80, 0x65, 0x2b, 0x96, 0x9f, 0x89, 0x67, 0x7a, 0xe5, 0xe1,
		0xc7, 0xc4, 0x89, 0xe2, 0x13, 0x5b, 0xe4, 0x24, 0x22, 0x5c, 0xa0, 0x39, 0x18, 0x72, 0x83, 0x1a,
		0xa6, 0x7e, 0xd1, 0x58, 0x31, 0xd6, 0x46, 0x2d, 0x3d, 0x42, 0x3f, 0x03, 0x94, 0x70, 0xb3, 0x49,
		0x02, 0x2a, 0xf6, 0xad, 0x18, 0x6b, 0x85, 0x8d, 0xd7, 0xcb, 0x29, 0xca, 0x2d, 0x9f, 0xdf, 0x62,
		0xea, 0xac, 0x73, 0x0a, 0x95, 0x60, 0x84, 0xba, 0xc4, 0x17, 0x54, 0xd4, 0x8b, 0xfd, 0x72, 0xc3,
		0xc6, 0x38, 0x16, 0x85, 0x11, 0xcc, 0x03, 0xbf, 0x38, 0xa0, 0x44, 0x51, 0x23, 0xf3, 0xef, 0x06,
		0xac, 0x3c, 0xa0, 0xb8, 0xea, 0x07, 0x9c, 0x7c, 0x07, 0xce, 0x61, 0x7e, 0x61, 0xc0, 0x6a, 0x8e,
		0xbc, 0x3c, 0x0c, 0x7c, 0x4e, 0x32, 0x05, 0x7e, 0x0e, 0x8b, 0xae, 0x02, 0x0b, 0xea, 0xd8, 0x2f,
		0x2c, 0xfb, 0x42, 0x93, 0xd9, 0xb9, 0x45, 0xf3, 0x2f, 0xa3, 0xb0, 0xb8, 0x77, 0x29, 0xf7, 0x58,
		0x86, 0x42, 0x43, 0x34, 0xea, 0x4a, 0x99, 0x46, 0x2d, 0x48, 0xa6, 0x76, 0x5c, 0xb4, 0x0d, 0xe3,
		0x0d, 0x02, 0x51, 0x0f, 0x89, 0xd4, 0x52, 0x61, 0x63, 0x35, 0x57, 0xec, 0xfd, 0x7a, 0x48, 0xac,
		0xb1, 0xb3, 0x96, 0x11, 0xba, 0x07, 0xa3, 0xb1, 0xe7, 0xdb, 0xb1, 0xeb, 0x4b, 0xbf, 0x28, 0x6c,
		0x2c, 0xa6, 0xf2, 0xd8, 0xc7, 0xfc, 0xf8, 0x31, 0xe5, 0xc2, 0x1a, 0x11, 0xfa, 0x17, 0xda, 0x80,
		0x41, 0xea, 0x87, 0x91, 0x28, 0x0e, 0x4a, 0xdc, 0xb5, 0x54, 0xdc, 0x2e, 0xae, 0x7b, 0x01, 0x76,
		0x2d, 0x45, 0x8a, 0x30, 0xac, 0x34, 0x54, 0x6d, 0xcb, 0xd0, 0xb1, 0x45, 0x60, 0x3b, 0x5e, 0xc0,
		0x89, 0x1d, 0x67, 0x83, 0x20, 0x12, 0xc5, 0x21, 0xc9, 0xee, 0x6a, 0x59, 0x65, 0x8b, 0x72, 0x92,
		0x2d, 0xca, 0x0f, 0x74, 0x36, 0xb1, 0xae, 0x35, 0x58, 0x48, 0xed, 0xee, 0x07, 0x95, 0x18, 0xbf,
		0xaf, 0xe0, 0xe8, 0x19, 0x2c, 0xc8, 0x23, 0x65, 0x70, 0x1f, 0xee, 0xc6, 0x7d, 0x3e, 0x46, 0xa7,
		0x31, 0x6e, 0x75, 0xca, 0x91, 0x8e, 0xe0, 0x5a, 0x04, 0x60, 0xca, 0xa6, 0xb1, 0xbd, 0x46, 0xe5,
		0xea, 0xa8, 0x9e, 0xd9, 0x71, 0x91, 0x03, 0xc5, 0x16, 0x7b, 0xda, 0x8c, 0x44, 0x9c, 0xd8, 0x61,
		0xe0, 0x51, 0xa7, 0x5e, 0x84, 0x15, 0x63, 0x6d, 0x62, 0xe3, 0x66, 0xae, 0xe5, 0x76, 0x5c, 0x2b,
		0x86, 0xec, 0x4a, 0x84, 0x35, 0x7b, 0x96, 0x36, 0x8d, 0x2a, 0x30, 0xc6, 0x88, 0x60, 0xf5, 0x84,
		0x71, 0x41, 0x9e, 0x74, 0x25, 0x95, 0xb1, 0x15, 0x13, 0x6a, 0x76, 0x05, 0xd6, 0x1c, 0xa0, 0xeb,
		0x30, 0xee, 0xb0, 0xd8, 0x36, 0xce, 0x11, 0x71, 0x23, 0x8f, 0x14, 0xc7, 0xe4, 0x59, 0xc6, 0xe2,
		0xc9, 0x3d, 0x3d, 0x87, 0x6e, 0xc1, 0x40, 0x8d, 0xd4, 0x82, 0xe2, 0xb8, 0xd6, 0x65, 0xda, 0x0e,
		0x4f, 0x48, 0x2d, 0xb0, 0x24, 0x19, 0xb2, 0x60, 0x8a, 0x13, 0xcc, 0x9c, 0x23, 0x1b, 0x0b, 0xc1,
		0xe8, 0x41, 0x24, 0x08, 0x2f, 0x4e, 0x48, 0xec, 0x8d, 0x54, 0xec, 0x9e, 0xa4, 0xde, 0x6a, 0x10,
		0x5b, 0x93, 0xbc, 0x63, 0x06, 0x6d, 0xc2, 0xd0, 0x11, 0xc1, 0x2e, 0x61, 0xc5, 0x2b, 0x92, 0xd1,
		0x42, 0x2a, 0xa3, 0x0f, 0x25, 0x89, 0xa5, 0x49, 0xd1, 0x3d, 0x28, 0xb8, 0xc4, 0xc3, 0x75, 0xe5,
		0x1b, 0xc5, 0xc9, 0x6e, 0xae, 0x00, 0x92, 0x5a, 0xfa, 0x02, 0x7a, 0x1f, 0xc6, 0x9e, 0x53, 0x21,
		0x08, 0xd3, 0xe0, 0xa9, 0x6e, 0xe0, 0x82, 0x22, 0x6f, 0xa0, 0x0f, 0x29, 0xe3, 0xc2, 0x66, 0x91,
		0x6f, 0x63, 0x51, 0x44, 0x12, 0x5d, 0x3a, 0x87, 0xde, 0x4f, 0x6e, 0x44, 0x0b, 0x24, 0xbd, 0x15,
		0xf9, 0x5b, 0x02, 0x3d, 0x85, 0x69, 0x69, 0x94, 0xe0, 0x94, 0x30, 0x0f, 0x87, 0x89, 0x81, 0xa7,
		0xa5, 0xe7, 0xa4, 0xa7, 0xaa, 0x0a, 0x0b, 0xfc, 0x9f, 0x28, 0x72, 0x6d, 0xe6, 0x29, 0xa7, 0x73,
		0xca, 0xbc, 0x0b, 0x4b, 0x59, 0xf9, 0x49, 0xa7, 0xd1, 0x59, 0x18, 0x8a, 0x25, 0xa6, 0xae, 0x4e,
		0x50, 0x83, 0x2c, 0xf2, 0x77, 0x5c, 0x93, 0x81, 0x99, 0x0e, 0xdc, 0xe2, 0x75, 0xdf, 0x49, 0xb2,
		0xdb, 0x63, 0x18, 0xd6, 0x21, 0x20, 0xd1, 0x85, 0x8d, 0x8d, 0x74, 0x6b, 0xe7, 0xa5, 0x48, 0x2b,
		0x61, 0x61, 0xde, 0x80, 0xeb, 0xb9, 0x7b, 0x2a, 0x89, 0xcd, 0x77, 0x61, 0x25, 0xfb, 0x52, 0xce,
		0x3f, 0xd5, 0xbf, 0xfa, 0x60, 0x69, 0x8f, 0x56, 0x7d, 0xec, 0x7d, 0x17, 0xee, 0xf3, 0xf6, 0x94,
		0x33, 0xd0, 0x99, 0x72, 0x96, 0xa1, 0xc0, 0xe5, 0x59, 0x6c, 0x1f, 0xd7, 0x88, 0xcc, 0xd1, 0xa3,
		0x16, 0xa8, 0xa9, 0x8f, 0x70, 0x8d, 0xa0, 0x0f, 0x60, 0x4c, 0x13, 0xa8, 0x2c, 0x3e, 0xd4, 0x43,
		0x16, 0xd7, 0x2c, 0x77, 0x64, 0x2e, 0x2f, 0xc2, 0xb0, 0x13, 0xf8, 0x82, 0x05, 0x9e, 0x4c, 0xaa,
		0x63, 0x56, 0x32, 0x34, 0x57, 0x61, 0x39, 0x53, 0x8f, 0xda, 0x4c, 0x5f, 0x1b, 0xf0, 0x3d, 0x4d,
		0x43, 0xc5, 0x51, 0xfe, 0x2d, 0xf9, 0x0c, 0xc6, 0x55, 0x32, 0x7f, 0x71, 0x6f, 0x1a, 0x93, 0x8c,
		0x12, 0xc6, 0x1d, 0x3a, 0xea, 0xeb, 0xaa, 0xa3, 0xfe, 0x17, 0xd0, 0xd1, 0x40, 0xbb, 0x8e, 0xb6,
		0x60, 0xad, 0xfb, 0xf9, 0xf3, 0xfd, 0xf5, 0x73, 0x03, 0xde, 0xec, 0xc6, 0xa3, 0x2d, 0x20, 0x9f,
		0x76, 0x06, 0xe4, 0xfb, 0xe9, 0x2a, 0xec, 0xcd, 0x2e, 0xcd, 0xd0, 0x5c, 0x87, 0x5b, 0x3d, 0xca,
		0xa1, 0xad, 0xff, 0x65, 0x1f, 0x2c, 0x5a, 0x84, 0x93, 0x57, 0xa6, 0x70, 0x6e, 0x16, 0xc7, 0xfd,
		0xad, 0xc5, 0x31, 0xba, 0x0b, 0x45, 0x97, 0x38, 0x94, 0xc7, 0xe5, 0xca, 0x21, 0xf5, 0x29, 0x3f,
		0xb2, 0xc9, 0x29, 0xf1, 0x1b, 0x21, 0xd7, 0x6f, 0xcd, 0x26, 0xeb, 0xdb, 0x72, 0xf9, 0x61, 0xbc,
		0xba, 0xe3, 0x76, 0x44, 0xe7, 0x60, 0x67, 0x74, 0x96, 0x61, 0x9a, 0x1f, 0xd3, 0xd0, 0xd6, 0xde,
		0xc5, 0x08, 0x0e, 0x43, 0xaf, 0x2e, 0x63, 0x70, 0xc4, 0x9a, 0x8a, 0x97, 0x94, 0x42, 0x2d, 0xb5,
		0x10, 0x67, 0xea, 0x2c, 0x7d, 0xe5, 0xfb, 0xc8, 0x9f, 0xfb, 0xe0, 0x86, 0xd6, 0x69, 0x05, 0xfb,
		0x0e, 0xf9, 0x7f, 0x48, 0x6d, 0x33, 0x30, 0xe8, 0xe0, 0x88, 0x27, 0x49, 0x4d, 0x0d, 0xd0, 0x26,
		0xcc, 0xa9, 0x2b, 0xb6, 0x59, 0x60, 0x6a, 0x85, 0x0c, 0x49, 0xb2, 0x69, 0xb9, 0xda, 0x94, 0x49,
		0xaa, 0x67, 0x0d, 0x5e, 0xef, 0xa6, 0x1d, 0xed, 0xb2, 0xff, 0xe8, 0x83, 0xd5, 0x7d, 0xc2, 0x6a,
		0xd4, 0xc7, 0x82, 0xbc, 0xea, 0x6e, 0x7b, 0x07, 0x86, 0x5d, 0x22, 0x30, 0xf5, 0xb8, 0x2e, 0xea,
		0xf3, 0x53, 0x56, 0x42, 0xdc, 0x66, 0x94, 0xc1, 0x0e, 0xa3, 0x5c, 0x4a, 0xbf, 0xaf, 0x81, 0x99,
		0xa7, 0x34, 0xad, 0xdb, 0xff, 0xc4, 0x4f, 0x50, 0xc2, 0x1d, 0x46, 0x0f, 0x5e, 0x19, 0xd5, 0x1e,
		0xc0, 0xbc, 0x6c, 0x1a, 0xd8, 0x4e, 0xe0, 0x73, 0xca, 0x05, 0xf1, 0x9d, 0xba, 0xed, 0x91, 0x53,
		0xe2, 0x49, 0x5d, 0x67, 0x55, 0xec, 0x3f, 0x8d, 0x31, 0x95, 0x26, 0xe4, 0x71, 0x8c, 0xb0, 0x66,
		0x4f, 0xd2, 0xa6, 0xcd, 0xaf, 0xfb, 0x61, 0x35, 0xe7, 0xdc, 0x3a, 0xb2, 0x3d, 0x98, 0x6f, 0xaa,
		0xdc, 0x09, 0xfc, 0x43, 0x5a, 0xd5, 0x35, 0xa6, 0xce, 0xe2, 0x9b, 0xbd, 0x9d, 0xb2, 0xd2, 0x0a,
		0xb5, 0xe6, 0x48, 0xea, 0x7c, 0x7c, 0xee, 0xf3, 0xea, 0xb4, 0xa9, 0x7f, 0x18, 0x68, 0x9d, 0xde,
		0xec, 0x6d, 0xb7, 0x1d, 0xff, 0x30, 0x68, 0xbe, 0x54, 0xda, 0xa6, 0xd1, 0x33, 0x40, 0x21, 0xf1,
		0x5d, 0xea, 0x57, 0x6d, 0xec, 0x08, 0x7a, 0x4a, 0x05, 0x25, 0xbc, 0xd8, 0xbf, 0xd2, 0xbf, 0x56,
		0xd8, 0x58, 0x4b, 0xf7, 0x54, 0x45, 0xbe, 0xa5, 0xa8, 0xeb, 0x92, 0xf9, 0x54, 0xd8, 0x36, 0x49,
		0x09, 0x47, 0x3f, 0x87, 0xc9, 0x84, 0xb1, 0x73, 0x44, 0x3d, 0x97, 0x11, 0xbf, 0x38, 0x20, 0xd9,
		0x96, 0xf3, 0xd8, 0x56, 0x62, 0xda, 0x76, 0xc9, 0xaf, 0x84, 0x2d, 0x4b, 0x8c, 0xf8, 0x68, 0xaf,
		0xc9, 0x3a, 0xc9, 0xf8, 0xfa, 0xe1, 0x9b, 0x2b, 0xf1, 0x03, 0x4d, 0xdb, 0xc6, 0x34, 0x99, 0x34,
		0x3f, 0xeb, 0x87, 0x19, 0xe9, 0x31, 0x89, 0xfa, 0x5e, 0x92, 0xb3, 0xbf, 0x03, 0x83, 0xd2, 0x43,
		0x75, 0x81, 0x63, 0xe6, 0x72, 0x92, 0x02, 0x5b, 0x0a, 0x80, 0x6c, 0x98, 0x53, 0x61, 0xc2, 0xc8,
		0x73, 0xe2, 0x88, 0xd8, 0x3f, 0x5d, 0x2a, 0x85, 0x1a, 0x90, 0x51, 0xf2, 0xfd, 0xec, 0x28, 0xb1,
		0x24, 0xa2, 0x92, 0x00, 0xac, 0x99, 0x93, 0x94, 0xd9, 0xbc, 0x38, 0x1c, 0xfc, 0xa6, 0xe2, 0xf0,
		0x6f, 0x06, 0xcc, 0x76, 0x98, 0x41, 0xc7, 0xde, 0x07, 0x30, 0x96, 0x1c, 0x8f, 0x47, 0x5e, 0x52,
		0x36, 0x75, 0x29, 0x00, 0xf5, 0x39, 0x62, 0x00, 0xda, 0x81, 0x89, 0x56, 0xfd, 0x10, 0x57, 0x1b,
		0xcb, 0xec, 0xa6, 0x17, 0xe2, 0x5a, 0xe3, 0x27, 0xad, 0x43, 0xf3, 0x2b, 0x03, 0xe6, 0x93, 0x6c,
		0xd1, 0x68, 0xc7, 0x74, 0xf1, 0x97, 0xb6, 0xfe, 0x4e, 0xdf, 0xc5, 0xfa, 0x3b, 0x8f, 0x60, 0xa2,
		0x81, 0x6d, 0x36, 0x99, 0x26, 0x32, 0x9a, 0x4c, 0x09, 0x03, 0xd5, 0x64, 0x12, 0x2d, 0xa3, 0xb8,
		0x88, 0xa2, 0xbe, 0xe3, 0x45, 0x2e, 0xb1, 0x9b, 0x0c, 0xb9, 0xc0, 0x22, 0x52, 0xd7, 0xd3, 0x88,
		0x35, 0xab, 0xd7, 0x13, 0x26, 0x7b, 0x72, 0xd1, 0xfc, 0xaf, 0x01, 0xc5, 0xf3, 0x27, 0xd6, 0xa6,
		0x79, 0x17, 0x86, 0xc3, 0xc0, 0xf3, 0x08, 0xe3, 0x45, 0x43, 0x86, 0xf8, 0x72, 0xba, 0x55, 0x24,
		0x8d, 0x0c, 0xbf, 0x84, 0x1e, 0x3d, 0x81, 0xc9, 0x73, 0x82, 0x28, 0xe5, 0x5c, 0xcf, 0x3d, 0x9b,
		0x12, 0xcb, 0x9a, 0x10, 0x6d, 0x63, 0xf4, 0x0c, 0x26, 0x43, 0xcc, 0x04, 0x6d, 0x49, 0xd0, 0x3a,
		0x90, 0xde, 0xcc, 0x65, 0xb7, 0x9b, 0x80, 0x54, 0x06, 0xb6, 0xae, 0x84, 0xed, 0x13, 0xe6, 0xdb,
		0xb0, 0xf0, 0x88, 0x88, 0x84, 0x9c, 0xdf, 0xaf, 0x3f, 0x90, 0x56, 0xed, 0x62, 0x74, 0xf3, 0x0f,
		0x03, 0x70, 0x2d, 0x1d, 0xa7, 0x55, 0xf7, 0x4b, 0x98, 0x6b, 0x54, 0xb5, 0x4d, 0x45, 0xd4, 0x70,
		0xa8, 0x35, 0xf9, 0xe3, 0x54, 0xb1, 0xf3, 0x58, 0x96, 0x93, 0x94, 0x96, 0x50, 0x3c, 0xc1, 0xe1,
		0x43, 0x5f, 0xb0, 0xba, 0x35, 0xed, 0x9e, 0x5f, 0x89, 0x05, 0xd0, 0x89, 0xbf, 0xde, 0x21, 0x40,
		0xdf, 0x65, 0x05, 0x48, 0xae, 0x86, 0xf3, 0x02, 0xe0, 0xf3, 0x2b, 0xa5, 0x28, 0x76, 0xac, 0x74,
		0x89, 0xd1, 0x24, 0xf4, 0x1f, 0x93, 0xba, 0xd6, 0x69, 0xfc, 0x13, 0x55, 0x60, 0xf0, 0x14, 0x7b,
		0x11, 0xd1, 0x4e, 0x72, 0x2b, 0x55, 0xba, 0x2c, 0x47, 0xb5, 0x14, 0xf6, 0x5e, 0xdf, 0x3b, 0x46,
		0xbc, 0x6d, 0x96, 0x9c, 0xdf, 0xe2, 0xb6, 0x26, 0x87, 0x45, 0x19, 0x8c, 0x9d, 0x7e, 0xc7, 0xbf,
		0xc5, 0xf4, 0x61, 0x7e, 0xde, 0x07, 0x4b, 0x59, 0xbb, 0x6a, 0x3f, 0x3c, 0x81, 0xc5, 0x14, 0x37,
		0x68, 0x44, 0x41, 0x12, 0xd8, 0xe5, 0xde, 0xa2, 0xe8, 0x09, 0x11, 0xd8, 0xc5, 0x02, 0x5b, 0xa5,
		0x4e, 0x8b, 0x37, 0xb7, 0x8e, 0xb7, 0x4c, 0x71, 0xfd, 0x96, 0x2d, 0xfb, 0x2e, 0xb7, 0x65, 0xa7,
		0x97, 0x37, 0xb7, 0x34, 0xe7, 0x61, 0xf6, 0x11, 0x11, 0x15, 0x2f, 0xe2, 0x42, 0x27, 0x22, 0xfd,
		0x6c, 0xfe, 0xb5, 0x01, 0x73, 0x9d, 0x2b, 0x5a, 0x33, 0x47, 0x70, 0x95, 0x47, 0x61, 0x18, 0x30,
		0x41, 0x5c, 0xdb, 0xf1, 0x68, 0xfc, 0xe4, 0x3c, 0x25, 0x8c, 0x6b, 0xad, 0x64, 0xe7, 0x96, 0xbd,
		0x04, 0x55, 0x91, 0xa0, 0xa7, 0x1a, 0x63, 0xcd, 0xf3, 0xf4, 0x05, 0xf3, 0xab, 0x7e, 0x30, 0x1f,
		0xa5, 0x3c, 0x2c, 0x3f, 0x54, 0x7f, 0xaa, 0xbd, 0xa4, 0x82, 0x64, 0x01, 0x46, 0x43, 0x5c, 0x25,
		0x36, 0xa7, 0x9f, 0xa8, 0x6b, 0x67, 0xd0, 0x1a, 0x89, 0x27, 0xf6, 0xe8, 0x27, 0x04, 0xbd, 0x0e,
		0x57, 0x7c, 0xf2, 0x71, 0x6c, 0xb5, 0x2a, 0xb1, 0x45, 0x70, 0x4c, 0x7c, 0xdd, 0x5c, 0x19, 0x8f,
		0xa7, 0x77, 0x71, 0x95, 0xec, 0xc7, 0x93, 0xe8, 0x0d, 0x40, 0x67, 0x98, 0x0a, 0xfb, 0x30, 0x60,
		0xb6, 0x4f, 0xce, 0xd4, 0xcb, 0x5d, 0x56, 0x0d, 0x23, 0xd6, 0x95, 0x78, 0x65, 0x3b, 0x60, 0x1f,
		0x91, 0x33, 0xf9, 0x64, 0x47, 0x36, 0x5c, 0xd5, 0xff, 0x23, 0xea, 0x17, 0xfe, 0x21, 0xf5, 0x04,
		0x61, 0xea, 0xe2, 0x1b, 0x92, 0x17, 0xdf, 0x6b, 0xa9, 0xe7, 0x91, 0xf0, 0x6d, 0x49, 0x2c, 0xef,
		0xbe, 0x39, 0xcd, 0xa6, 0x63, 0x1e, 0x5d, 0x87, 0x71, 0xf9, 0xe4, 0xc7, 0xcc, 0x39, 0xa2, 0xa7,
		0x58, 0x35, 0xcd, 0x46, 0xac, 0xb1, 0x78, 0x72, 0x4b, 0xcf, 0xe5, 0x55, 0x3b, 0x23, 0xdf, 0x54,
		0xb5, 0xf3, 0x6f, 0x03, 0xae, 0xe7, 0x5a, 0x5c, 0xfb, 0xe0, 0x1d, 0x18, 0xd6, 0x47, 0xc9, 0x2d,
		0x7b, 0x12, 0x58, 0x42, 0x8c, 0x7e, 0x04, 0x05, 0x86, 0xcf, 0xec, 0x04, 0xab, 0x02, 0x2a, 0x3d,
		0x6d, 0x3c, 0xc0, 0x02, 0xdf, 0xf7, 0x82, 0x03, 0x0b, 0x18, 0x3e, 0xd3, 0x8c, 0xd2, 0xcc, 0xdb,
		0x9f, 0x66, 0xde, 0x12, 0x8c, 0x28, 0x5d, 0x12, 0x57, 0x97, 0x11, 0x8d, 0xb1, 0x59, 0x87, 0xb1,
		0x6d, 0x82, 0x45, 0xc4, 0xc8, 0xb6, 0x87, 0xab, 0x1c, 0x51, 0xd8, 0x48, 0x79, 0xd5, 0x60, 0x8f,
		0x11, 0xec, 0xc6, 0xca, 0xae, 0x85, 0x1e, 0x89, 0x43, 0x8d, 0x30, 0x16, 0x30, 0x9b, 0xf8, 0xf8,
		0xc0, 0x23, 0xaa, 0x93, 0x32, 0x62, 0xdd, 0x3a, 0xe7, 0x9e, 0x5b, 0x0a, 0x57, 0x49, 0x60, 0x0f,
		0x63, 0xd4, 0x43, 0x05, 0x32, 0x7f, 0x67, 0xc0, 0x82, 0x45, 0x0e, 0x19, 0xe1, 0x47, 0x8d, 0x3f,
		0xde, 0x30, 0x3f, 0xe6, 0x2f, 0x27, 0x92, 0xcc, 0x25, 0xb8, 0x96, 0x2e, 0x8d, 0xb2, 0xf2, 0xc6,
		0x17, 0xd3, 0x50, 0x48, 0x56, 0xb6, 0x76, 0x77, 0xd0, 0x6f, 0x0c, 0x28, 0x66, 0x35, 0xd0, 0xd1,
		0x5b, 0x19, 0x7f, 0x26, 0xe5, 0xfe, 0x09, 0x5e, 0x7a, 0xfb, 0x82, 0x28, 0xed, 0x7f, 0xbf, 0x32,
		0x60, 0x2e, 0xbd, 0x99, 0x88, 0x2e, 0xd1, 0xfa, 0x2d, 0x6d, 0x5e, 0x08, 0xa3, 0x65, 0xf8, 0xa3,
		0x01, 0x0b, 0x39, 0x0d, 0x4d, 0x74, 0xf7, 0x02, 0x4c, 0x5b, 0x5b, 0xb1, 0xa5, 0x77, 0x2e, 0x0e,
		0xd4, 0x22, 0x7d, 0x66, 0xc0, 0x7c, 0x46, 0x77, 0x1d, 0x6d, 0xe6, 0xf5, 0x73, 0xb3, 0x14, 0xf3,
		0xd6, 0xc5, 0x40, 0x5a, 0x8c, 0xbf, 0x1a, 0xb0, 0xd2, 0xad, 0xe9, 0x8b, 0x5e, 0xa8, 0xbf, 0x5c,
		0xfa, 0xe1, 0x25, 0xd1, 0x5a, 0xc2, 0x2f, 0x0d, 0xb8, 0xd1, 0x53, 0x5b, 0x1a, 0x6d, 0x5d, 0x6a,
		0xa3, 0x36, 0x7b, 0xde, 0x7f, 0x11, 0x16, 0x2d, 0x0e, 0x9f, 0xde, 0xe5, 0xcd, 0x70, 0xf8, 0xdc,
		0x16, 0x7a, 0x86, 0xc3, 0x77, 0x69, 0x23, 0xff, 0xc9, 0x80, 0xa5, 0xfc, 0x8e, 0x28, 0xba, 0x97,
		0xc1, 0xb7, 0x87, 0x26, 0x73, 0xe9, 0xbd, 0x4b, 0x61, 0xb5, 0x6c, 0xbf, 0x37, 0xa0, 0x94, 0xdd,
		0x4d, 0x44, 0x77, 0xd2, 0x6b, 0xb6, 0x6e, 0x3d, 0xdb, 0xd2, 0xdd, 0x0b, 0xe3, 0xb4, 0x3c, 0xbf,
		0x35, 0xe0, 0x6a, 0x66, 0xfb, 0x0e, 0xbd, 0x9d, 0x5b, 0xae, 0x67, 0x4a, 0x73, 0xe7, 0xa2, 0x30,
		0x2d, 0xcc, 0x21, 0x8c, 0xb7, 0xb5, 0x30, 0x50, 0x4e, 0xe7, 0xa5, 0xa3, 0xdb, 0x54, 0xba, 0xd9,
		0x0b, 0xa9, 0xde, 0x27, 0x80, 0xc9, 0xce, 0x27, 0x07, 0x7a, 0xb3, 0xc7, 0x97, 0x89, 0xda, 0xed,
		0x62, 0xef, 0x18, 0xf4, 0x29, 0xcc, 0xa4, 0x3d, 0xfc, 0xd0, 0x0f, 0x2e, 0xf0, 0x46, 0x54, 0x1b,
		0xdf, 0xbe, 0xf0, 0xab, 0x52, 0x86, 0x64, 0xfa, 0x23, 0x26, 0x23, 0x24, 0x73, 0xdf, 0x59, 0x19,
		0x21, 0xd9, 0xe5, 0x95, 0x44, 0x61, 0xa2, 0xfd, 0x95, 0x80, 0x6e, 0x66, 0x1d, 0xe4, 0xfc, 0x23,
		0xa3, 0xf4, 0x46, 0x4f, 0xb4, 0x2d, 0xd7, 0x5d, 0x4e, 0x69, 0x98, 0x71, 0xdd, 0x75, 0x7f, 0x3e,
		0x64, 0x5c, 0x77, 0xbd, 0x54, 0xa1, 0x9f, 0xc2, 0x4c, 0x5a, 0xfd, 0x92, 0x61, 0xfe, 0x9c, 0xc2,
		0x2b, 0xc3, 0xfc, 0x79, 0xc5, 0x91, 0x8a, 0xf0, 0xac, 0x6f, 0xcd, 0xb2, 0x22, 0xbc, 0xcb, 0xb7,
		0x74, 0x59, 0x11, 0xde, 0xed, 0x93, 0xb6, 0xfb, 0x2e, 0xcc, 0x3b, 0x41, 0x2d, 0x0d, 0x7c, 0x7f,
		0x26, 0x41, 0xed, 0xa9, 0xcf, 0x35, 0x77, 0x59, 0x20, 0x82, 0x5d, 0xe3, 0x17, 0xb7, 0xab, 0x54,
		0x1c, 0x45, 0x07, 0x65, 0x27, 0xa8, 0xad, 0xb7, 0x7e, 0xd1, 0x78, 0x8b, 0xba, 0xde, 0x7a, 0x35,
		0x50, 0x5f, 0x62, 0xea, 0xcf, 0x1b, 0xdf, 0xc3, 0x21, 0x3d, 0xbd, 0x7d, 0x30, 0x24, 0xe7, 0x36,
		0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xb8, 0x98, 0x42, 0x0e, 0x2a, 0x00, 0x00,
	},
	// google/protobuf/duration.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0x29, 0x2d, 0x4a,
		0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0x56,
		0x5c, 0x1c, 0x2e, 0x50, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa9, 0xc9, 0xf9, 0x79, 0x29, 0xc5,
		0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30, 0xae, 0x90, 0x08, 0x17, 0x6b, 0x5e, 0x62, 0x5e,
		0x7e, 0xb1, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xe3, 0xd4, 0xcc, 0xc8, 0x25, 0x9c,
		0x9c, 0x9f, 0xab, 0x87, 0x66, 0xa6, 0x13, 0x2f, 0xcc, 0xc4, 0x00, 0x90, 0x48, 0x00, 0x63, 0x94,
		0x21, 0x54, 0x45, 0x7a, 0x7e, 0x4e, 0x62, 0x5e, 0xba, 0x5e, 0x7e, 0x51, 0x3a, 0xc2, 0x81, 0x25,
		0x95, 0x05, 0xa9, 0xc5, 0xfa, 0xd9, 0x79, 0xf9, 0xe5, 0x79, 0x70, 0xc7, 0x16, 0x24, 0xfd, 0x60,
		0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce, 0x1d, 0xa2, 0x39, 0x00, 0xaa,
		0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4, 0x35, 0x89, 0x0d, 0x6c, 0x94,
		0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xef, 0x8a, 0xb4, 0xc3, 0xfb, 0x00, 0x00, 0x00,
	},
	// google/protobuf/timestamp.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc9, 0xcc, 0x4d,
		0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0xd0, 0x03, 0x0b, 0x09, 0xf1, 0x43, 0x14, 0xe8, 0xc1, 0x14, 0x28,
		0x59, 0x73, 0x71, 0x86, 0xc0, 0xd4, 0x08, 0x49, 0x70, 0xb1, 0x17, 0xa7, 0x26, 0xe7, 0xe7, 0xa5,
		0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xc1, 0xb8, 0x42, 0x22, 0x5c, 0xac, 0x79, 0x89,
		0x79, 0xf9, 0xc5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x10, 0x8e, 0x53, 0x2b, 0x23, 0x97,
		0x70, 0x72, 0x7e, 0xae, 0x1e, 0x9a, 0xa1, 0x4e, 0x7c, 0x70, 0x23, 0x03, 0x40, 0x42, 0x01, 0x8c,
		0x51, 0x46, 0x50, 0x25, 0xe9, 0xf9, 0x39, 0x89, 0x79, 0xe9, 0x7a, 0xf9, 0x45, 0xe9, 0x48, 0x6e,
		0xac, 0x2c, 0x48, 0x2d, 0xd6, 0xcf, 0xce, 0xcb, 0x2f, 0xcf, 0x43, 0xb8, 0xb7, 0x20, 0xe9, 0x07,
		0x23, 0xe3, 0x22, 0x26, 0x66, 0xf7, 0x00, 0xa7, 0x55, 0x4c, 0x72, 0xee, 0x10, 0xdd, 0x01, 0x50,
		0x2d, 0x7a, 0xe1, 0xa9, 0x39, 0x39, 0xde, 0x20, 0x0d, 0x21, 0x20, 0xbd, 0x49, 0x6c, 0x60, 0xb3,
		0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x65, 0xce, 0x7d, 0xff, 0x00, 0x00, 0x00,
	},
	// uber/cadence/api/v1/common.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x51, 0x73, 0xdb, 0xc4,
		0x13, 0xff, 0x2b, 0x8e, 0x9d, 0x64, 0xed, 0x26, 0xfe, 0x5f, 0x48, 0xe2, 0xa4, 0x04, 0x52, 0xcd,
		0x30, 0x0d, 0x1d, 0x90, 0x27, 0xee, 0x4b, 0x87, 0x4e, 0x01, 0x27, 0x76, 0x12, 0xb5, 0xc1, 0x36,
		0xb2, 0x69, 0xa6, 0x30, 0x83, 0xe6, 0x2c, 0x9d, 0xdc, 0xc3, 0xd2, 0x9d, 0x38, 0x9d, 0x9c, 0xf8,
		0x85, 0xe1, 0x93, 0xf0, 0xc0, 0xd7, 0xe1, 0x91, 0x2f, 0xc4, 0x48, 0x3a, 0xc5, 0x76, 0x71, 0xa6,
		0x3c, 0x30, 0xbc, 0xdd, 0xed, 0xef, 0xb7, 0xbb, 0xbf, 0x3b, 0xed, 0xae, 0x0e, 0x8e, 0xe2, 0x21,
		0x11, 0x75, 0x07, 0xbb, 0x84, 0x39, 0xa4, 0x8e, 0x43, 0x5a, 0x9f, 0x9c, 0xd4, 0x1d, 0x1e, 0x04,
		0x9c, 0x19, 0xa1, 0xe0, 0x92, 0xa3, 0xed, 0x84, 0x61, 0x28, 0x86, 0x81, 0x43, 0x6a, 0x4c, 0x4e,
		0x0e, 0x3e, 0x1a, 0x71, 0x3e, 0xf2, 0x49, 0x3d, 0xa5, 0x0c, 0x63, 0xaf, 0xee, 0xc6, 0x02, 0x4b,
		0x9a, 0x3b, 0xe9, 0xaf, 0xe0, 0xff, 0xd7, 0x5c, 0x8c, 0x3d, 0x9f, 0xdf, 0xb4, 0x6f, 0x89, 0x13,
		0x27, 0x10, 0xfa, 0x18, 0xca, 0x37, 0xca, 0x68, 0x53, 0xb7, 0xa6, 0x1d, 0x69, 0xc7, 0x1b, 0x16,
		0xe4, 0x26, 0xd3, 0x45, 0x3b, 0x50, 0x12, 0x31, 0x4b, 0xb0, 0x95, 0x14, 0x2b, 0x8a, 0x98, 0x99,
		0xae, 0xae, 0x43, 0x25, 0x0f, 0x36, 0x98, 0x86, 0x04, 0x21, 0x58, 0x65, 0x38, 0x20, 0x2a, 0x40,
		0xba, 0x4e, 0x38, 0x4d, 0x47, 0xd2, 0x09, 0x95, 0xd3, 0x7b, 0x39, 0x87, 0xb0, 0xd6, 0xc3, 0x53,
		0x9f, 0x63, 0x37, 0x81, 0x5d, 0x2c, 0x71, 0x0a, 0x57, 0xac, 0x74, 0xad, 0x3f, 0x87, 0xb5, 0x73,
		0x4c, 0xfd, 0x58, 0x10, 0xb4, 0x0b, 0x25, 0x41, 0x70, 0xc4, 0x99, 0xf2, 0x57, 0x3b, 0x54, 0x83,
		0x35, 0x97, 0x48, 0x4c, 0xfd, 0x28, 0x55, 0x58, 0xb1, 0xf2, 0xad, 0xfe, 0x9b, 0x06, 0xab, 0xdf,
		0x90, 0x80, 0xa3, 0x17, 0x50, 0xf2, 0x28, 0xf1, 0xdd, 0xa8, 0xa6, 0x1d, 0x15, 0x8e, 0xcb, 0x8d,
		0x4f, 0x8c, 0x25, 0xf7, 0x67, 0x24, 0x54, 0xe3, 0x3c, 0xe5, 0xb5, 0x99, 0x14, 0x53, 0x4b, 0x39,
		0x1d, 0x5c, 0x43, 0x79, 0xce, 0x8c, 0xaa, 0x50, 0x18, 0x93, 0xa9, 0x52, 0x91, 0x2c, 0x51, 0x03,
		0x8a, 0x13, 0xec, 0xc7, 0x24, 0x15, 0x50, 0x6e, 0x7c, 0xb8, 0x34, 0xbc, 0x3a, 0xa6, 0x95, 0x51,
		0xbf, 0x58, 0x79, 0xa6, 0xe9, 0xbf, 0x6b, 0x50, 0xba, 0x24, 0xd8, 0x25, 0x02, 0x7d, 0xf5, 0x8e,
		0xc4, 0xc7, 0x4b, 0x63, 0x64, 0xe4, 0xff, 0x56, 0xe4, 0x9f, 0x1a, 0x54, 0xfb, 0x04, 0x0b, 0xe7,
		0x6d, 0x53, 0x4a, 0x41, 0x87, 0xb1, 0x24, 0x11, 0xb2, 0x61, 0x93, 0x32, 0x97, 0xdc, 0x12, 0xd7,
		0x5e, 0x90, 0xfd, 0x6c, 0x69, 0xd4, 0x77, 0xdd, 0x0d, 0x33, 0xf3, 0x9d, 0x3f, 0xc7, 0x03, 0x3a,
		0x6f, 0x3b, 0xf8, 0x11, 0xd0, 0xdf, 0x49, 0xff, 0xe2, 0xa9, 0x3c, 0x58, 0x6f, 0x61, 0x89, 0x4f,
		0x7d, 0x3e, 0x44, 0xe7, 0xf0, 0x80, 0x30, 0x87, 0xbb, 0x94, 0x8d, 0x6c, 0x39, 0x0d, 0xb3, 0x02,
		0xdd, 0x6c, 0x3c, 0x5a, 0x1a, 0xab, 0xad, 0x98, 0x49, 0x45, 0x5b, 0x15, 0x32, 0xb7, 0xbb, 0x2b,
		0xe0, 0x95, 0xb9, 0x02, 0xee, 0x65, 0x4d, 0x47, 0xc4, 0x6b, 0x22, 0x22, 0xca, 0x99, 0xc9, 0x3c,
		0x9e, 0x10, 0x69, 0x10, 0xfa, 0x79, 0x23, 0x24, 0x6b, 0xf4, 0x18, 0xb6, 0x3c, 0x82, 0x65, 0x2c,
		0x88, 0x3d, 0xc9, 0xa8, 0xaa, 0xe1, 0x36, 0x95, 0x59, 0x05, 0xd0, 0x5f, 0xc1, 0x5e, 0x3f, 0x0e,
		0x43, 0x2e, 0x24, 0x71, 0xcf, 0x7c, 0x4a, 0x98, 0x54, 0x48, 0x94, 0xf4, 0xea, 0x88, 0xdb, 0x91,
		0x3b, 0x56, 0x91, 0x8b, 0x23, 0xde, 0x77, 0xc7, 0x68, 0x1f, 0xd6, 0x7f, 0xc2, 0x13, 0x9c, 0x02,
		0x59, 0xcc, 0xb5, 0x64, 0xdf, 0x77, 0xc7, 0xfa, 0xaf, 0x05, 0x28, 0x5b, 0x44, 0x8a, 0x69, 0x8f,
		0xfb, 0xd4, 0x99, 0xa2, 0x16, 0x54, 0x29, 0xa3, 0x92, 0x62, 0xdf, 0xa6, 0x4c, 0x12, 0x31, 0xc1,
		0x99, 0xca, 0x72, 0x63, 0xdf, 0xc8, 0xc6, 0x8b, 0x91, 0x8f, 0x17, 0xa3, 0xa5, 0xc6, 0x8b, 0xb5,
		0xa5, 0x5c, 0x4c, 0xe5, 0x81, 0xea, 0xb0, 0x3d, 0xc4, 0xce, 0x98, 0x7b, 0x9e, 0xed, 0x70, 0xe2,
		0x79, 0xd4, 0x49, 0x64, 0xa6, 0xb9, 0x35, 0x0b, 0x29, 0xe8, 0x6c, 0x86, 0x24, 0x69, 0x03, 0x7c,
		0x4b, 0x83, 0x38, 0x98, 0xa5, 0x2d, 0xbc, 0x37, 0xad, 0x72, 0xb9, 0x4b, 0xfb, 0xe9, 0x2c, 0x0a,
		0x96, 0x92, 0x04, 0xa1, 0x8c, 0x6a, 0xab, 0x47, 0xda, 0x71, 0xf1, 0x8e, 0xda, 0x54, 0x66, 0xf4,
		0x02, 0x1e, 0x32, 0xce, 0x6c, 0x91, 0x1c, 0x1d, 0x0f, 0x7d, 0x62, 0x13, 0x21, 0xb8, 0xb0, 0xb3,
		0x91, 0x12, 0xd5, 0x8a, 0x47, 0x85, 0xe3, 0x0d, 0xab, 0xc6, 0x38, 0xb3, 0x72, 0x46, 0x3b, 0x21,
		0x58, 0x19, 0x8e, 0x5e, 0xc2, 0x36, 0xb9, 0x0d, 0x69, 0x26, 0x64, 0x26, 0xb9, 0xf4, 0x3e, 0xc9,
		0x68, 0xe6, 0x95, 0xab, 0xd6, 0x03, 0xd8, 0x33, 0x23, 0xee, 0xa7, 0xc6, 0x0b, 0xc1, 0xe3, 0xb0,
		0x87, 0x85, 0xa4, 0xe9, 0x70, 0x5e, 0x32, 0x30, 0xd1, 0x97, 0x50, 0x8c, 0x24, 0x96, 0x59, 0xc1,
		0x6f, 0x36, 0x8e, 0x97, 0x16, 0xe9, 0x62, 0xc0, 0x7e, 0xc2, 0xb7, 0x32, 0x37, 0x7d, 0x02, 0x0f,
		0x17, 0xd1, 0x33, 0xce, 0x3c, 0x3a, 0x52, 0x0a, 0xd1, 0x35, 0x54, 0x69, 0x0e, 0xdb, 0xa3, 0x04,
		0xcf, 0x5b, 0xfb, 0xb3, 0x7f, 0x90, 0xe9, 0x4e, 0xba, 0xb5, 0x45, 0x17, 0x80, 0x48, 0xff, 0x43,
		0x83, 0x83, 0x66, 0x34, 0x65, 0x4e, 0xfe, 0xdb, 0x58, 0xcc, 0x5b, 0x83, 0x35, 0xc2, 0x92, 0x7b,
		0xce, 0xfe, 0x41, 0xeb, 0x56, 0xbe, 0x45, 0x0d, 0xd8, 0x09, 0x05, 0x71, 0x89, 0x47, 0x19, 0x71,
		0xed, 0x9f, 0x63, 0x12, 0x13, 0x3b, 0xbd, 0x95, 0xac, 0x94, 0xb7, 0x67, 0xe0, 0xb7, 0x09, 0xd6,
		0x49, 0x2e, 0xe9, 0x10, 0x20, 0x23, 0xa6, 0xed, 0x5c, 0x48, 0x89, 0x1b, 0xa9, 0x25, 0x6d, 0xd4,
		0xaf, 0xa1, 0x92, 0xc1, 0x4e, 0xaa, 0x21, 0x2d, 0x92, 0x72, 0xe3, 0x70, 0xe9, 0x01, 0xf3, 0x29,
		0x61, 0x95, 0x53, 0x97, 0x4c, 0xf5, 0x93, 0x1b, 0xa8, 0xcc, 0x0f, 0x02, 0xb4, 0x0f, 0x3b, 0xed,
		0xce, 0x59, 0xb7, 0x65, 0x76, 0x2e, 0xec, 0xc1, 0x9b, 0x5e, 0xdb, 0x36, 0x3b, 0xaf, 0x9b, 0x57,
		0x66, 0xab, 0xfa, 0x3f, 0x74, 0x00, 0xbb, 0x8b, 0xd0, 0xe0, 0xd2, 0x32, 0xcf, 0x07, 0xd6, 0x75,
		0x55, 0x43, 0xbb, 0x80, 0x16, 0xb1, 0x97, 0xfd, 0x6e, 0xa7, 0xba, 0x82, 0x6a, 0xf0, 0xc1, 0xa2,
		0xbd, 0x67, 0x75, 0x07, 0xdd, 0xa7, 0xd5, 0xc2, 0x93, 0x5f, 0x60, 0x7b, 0xc9, 0xc7, 0x45, 0x8f,
		0xe0, 0xd0, 0xec, 0x77, 0xaf, 0x9a, 0x03, 0xb3, 0xdb, 0xb1, 0x2f, 0xac, 0xee, 0x77, 0x3d, 0xbb,
		0x3f, 0x68, 0x0e, 0xe6, 0x75, 0xdc, 0x4b, 0xb9, 0x6c, 0x37, 0xaf, 0x06, 0x97, 0x6f, 0xaa, 0xda,
		0xfd, 0x94, 0x96, 0xd5, 0x34, 0x3b, 0xed, 0x56, 0x75, 0xe5, 0xf4, 0x07, 0xd8, 0x73, 0x78, 0xb0,
		0xec, 0xa6, 0x4e, 0xcb, 0x67, 0xe9, 0x13, 0xa5, 0x97, 0x54, 0x7d, 0x4f, 0xfb, 0xfe, 0x64, 0x44,
		0xe5, 0xdb, 0x78, 0x68, 0x38, 0x3c, 0xa8, 0xcf, 0x3f, 0x68, 0x3e, 0xa7, 0xae, 0x5f, 0x1f, 0xf1,
		0xec, 0x99, 0xa2, 0x5e, 0x37, 0xcf, 0x71, 0x48, 0x27, 0x27, 0xc3, 0x52, 0x6a, 0x7b, 0xfa, 0x57,
		0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0xd9, 0xb2, 0xe0, 0x01, 0x09, 0x00, 0x00,
	},
	// uber/cadence/api/v1/history.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x5d, 0x6c, 0x1c, 0x57,
		0xf5, 0xef, 0xec, 0xda, 0x6b, 0xef, 0x59, 0xc7, 0xb1, 0xaf, 0x1d, 0xc7, 0x76, 0xbe, 0x9c, 0x4d,
		0x9a, 0xb8, 0x8e, 0xb3, 0x4e, 0x9c, 0x34, 0x69, 0x92, 0x7e, 0xfc, 0x6d, 0xc7, 0x56, 0x57, 0xf2,
		0x3f, 0xc9, 0x7f, 0xe2, 0xa4, 0x7f, 0x50, 0xa5, 0x65, 0xbc, 0x73, 0x1d, 0x0f, 0xde, 0x9d, 0xd9,
		0xce, 0xdc, 0xf5, 0xc6, 0x08, 0x9e, 0x78, 0x40, 0x42, 0x54, 0x50, 0x55, 0x48, 0x54, 0x02, 0x81,
		0x90, 0x40, 0x14, 0x90, 0x8a, 0xa8, 0x10, 0x5f, 0x2f, 0x80, 0x84, 0x8a, 0x04, 0x2a, 0x3c, 0xf1,
		0xc2, 0x2b, 0x02, 0xfa, 0xc6, 0x03, 0xe5, 0x0d, 0x09, 0xcd, 0x9d, 0x3b, 0xbb, 0x3b, 0xb3, 0xf7,
		0xce, 0xdc, 0xd9, 0x75, 0x5a, 0x50, 0xf3, 0xe6, 0xb9, 0x73, 0xce, 0x99, 0xdf, 0xbd, 0xe7, 0xe3,
		0x9e, 0x7b, 0xcf, 0x59, 0xc3, 0xc9, 0xfa, 0x26, 0xb6, 0x17, 0xca, 0x9a, 0x8e, 0xcd, 0x32, 0x5e,
		0xd0, 0x6a, 0xc6, 0xc2, 0xee, 0xc5, 0x85, 0x6d, 0xc3, 0x21, 0x96, 0xbd, 0x57, 0xa8, 0xd9, 0x16,
		0xb1, 0xd0, 0x98, 0x4b, 0x52, 0x60, 0x24, 0x05, 0xad, 0x66, 0x14, 0x76, 0x2f, 0x4e, 0x1f, 0x7f,
		0x60, 0x59, 0x0f, 0x2a, 0x78, 0x81, 0x92, 0x6c, 0xd6, 0xb7, 0x16, 0xf4, 0xba, 0xad, 0x11, 0xc3,
		0x32, 0x3d, 0xa6, 0xe9, 0x13, 0xe1, 0xf7, 0xc4, 0xa8, 0x62, 0x87, 0x68, 0xd5, 0x1a, 0x23, 0x98,
		0xe1, 0x7d, 0xb8, 0x6c, 0x55, 0xab, 0x4d, 0x11, 0x79, 0x1e, 0x05, 0xd1, 0x9c, 0x9d, 0x8a, 0xe1,
		0x90, 0x28, 0x9a, 0x86, 0x65, 0xef, 0x6c, 0x55, 0xac, 0x86, 0x47, 0x93, 0xbf, 0x09, 0x03, 0x2f,
		0x7a, 0x13, 0x42, 0xd7, 0x20, 0x83, 0x77, 0xb1, 0x49, 0x9c, 0x49, 0x65, 0x26, 0x3d, 0x9b, 0x5b,
		0x3c, 0x59, 0xe0, 0xcc, 0xad, 0xc0, 0xa8, 0x57, 0x5d, 0x4a, 0x95, 0x31, 0xe4, 0xdf, 0xbb, 0x0a,
		0x43, 0xed, 0x2f, 0xd0, 0x14, 0x0c, 0xd2, 0x57, 0x25, 0x43, 0x9f, 0x54, 0x66, 0x94, 0xd9, 0xb4,
		0x3a, 0x40, 0x9f, 0x8b, 0x3a, 0xba, 0x06, 0xe0, 0xbd, 0x72, 0x27, 0x3d, 0x99, 0x9a, 0x51, 0x66,
		0x73, 0x8b, 0xd3, 0x05, 0x6f, 0x45, 0x0a, 0xfe, 0x8a, 0x14, 0x36, 0xfc, 0x15, 0x51, 0xb3, 0x94,
		0xda, 0x7d, 0x46, 0x93, 0x30, 0xb0, 0x8b, 0x6d, 0xc7, 0xb0, 0xcc, 0xc9, 0xb4, 0x27, 0x94, 0x3d,
		0xa2, 0xc3, 0x30, 0xe0, 0x4e, 0xde, 0xfd, 0x5c, 0x1f, 0x7d, 0x93, 0x71, 0x1f, 0x8b, 0x3a, 0xfa,
		0xaa, 0x02, 0xe7, 0xfc, 0x29, 0x97, 0xf0, 0x43, 0x5c, 0xae, 0xbb, 0x7a, 0x28, 0x39, 0x44, 0xb3,
		0x09, 0xd6, 0x4b, 0x1e, 0x12, 0x8d, 0x10, 0xdb, 0xd8, 0xac, 0x13, 0xec, 0x4c, 0xf6, 0x53, 0x3c,
		0xcf, 0x72, 0xa7, 0xfe, 0x12, 0x93, 0xb3, 0xea, 0x8b, 0xb9, 0xeb, 0x49, 0xa1, 0x53, 0x5e, 0x6a,
		0xca, 0x78, 0xf1, 0x09, 0xf5, 0x6c, 0x43, 0x8e, 0x14, 0x7d, 0x53, 0x81, 0xf3, 0x1c, 0x78, 0x65,
		0xab, 0x5a, 0xab, 0x60, 0x2e, 0xc0, 0x0c, 0x05, 0xf8, 0xbc, 0x1c, 0xc0, 0x15, 0x5f, 0x4e, 0x27,
		0xc4, 0xa7, 0x1a, 0xb2, 0xc4, 0xe8, 0x0d, 0x05, 0xe6, 0x38, 0x20, 0xb7, 0x34, 0xa3, 0xc2, 0x43,
		0x38, 0x40, 0x11, 0xde, 0x90, 0x43, 0xb8, 0x46, 0x85, 0x74, 0xc2, 0x3b, 0xd3, 0x90, 0xa2, 0x44,
		0xdf, 0xe0, 0x2f, 0xa0, 0x6b, 0x5b, 0x7a, 0xc9, 0xaa, 0x93, 0x4e, 0x78, 0x83, 0x14, 0xde, 0x73,
		0x72, 0xf0, 0x5c, 0xb3, 0xd3, 0x6f, 0xd7, 0x49, 0x27, 0xc0, 0xd9, 0x86, 0x24, 0x2d, 0x7a, 0x5d,
		0x81, 0x59, 0x1d, 0x97, 0x0d, 0x87, 0x02, 0x73, 0xad, 0xd4, 0x29, 0x6f, 0x63, 0xbd, 0xce, 0x5d,
		0xbc, 0x2c, 0x45, 0x77, 0x8d, 0x8b, 0xee, 0x26, 0x13, 0xb2, 0xa1, 0x39, 0x3b, 0x77, 0x7d, 0x11,
		0x9d, 0xc8, 0x4e, 0xeb, 0x12, 0x74, 0xe8, 0x55, 0x05, 0xce, 0x84, 0x50, 0x89, 0x7c, 0x02, 0x28,
		0xa6, 0xab, 0xf1, 0x98, 0x44, 0xee, 0x90, 0xd7, 0x63, 0xa9, 0x38, 0xab, 0x14, 0xe1, 0x04, 0x39,
		0xc9, 0x55, 0x8a, 0xb0, 0xff, 0xc0, 0x2a, 0x09, 0x4d, 0xff, 0xb5, 0x0e, 0x54, 0x11, 0x96, 0x35,
		0x44, 0x51, 0x3d, 0x13, 0x8b, 0x4a, 0x6c, 0x54, 0xa7, 0xf4, 0x78, 0x32, 0xf4, 0x79, 0x05, 0x9e,
		0x0c, 0x62, 0x12, 0x79, 0xe2, 0x01, 0x0a, 0xe8, 0x4a, 0x2c, 0x20, 0x91, 0x13, 0x9e, 0xd4, 0xe3,
		0x88, 0xa8, 0xda, 0xb4, 0x32, 0x31, 0x76, 0x0d, 0xb2, 0x17, 0x6b, 0xdc, 0xc3, 0x11, 0x6a, 0x5b,
		0x62, 0x42, 0xe2, 0x8c, 0x5b, 0x93, 0xa0, 0xa3, 0xc6, 0x1d, 0x42, 0x25, 0x32, 0xee, 0x83, 0x11,
		0xc6, 0x1d, 0xc0, 0x24, 0x34, 0x6e, 0x2d, 0x96, 0x8a, 0xb3, 0x4a, 0x11, 0xc6, 0x3d, 0x22, 0xb9,
		0x4a, 0x51, 0xc6, 0xad, 0x49, 0xd0, 0x51, 0x43, 0x0a, 0xa2, 0x12, 0x19, 0xd2, 0x68, 0x84, 0x21,
		0xb5, 0x43, 0x12, 0x1a, 0x92, 0x16, 0x47, 0x44, 0x3d, 0x2d, 0x08, 0x26, 0xc2, 0xd3, 0x50, 0x84,
		0xa7, 0xb5, 0xe3, 0x89, 0xf0, 0x34, 0x2d, 0x9e, 0x0c, 0x35, 0xe0, 0xb8, 0x0b, 0xc2, 0x16, 0x5b,
		0xcf, 0x18, 0x05, 0x72, 0x81, 0x0b, 0xc4, 0x95, 0x6a, 0x0b, 0xcd, 0xe6, 0x08, 0x11, 0xbf, 0x46,
		0xaf, 0xc0, 0x51, 0xef, 0xc3, 0x5b, 0x86, 0xcd, 0xfb, 0xec, 0x38, 0xfd, 0x6c, 0x41, 0xfc, 0xd9,
		0x35, 0x97, 0xaf, 0xf3, 0xa3, 0x53, 0x44, 0xf4, 0x12, 0x7d, 0x5b, 0x81, 0x85, 0x90, 0x89, 0x6a,
		0x66, 0x19, 0x57, 0x4a, 0x36, 0x7e, 0xa5, 0x8e, 0x1d, 0xee, 0xec, 0x0f, 0x51, 0x18, 0x2f, 0xc4,
		0x5b, 0x2a, 0x95, 0xa4, 0xfa, 0x82, 0x3a, 0x71, 0xcd, 0x69, 0xd2, 0xd4, 0xe8, 0x6d, 0x05, 0x2e,
		0x33, 0x4c, 0x3e, 0x44, 0x39, 0x23, 0x9e, 0xa0, 0x68, 0x57, 0xb8, 0x68, 0xd9, 0xd7, 0xbc, 0x4f,
		0xcb, 0x58, 0x74, 0xc1, 0x4e, 0xc4, 0x81, 0xbe, 0xa4, 0xc0, 0x59, 0xde, 0xf2, 0xf2, 0x80, 0x1e,
		0x96, 0xb4, 0xee, 0x15, 0x26, 0x21, 0xc6, 0xba, 0x05, 0x64, 0xe8, 0x53, 0x70, 0xc2, 0x33, 0x32,
		0x31, 0x92, 0x49, 0x8a, 0xe4, 0xa2, 0xd8, 0xce, 0xc4, 0x10, 0x3c, 0x03, 0x16, 0x7d, 0xfb, 0x73,
		0x0a, 0x9c, 0x66, 0xca, 0x63, 0x86, 0x2e, 0x50, 0xda, 0x14, 0x45, 0xf0, 0x34, 0x17, 0x81, 0x27,
		0xdc, 0xb3, 0x77, 0x81, 0x9a, 0x66, 0xca, 0x31, 0x34, 0xe8, 0x33, 0x30, 0x53, 0xd5, 0xec, 0x1d,
		0x6c, 0x97, 0x6c, 0x5c, 0xb6, 0x6c, 0x9d, 0x07, 0x62, 0x9a, 0x82, 0x58, 0xe4, 0x82, 0xf8, 0x5f,
		0xca, 0xac, 0x32, 0xde, 0x4e, 0x04, 0xc7, 0xaa, 0x51, 0x04, 0xe8, 0xeb, 0x0a, 0xcc, 0xf3, 0xce,
		0x27, 0xc6, 0x03, 0x53, 0xe3, 0x2e, 0xc8, 0x91, 0x24, 0xe9, 0xeb, 0x5d, 0x26, 0x46, 0x26, 0x7d,
		0x15, 0xd0, 0xa2, 0x6f, 0x29, 0x50, 0xe0, 0x65, 0xd8, 0xd8, 0xae, 0x1a, 0xa6, 0xc6, 0x8d, 0x0b,
		0x47, 0x23, 0xe2, 0x42, 0x67, 0x8a, 0xdd, 0x14, 0xc4, 0x89, 0x0b, 0x0d, 0x69, 0x6a, 0xf4, 0x23,
		0x05, 0x2e, 0xf3, 0x8e, 0x52, 0xb1, 0x51, 0xec, 0x18, 0x45, 0x7b, 0x53, 0xf2, 0x44, 0x15, 0x17,
		0xca, 0x16, 0x1a, 0xc9, 0x58, 0x44, 0x16, 0x20, 0x76, 0xca, 0xe3, 0x49, 0x2c, 0x40, 0xec, 0xa0,
		0xb3, 0x0d, 0x49, 0x5a, 0xf4, 0x67, 0x05, 0x56, 0x43, 0x11, 0x17, 0x3f, 0x24, 0xd8, 0x36, 0xb5,
		0x4a, 0x89, 0x83, 0xdc, 0x30, 0x0d, 0x62, 0xf0, 0x0d, 0xe3, 0x04, 0x85, 0x7e, 0x37, 0x3e, 0x04,
		0xaf, 0x32, 0xf9, 0x1d, 0xf3, 0x29, 0xfa, 0xc2, 0x3b, 0x27, 0xf4, 0xbc, 0xdd, 0x93, 0x04, 0xf4,
		0x27, 0x05, 0x96, 0x13, 0x4c, 0x53, 0x14, 0xb1, 0x66, 0xe8, 0x1c, 0xef, 0xf4, 0x30, 0x47, 0x51,
		0x30, 0xbb, 0x61, 0x77, 0xcf, 0x8e, 0xde, 0x55, 0xe0, 0xb9, 0xa8, 0xe9, 0xc4, 0xfb, 0xc9, 0x49,
		0x3a, 0xb1, 0x75, 0xee, 0xc4, 0x84, 0x60, 0x62, 0xfd, 0xe5, 0x2a, 0xee, 0x8e, 0x95, 0xe6, 0x01,
		0xdc, 0xab, 0x13, 0x93, 0x18, 0x66, 0x1d, 0xeb, 0x25, 0xcd, 0x29, 0x99, 0xb8, 0xd1, 0x39, 0x8f,
		0x7c, 0x44, 0x1e, 0xc0, 0xb9, 0x41, 0x61, 0xe2, 0x96, 0x9c, 0x5b, 0xb8, 0xc1, 0xc9, 0x03, 0x1a,
		0x89, 0x38, 0xd0, 0xaf, 0x14, 0xb8, 0x46, 0xb3, 0xc9, 0x52, 0x79, 0xdb, 0xa8, 0xe8, 0x09, 0xfd,
		0xe7, 0x14, 0x85, 0xfe, 0x22, 0x17, 0x3a, 0x4d, 0x25, 0x57, 0x5c, 0xa1, 0x49, 0x9c, 0xe6, 0x92,
		0x93, 0x9c, 0x0d, 0xfd, 0x54, 0x81, 0x2b, 0x31, 0x93, 0x10, 0x79, 0xc7, 0x69, 0x3a, 0x83, 0xd5,
		0xa4, 0x33, 0x10, 0xb9, 0xc4, 0x05, 0x27, 0x21, 0x0f, 0xfa, 0xbe, 0x02, 0x17, 0x85, 0xa8, 0x85,
		0x79, 0xfe, 0x93, 0x14, 0xf6, 0x12, 0x3f, 0x0d, 0xe1, 0x7e, 0x5d, 0x98, 0xf8, 0xcf, 0x97, 0x13,
		0xd0, 0xa3, 0x1f, 0x2a, 0x70, 0x49, 0x08, 0x37, 0xe2, 0x10, 0x79, 0x26, 0xc2, 0xc8, 0xf9, 0x80,
		0x23, 0x8e, 0x93, 0x85, 0x72, 0x22, 0x0e, 0xf4, 0xa6, 0x02, 0x17, 0x12, 0x5b, 0xc6, 0x59, 0x8a,
		0xf8, 0x7f, 0x12, 0x20, 0x16, 0x19, 0xc5, 0xb9, 0x72, 0x02, 0x7b, 0x78, 0x4b, 0x81, 0x45, 0xf1,
		0x02, 0x0b, 0x37, 0xe1, 0x59, 0x8a, 0x76, 0x39, 0xc9, 0xfa, 0x0a, 0x77, 0xe2, 0xf3, 0xe5, 0x24,
		0x0c, 0xe8, 0x07, 0x51, 0x26, 0x11, 0x71, 0x68, 0x7e, 0x2a, 0x31, 0x64, 0xf1, 0xf1, 0x59, 0x00,
		0x59, 0x74, 0x90, 0x76, 0x73, 0x33, 0x31, 0xe4, 0x88, 0x4c, 0x72, 0x2e, 0x22, 0x37, 0x13, 0x60,
		0x8e, 0x48, 0x27, 0x17, 0xca, 0xc9, 0x58, 0xe8, 0xa6, 0xe9, 0xa5, 0xe2, 0xdd, 0x66, 0x3c, 0xe7,
		0x22, 0x36, 0x4d, 0x2f, 0xe3, 0xee, 0x26, 0xd5, 0xb9, 0xea, 0x74, 0xc7, 0x8a, 0x7e, 0xad, 0xc0,
		0x75, 0x89, 0x09, 0x89, 0x7c, 0x74, 0x9e, 0xce, 0xa6, 0xd8, 0xcd, 0x6c, 0x44, 0xce, 0x7a, 0xd9,
		0xe9, 0x82, 0x0f, 0xfd, 0x44, 0x81, 0xa7, 0xa3, 0x26, 0x20, 0x3e, 0x3f, 0x9d, 0x8f, 0xd8, 0x80,
		0x84, 0x20, 0xc4, 0xe7, 0xa8, 0x0b, 0x38, 0x21, 0x0f, 0x0d, 0x38, 0xf5, 0x9a, 0x83, 0x6d, 0xd2,
		0x02, 0xee, 0x60, 0xcd, 0x2e, 0x6f, 0xb7, 0xc1, 0xec, 0xc4, 0x5d, 0x88, 0xf0, 0xde, 0x7b, 0x54,
		0x9c, 0x8f, 0xe0, 0x2e, 0x15, 0xd6, 0xfa, 0x22, 0xc7, 0x7b, 0xeb, 0x49, 0x18, 0x96, 0x87, 0x00,
		0x5a, 0x40, 0xf2, 0x7f, 0x1d, 0x86, 0xb3, 0xb2, 0xbb, 0xd7, 0x1a, 0x1c, 0x68, 0xce, 0x91, 0xec,
		0xd5, 0x30, 0xad, 0x05, 0x8a, 0x2a, 0x8b, 0xbe, 0xd0, 0x8d, 0xbd, 0x1a, 0x56, 0x87, 0x1a, 0x6d,
		0x4f, 0xe8, 0x65, 0x38, 0x54, 0xd3, 0x6c, 0x77, 0x45, 0xda, 0x9d, 0x6e, 0xcb, 0x62, 0xe5, 0xc3,
		0x59, 0xae, 0xbc, 0x3b, 0x94, 0xa3, 0xcd, 0x27, 0xb6, 0x2c, 0x75, 0xac, 0xd6, 0x39, 0x88, 0xae,
		0x43, 0x96, 0xde, 0xc8, 0x54, 0x0c, 0x87, 0xd0, 0xc2, 0x62, 0x6e, 0xf1, 0x18, 0xff, 0xca, 0x43,
		0x73, 0x76, 0xd6, 0x0d, 0x87, 0xa8, 0x83, 0x84, 0xfd, 0x85, 0x16, 0xa1, 0xdf, 0x30, 0x6b, 0x75,
		0x42, 0xcb, 0x8e, 0xb9, 0xc5, 0xa3, 0x02, 0x24, 0x7b, 0x15, 0x4b, 0xd3, 0x55, 0x8f, 0x14, 0x69,
		0x30, 0x13, 0x4a, 0x39, 0x4a, 0xc4, 0x2a, 0x95, 0x2b, 0x96, 0x83, 0x69, 0xfc, 0xb6, 0xea, 0x84,
		0xd5, 0x21, 0xa7, 0x3a, 0xea, 0xa2, 0x37, 0x59, 0x25, 0x59, 0x3d, 0x8a, 0x03, 0x6b, 0xbf, 0x61,
		0xad, 0xb8, 0xfc, 0x1b, 0x1e, 0x3b, 0x7a, 0x09, 0x8e, 0xb4, 0xae, 0xbd, 0x3b, 0xa5, 0x67, 0xe2,
		0xa4, 0x1f, 0x26, 0xfe, 0x65, 0x76, 0x48, 0xf0, 0x0d, 0x98, 0x6e, 0x65, 0xd8, 0xad, 0x59, 0xd8,
		0x75, 0xb3, 0x64, 0xe8, 0xb4, 0xf4, 0x97, 0x55, 0x0f, 0x37, 0x29, 0x9a, 0xeb, 0xac, 0xd6, 0xcd,
		0xa2, 0x8e, 0x8a, 0x90, 0x65, 0xa1, 0xd2, 0xb2, 0x69, 0x1d, 0x6e, 0x78, 0xf1, 0x1c, 0x3f, 0xb4,
		0x33, 0x01, 0x34, 0x85, 0x2e, 0xfa, 0x2c, 0x6a, 0x8b, 0x1b, 0x15, 0x61, 0xb4, 0x85, 0xc3, 0x0d,
		0x57, 0x75, 0x1b, 0xb3, 0xe2, 0x19, 0x5f, 0x07, 0x6b, 0x1e, 0x8d, 0x3a, 0xd2, 0x64, 0x63, 0x23,
		0x48, 0x85, 0x89, 0x8a, 0xe6, 0x9e, 0xf9, 0xbc, 0x74, 0x86, 0x4e, 0x07, 0x3b, 0xf5, 0x0a, 0x61,
		0x85, 0xaf, 0x68, 0x9d, 0x8e, 0xbb, 0xbc, 0x2b, 0x4d, 0x56, 0x95, 0x72, 0xa2, 0x6b, 0x30, 0x65,
		0xd9, 0xc6, 0x03, 0xc3, 0x0b, 0xb4, 0xa1, 0x55, 0xca, 0xd1, 0x55, 0x9a, 0xf0, 0x09, 0x42, 0x8b,
		0x34, 0x0d, 0x83, 0x86, 0x8e, 0x4d, 0x62, 0x90, 0x3d, 0x5a, 0x51, 0xca, 0xaa, 0xcd, 0x67, 0x74,
		0x09, 0x26, 0xb6, 0x0c, 0xdb, 0x21, 0x9d, 0x32, 0x0f, 0x50, 0xca, 0x31, 0xfa, 0x36, 0x24, 0x70,
		0x05, 0x86, 0x6c, 0x4c, 0xec, 0xbd, 0x52, 0xcd, 0xaa, 0x18, 0xe5, 0x3d, 0x56, 0x85, 0x99, 0x11,
		0x1c, 0x50, 0x89, 0xbd, 0x77, 0x87, 0xd2, 0xa9, 0x39, 0xbb, 0xf5, 0x80, 0x26, 0x61, 0x40, 0x23,
		0x04, 0x57, 0x6b, 0x84, 0x56, 0x4c, 0xfa, 0x55, 0xff, 0x11, 0xad, 0xc0, 0x41, 0xfc, 0xb0, 0x66,
		0x78, 0x86, 0xe3, 0x15, 0xf5, 0x47, 0x62, 0x8b, 0xfa, 0xc3, 0x2d, 0x16, 0x5a, 0xd9, 0x3f, 0x05,
		0x07, 0xca, 0xb6, 0xeb, 0x0d, 0xac, 0xa2, 0x43, 0x2b, 0x0e, 0x59, 0x75, 0xc8, 0x1d, 0xf4, 0xab,
		0x3c, 0xe8, 0xff, 0xe1, 0x88, 0x37, 0xfb, 0x60, 0xf5, 0x6b, 0x53, 0x2b, 0xef, 0x58, 0x5b, 0x5b,
		0xac, 0x28, 0x10, 0x61, 0xd4, 0x93, 0x94, 0xbb, 0xbd, 0xf0, 0xb5, 0xec, 0xb1, 0xa2, 0xf3, 0xd0,
		0x57, 0xc5, 0x55, 0x8b, 0x5d, 0xe7, 0x4f, 0xf1, 0x2f, 0xfa, 0x70, 0xd5, 0x52, 0x29, 0x19, 0x52,
		0x61, 0xb4, 0x23, 0x62, 0xb3, 0x3b, 0xf9, 0x27, 0xf9, 0x7b, 0x63, 0x28, 0xc2, 0xaa, 0x23, 0x4e,
		0x68, 0x04, 0xdd, 0x83, 0x89, 0x9a, 0x8d, 0x77, 0x4b, 0x5a, 0x9d, 0x58, 0xae, 0xfd, 0x61, 0x52,
		0xaa, 0x59, 0x86, 0x49, 0xfc, 0x5b, 0x76, 0x91, 0xbe, 0x1c, 0x4c, 0xee, 0x50, 0x3a, 0x75, 0xcc,
		0xe5, 0x5f, 0xaa, 0x13, 0xab, 0x6d, 0x10, 0x5d, 0x82, 0xcc, 0x36, 0xd6, 0x74, 0x6c, 0xb3, 0xeb,
		0xef, 0x23, 0xfc, 0xa6, 0x0e, 0x4a, 0xa2, 0x32, 0x52, 0xb4, 0x0e, 0xe3, 0xde, 0x42, 0xb7, 0x6a,
		0x79, 0x54, 0xaf, 0x87, 0x63, 0xf5, 0x8a, 0x28, 0x5f, 0xb3, 0x2e, 0x47, 0x75, 0xfb, 0x69, 0x18,
		0xa9, 0x69, 0x36, 0x31, 0xfc, 0xe3, 0xf9, 0x96, 0xf1, 0x60, 0x72, 0x92, 0x76, 0x98, 0xfc, 0x5f,
		0x2f, 0x6d, 0x16, 0x6e, 0x7c, 0xf7, 0x84, 0xae, 0x50, 0x99, 0xab, 0x26, 0xb1, 0xf7, 0xd4, 0x83,
		0xb5, 0xe0, 0x28, 0x3a, 0x06, 0xe0, 0x5f, 0xea, 0x18, 0x3a, 0xbd, 0x4e, 0xce, 0xaa, 0x59, 0x36,
		0x52, 0xd4, 0xd1, 0x7d, 0x18, 0xa3, 0x86, 0x67, 0xed, 0x62, 0xbb, 0xa2, 0xd5, 0x7c, 0x1f, 0x99,
		0xa6, 0xc1, 0xe9, 0x0c, 0x3f, 0x38, 0xd9, 0x96, 0x79, 0xdb, 0x23, 0x67, 0x9e, 0x32, 0x5a, 0x0e,
		0x0f, 0x4d, 0x2f, 0xc3, 0x38, 0x0f, 0x1f, 0x1a, 0x81, 0xf4, 0x0e, 0xde, 0xa3, 0xfb, 0x60, 0x56,
		0x75, 0xff, 0x44, 0xe3, 0xd0, 0xbf, 0xab, 0x55, 0xea, 0x5e, 0x2b, 0x4c, 0x56, 0xf5, 0x1e, 0xae,
		0xa7, 0x9e, 0x51, 0xf2, 0x6f, 0x2a, 0xf0, 0x94, 0xfc, 0xa1, 0xeb, 0x32, 0x64, 0x58, 0xd8, 0x52,
		0x24, 0xc2, 0x16, 0xa3, 0x45, 0x6b, 0x30, 0x13, 0x5d, 0x75, 0x37, 0x74, 0x0a, 0x2c, 0xad, 0x1e,
		0x15, 0x17, 0xcc, 0x8b, 0x7a, 0xfe, 0x3b, 0x0a, 0x9c, 0x91, 0xcc, 0xdd, 0xae, 0xc0, 0x80, 0x1f,
		0xb0, 0x15, 0x89, 0x80, 0xed, 0x13, 0xef, 0x1b, 0x54, 0x0b, 0x66, 0xa5, 0x0f, 0x2e, 0x2b, 0x30,
		0xc4, 0xf6, 0xcc, 0x56, 0xfe, 0x32, 0x2c, 0xf0, 0x45, 0xb6, 0x45, 0xd2, 0xf4, 0x25, 0x47, 0x5a,
		0x0f, 0xf9, 0xdf, 0x29, 0x70, 0x5a, 0xa6, 0x77, 0x23, 0x98, 0x88, 0x28, 0xc9, 0x12, 0x91, 0x5b,
		0x30, 0x21, 0xd8, 0xec, 0x53, 0x71, 0x71, 0x71, 0xcc, 0xe1, 0x6c, 0xf4, 0x6d, 0x01, 0x3f, 0x1d,
		0x08, 0xf8, 0xf9, 0x57, 0x15, 0xc8, 0xc7, 0xb7, 0x7d, 0xa0, 0x79, 0x40, 0xe1, 0x56, 0x80, 0x66,
		0x33, 0xd8, 0x88, 0x13, 0x58, 0x82, 0xd0, 0xae, 0x97, 0x0a, 0xed, 0x7a, 0x41, 0x17, 0x4e, 0x87,
		0x5c, 0x38, 0xff, 0xf7, 0xd0, 0xf2, 0x0a, 0x3d, 0x24, 0x19, 0xa2, 0x59, 0x18, 0x09, 0x5e, 0x07,
		0x35, 0xcd, 0x6b, 0xd8, 0x69, 0x9b, 0x71, 0x08, 0x7b, 0x3a, 0x84, 0xfd, 0x2c, 0x1c, 0xdc, 0x34,
		0x4c, 0xcd, 0xde, 0x2b, 0x95, 0xb7, 0x71, 0x79, 0xc7, 0xa9, 0x57, 0x69, 0xa6, 0x98, 0x55, 0x87,
		0xbd, 0xe1, 0x15, 0x36, 0x8a, 0xce, 0xc1, 0x68, 0xf0, 0x12, 0x13, 0x3f, 0xf4, 0xb2, 0xc0, 0x21,
		0x75, 0x04, 0xb7, 0xdf, 0x2d, 0xe2, 0x87, 0x24, 0xff, 0xbd, 0x34, 0x9c, 0x92, 0xe8, 0x28, 0x79,
		0x64, 0x33, 0x0e, 0xbb, 0x45, 0xba, 0x0b, 0xb7, 0x40, 0xc7, 0x21, 0xb7, 0xa9, 0x39, 0xd8, 0xcf,
		0x60, 0xbc, 0x65, 0xc9, 0xba, 0x43, 0x5e, 0xde, 0x72, 0x14, 0xc0, 0xc4, 0x0d, 0xff, 0x75, 0xbf,
		0xb7, 0xb0, 0x26, 0x6e, 0x78, 0x6f, 0xe7, 0x01, 0x6d, 0x59, 0xf6, 0x0e, 0x43, 0xea, 0xb7, 0x05,
		0x66, 0xbc, 0xa9, 0xb9, 0x6f, 0x28, 0xd6, 0xfb, 0xac, 0x3f, 0x70, 0xc2, 0x0d, 0x8e, 0x9a, 0x63,
		0x99, 0x2c, 0x45, 0x65, 0x4f, 0xe8, 0x26, 0xf4, 0x97, 0xb5, 0xba, 0x83, 0x59, 0x36, 0x5a, 0x90,
		0xee, 0xdd, 0x59, 0x71, 0xb9, 0x54, 0x8f, 0x39, 0x64, 0xa0, 0xd9, 0xb0, 0x81, 0xbe, 0x93, 0x86,
		0x93, 0xb1, 0xed, 0x36, 0x8f, 0x4c, 0x57, 0xcb, 0xfe, 0x14, 0x3d, 0x25, 0xcd, 0x4b, 0x76, 0x03,
		0x05, 0x26, 0xd8, 0x16, 0xb2, 0xfb, 0x92, 0x84, 0xec, 0x76, 0xcf, 0xe8, 0x0f, 0x79, 0x46, 0x48,
		0xfd, 0x99, 0x68, 0xf5, 0x0f, 0x48, 0xa9, 0x7f, 0x50, 0xa0, 0x7e, 0x8e, 0x17, 0x66, 0xb9, 0x5e,
		0x18, 0xd4, 0x24, 0x84, 0x35, 0xf9, 0xb5, 0x0c, 0x9c, 0x96, 0x69, 0x54, 0x42, 0x27, 0x20, 0xd7,
		0xac, 0xf6, 0x33, 0x2d, 0x66, 0x55, 0xf0, 0x87, 0x8a, 0xba, 0x7b, 0x32, 0x6e, 0xb5, 0x03, 0xb8,
		0x2e, 0x94, 0x8a, 0x38, 0x19, 0x37, 0x3f, 0x49, 0x4f, 0xc6, 0x5a, 0xdb, 0x93, 0x6b, 0xd8, 0xba,
		0x55, 0xd5, 0x0c, 0x93, 0x45, 0x1e, 0xf6, 0x14, 0xdc, 0x4a, 0xfa, 0xba, 0x3c, 0xd3, 0x66, 0xe4,
		0xcf, 0xb4, 0x1b, 0x30, 0xe5, 0xdb, 0x68, 0xe7, 0x0e, 0x34, 0x10, 0xb7, 0x03, 0x4d, 0xf8, 0xbc,
		0xa1, 0x4d, 0x28, 0x24, 0x95, 0x6d, 0x70, 0x4c, 0xea, 0x60, 0x02, 0xa9, 0xde, 0x51, 0x96, 0x49,
		0x15, 0x6f, 0x95, 0xd9, 0xae, 0xb6, 0xca, 0x35, 0x18, 0xdd, 0xc6, 0x9a, 0x4d, 0x36, 0xb1, 0xd6,
		0x42, 0x07, 0x71, 0xa2, 0x46, 0x9a, 0x3c, 0x2d, 0x39, 0xf1, 0x09, 0x4e, 0x2e, 0x3e, 0xc1, 0xe9,
		0x38, 0xf0, 0x0d, 0x75, 0x73, 0xe0, 0x6b, 0x1d, 0x1c, 0x0e, 0x48, 0x1f, 0x1c, 0xf2, 0x7f, 0x53,
		0x20, 0x1f, 0xdf, 0x34, 0xf7, 0x81, 0xa5, 0x06, 0xed, 0x49, 0x4c, 0x5f, 0xf0, 0xd4, 0xfa, 0x02,
		0x0c, 0xd1, 0x43, 0xbf, 0x1f, 0xd6, 0xfa, 0x25, 0xc2, 0x5a, 0xce, 0xe5, 0x60, 0x0f, 0xf9, 0x3f,
		0x28, 0xc1, 0x50, 0xb0, 0xcf, 0x79, 0x39, 0x7f, 0x89, 0x52, 0x09, 0x76, 0x83, 0x74, 0x6c, 0xae,
		0xd2, 0x17, 0x5c, 0xcc, 0xfc, 0xef, 0x15, 0x38, 0x19, 0xdf, 0xc9, 0xd4, 0x6d, 0xfa, 0xfe, 0x61,
		0xcc, 0xe8, 0xe7, 0x29, 0x38, 0x25, 0xd1, 0x0f, 0xe8, 0xce, 0x49, 0xc7, 0x44, 0x33, 0x2a, 0x8e,
		0x94, 0x92, 0x7c, 0xe2, 0x47, 0x36, 0xa7, 0x70, 0x7e, 0xd5, 0xd7, 0x4d, 0x7e, 0xd5, 0xb3, 0x89,
		0x7f, 0x59, 0x81, 0x39, 0xf9, 0x36, 0x3e, 0x99, 0x3d, 0x6f, 0x7f, 0x0e, 0x70, 0x6f, 0x29, 0x90,
		0xb0, 0x61, 0x2f, 0x1e, 0xdb, 0xb8, 0x9f, 0x25, 0xb1, 0x53, 0xb8, 0x97, 0xf7, 0xc8, 0x20, 0x4e,
		0x4b, 0x20, 0x7e, 0x23, 0x64, 0x87, 0xa2, 0xd2, 0x5e, 0xb7, 0x76, 0xb8, 0x06, 0x33, 0x15, 0x8d,
		0xb4, 0x35, 0xae, 0x84, 0xdb, 0x38, 0x5a, 0x2b, 0xeb, 0xd1, 0xf1, 0x54, 0xe9, 0x65, 0x55, 0x1c,
		0x7b, 0x4e, 0x27, 0xb0, 0xe7, 0xbe, 0x58, 0x1f, 0x0d, 0xe5, 0x81, 0xf9, 0x77, 0x15, 0x38, 0x12,
		0xd1, 0x2a, 0x8b, 0xa6, 0x60, 0xd0, 0x6b, 0x11, 0x6c, 0xea, 0x6d, 0x80, 0x3e, 0x17, 0x75, 0xb4,
		0x0e, 0x87, 0x9a, 0x1b, 0xf9, 0x96, 0x61, 0x27, 0x38, 0xf2, 0x22, 0xb6, 0x8f, 0xaf, 0x19, 0x36,
		0x4e, 0xb2, 0xfd, 0xca, 0x28, 0xfb, 0x13, 0x30, 0x25, 0xec, 0xc1, 0x8d, 0x9a, 0x8d, 0x74, 0x4a,
		0x9f, 0x7f, 0x47, 0x81, 0xa3, 0x51, 0xed, 0x97, 0xfb, 0xf2, 0x95, 0xfd, 0x5a, 0x8f, 0xc8, 0x00,
		0xfd, 0x63, 0x05, 0x66, 0xe2, 0xda, 0x38, 0xa3, 0x66, 0xf3, 0x48, 0xdd, 0x36, 0x12, 0xf9, 0xbf,
		0x06, 0x20, 0x61, 0xb7, 0x10, 0x5a, 0x80, 0x71, 0xda, 0x90, 0x14, 0xbe, 0xbb, 0xf7, 0xe6, 0x34,
		0x6a, 0xe2, 0x46, 0xe8, 0xe6, 0xbe, 0xa3, 0x7c, 0x96, 0xea, 0xae, 0x7c, 0xf6, 0xb8, 0xc0, 0x25,
		0x5f, 0xe0, 0x92, 0xb1, 0x9d, 0x01, 0x09, 0xdb, 0xb9, 0x0d, 0x13, 0xac, 0x30, 0xc1, 0x30, 0x1a,
		0x26, 0xc1, 0xf6, 0xae, 0x56, 0x89, 0x3f, 0xb7, 0x8c, 0x33, 0x46, 0x0a, 0xaf, 0xc8, 0xd8, 0x82,
		0xc5, 0xb3, 0x6c, 0x4f, 0xc5, 0xb3, 0xb6, 0x14, 0x0e, 0x92, 0xa4, 0x70, 0xe2, 0x4a, 0x59, 0xae,
		0xeb, 0x4a, 0x59, 0xeb, 0x9c, 0x31, 0x24, 0x5f, 0xa0, 0xf0, 0xeb, 0x35, 0x07, 0x7a, 0xa8, 0xd7,
		0x0c, 0xf7, 0x54, 0xaf, 0xc9, 0xff, 0x45, 0x81, 0x85, 0xa4, 0x2d, 0x8b, 0xcd, 0x68, 0xa5, 0xb4,
		0x47, 0xab, 0xa8, 0xf3, 0xcd, 0x26, 0x1c, 0x6e, 0xb6, 0x39, 0x84, 0x4a, 0xdf, 0x9e, 0x1f, 0xcf,
		0x45, 0x36, 0x32, 0x04, 0x8b, 0xdf, 0x87, 0x30, 0x6f, 0x38, 0x74, 0x86, 0xea, 0x0b, 0xdf, 0x79,
		0x7c, 0x57, 0xe1, 0xdc, 0x97, 0x8b, 0x36, 0x1e, 0x19, 0xef, 0x51, 0x24, 0xbc, 0xa7, 0x2d, 0x11,
		0x4a, 0x25, 0x48, 0x84, 0xf2, 0xef, 0x2b, 0x70, 0x2c, 0xb2, 0x23, 0xdf, 0xcd, 0x04, 0x59, 0xbf,
		0xbf, 0xa9, 0x55, 0x7d, 0x4d, 0x80, 0x37, 0x74, 0x4b, 0xab, 0xe2, 0x6e, 0x3f, 0xbd, 0x6f, 0x9b,
		0x4e, 0xcb, 0x21, 0xfa, 0xe4, 0x0f, 0xde, 0x3f, 0xe3, 0x29, 0x49, 0xd4, 0x81, 0x72, 0x02, 0x72,
		0xac, 0x07, 0xa8, 0x7d, 0x09, 0xbc, 0x21, 0xba, 0x04, 0xcd, 0x98, 0x9f, 0x92, 0x8f, 0xf9, 0x51,
		0x97, 0xe0, 0x31, 0x16, 0xf6, 0x15, 0x05, 0xe6, 0x12, 0x34, 0x65, 0xb5, 0xee, 0x72, 0x95, 0xc0,
		0x5d, 0x6e, 0xb7, 0x8a, 0x8b, 0x40, 0x9e, 0xff, 0x65, 0x0a, 0x9e, 0xef, 0xad, 0x31, 0x7d, 0xdf,
		0x5c, 0xa2, 0x75, 0xd3, 0x97, 0x0a, 0xdc, 0xf4, 0xdd, 0x03, 0xd4, 0xd9, 0x00, 0xc5, 0xa2, 0xc3,
		0x19, 0xb9, 0x02, 0xab, 0x3a, 0xda, 0xd1, 0xc5, 0x8c, 0x26, 0x61, 0xa0, 0x6c, 0x99, 0xc4, 0xb6,
		0x2a, 0x54, 0x61, 0x43, 0xaa, 0xff, 0x88, 0x0a, 0x30, 0x16, 0xea, 0xe5, 0xb3, 0xcc, 0x8a, 0x97,
		0xd7, 0x0f, 0xaa, 0xa3, 0x81, 0x16, 0xbb, 0xdb, 0x66, 0x65, 0x2f, 0xff, 0x7a, 0x1a, 0x6e, 0xf4,
		0xd0, 0xf8, 0x8e, 0xee, 0xb5, 0x47, 0xcd, 0x61, 0xc1, 0xcf, 0x4a, 0xa4, 0x24, 0x07, 0xee, 0xb4,
		0xf7, 0xe9, 0x34, 0x2a, 0xbc, 0x81, 0xe5, 0xeb, 0xa5, 0xaf, 0x57, 0xbd, 0xcc, 0x03, 0x0a, 0xb7,
		0x1b, 0xb2, 0xea, 0x48, 0x5a, 0x1d, 0x31, 0x02, 0x46, 0xe8, 0x5d, 0x80, 0xf9, 0x5a, 0xcc, 0x04,
		0xb4, 0x98, 0xff, 0xa3, 0x02, 0x57, 0xbb, 0xec, 0xda, 0x17, 0x60, 0x50, 0x04, 0x18, 0x3e, 0x58,
		0xc3, 0xcd, 0x7f, 0x31, 0x0d, 0x57, 0xbb, 0xec, 0xac, 0xfc, 0x6f, 0xf5, 0xd5, 0x50, 0x40, 0xef,
		0x13, 0x07, 0xf4, 0x7e, 0xf9, 0x80, 0x2e, 0x34, 0x1d, 0x51, 0x00, 0x18, 0x10, 0x05, 0x80, 0x2f,
		0xa4, 0xe1, 0x72, 0x37, 0xdd, 0xa1, 0x72, 0x9e, 0x2f, 0x25, 0xf9, 0xb1, 0xe7, 0xb7, 0x3c, 0xff,
		0x3d, 0x05, 0x2e, 0x24, 0xed, 0x74, 0xfd, 0x8f, 0x76, 0x79, 0xf1, 0x5e, 0x95, 0xff, 0xad, 0x02,
		0xe7, 0x13, 0x75, 0xc7, 0xee, 0x5b, 0x08, 0xe0, 0x9e, 0x39, 0x52, 0xbd, 0x9d, 0x39, 0xde, 0x06,
		0xb8, 0xd4, 0xc5, 0xcf, 0x7c, 0xda, 0xd4, 0xa1, 0x04, 0xd4, 0x71, 0x02, 0x72, 0x4d, 0x75, 0x30,
		0x9b, 0xcf, 0xaa, 0xe0, 0x0f, 0xf1, 0x2e, 0x20, 0xd2, 0xfb, 0x70, 0x01, 0xd1, 0x6d, 0x35, 0xb2,
		0x7f, 0x7f, 0x2f, 0x20, 0x32, 0x8f, 0xf4, 0x02, 0x62, 0xa0, 0xeb, 0x0b, 0x88, 0xfb, 0xc0, 0x9a,
		0x94, 0x99, 0x44, 0x56, 0xc4, 0x1b, 0x8c, 0xe8, 0x48, 0xf3, 0x3a, 0x9d, 0xa9, 0x14, 0xbf, 0x23,
		0xad, 0x16, 0x1e, 0x6a, 0x77, 0x92, 0x6c, 0x30, 0x9e, 0xcb, 0x98, 0x3c, 0x48, 0x98, 0x7c, 0x19,
		0x26, 0xdb, 0xcc, 0xa9, 0x64, 0xe3, 0x7a, 0x0b, 0x7e, 0x8e, 0xc2, 0x9f, 0x8b, 0x34, 0x9c, 0xa2,
		0xae, 0xba, 0x2c, 0x6c, 0x0a, 0x87, 0x1a, 0xbc, 0xe1, 0x8e, 0xe2, 0xe6, 0x81, 0x6e, 0x8a, 0x9b,
		0x1d, 0xed, 0xa6, 0xc3, 0x9c, 0x76, 0xd3, 0xd6, 0x41, 0xec, 0x60, 0xf2, 0x9b, 0x89, 0x91, 0x1e,
		0x6e, 0x26, 0x46, 0x7b, 0xeb, 0x24, 0xbd, 0x0e, 0x39, 0x1d, 0x57, 0xb4, 0x3d, 0xcf, 0x34, 0xe3,
		0xdb, 0x62, 0x81, 0x52, 0x53, 0x53, 0x44, 0xcf, 0xc2, 0xd0, 0x27, 0x0d, 0x42, 0xfc, 0x7f, 0x79,
		0xd1, 0x6c, 0x88, 0x15, 0x32, 0xe7, 0x3c, 0xf2, 0x26, 0xb7, 0xd7, 0x37, 0x6a, 0xd7, 0xcd, 0x92,
		0x46, 0x58, 0x4b, 0x6c, 0x54, 0xbf, 0x28, 0x50, 0x7a, 0xb5, 0x6e, 0x2e, 0x11, 0x51, 0x2b, 0xe6,
		0xa1, 0x1e, 0x5b, 0x31, 0xf3, 0xaf, 0xa5, 0xe1, 0x42, 0xd2, 0x9f, 0x16, 0x7e, 0xf8, 0x21, 0x73,
		0xdd, 0xcf, 0x7d, 0xbc, 0xda, 0xdf, 0x95, 0xc4, 0xbf, 0x8b, 0x0b, 0xa4, 0x3c, 0x6d, 0xce, 0xdf,
		0x1f, 0x74, 0x7e, 0xfe, 0xc6, 0x9e, 0x11, 0x6c, 0xec, 0xfb, 0x74, 0x3b, 0x9a, 0xff, 0x4d, 0x0a,
		0xe6, 0x93, 0xfc, 0x6e, 0x52, 0xa8, 0x0f, 0x7e, 0x46, 0x91, 0xea, 0x35, 0xa3, 0xd8, 0x2f, 0x2d,
		0xf2, 0x57, 0xb7, 0x4f, 0xb0, 0xba, 0xad, 0x88, 0xd3, 0x2f, 0x7f, 0xf5, 0xf3, 0x7e, 0x0a, 0x12,
		0xfe, 0xa2, 0xf3, 0xa3, 0xb1, 0x98, 0xbc, 0x42, 0x57, 0x3f, 0xb7, 0xd0, 0xd5, 0xea, 0xd0, 0xc8,
		0xc8, 0x77, 0x68, 0xe4, 0xff, 0x91, 0x82, 0x73, 0xfb, 0x11, 0x51, 0x3e, 0xa2, 0x8b, 0xde, 0x56,
		0x83, 0xc8, 0x24, 0xa8, 0x41, 0xe4, 0xff, 0x99, 0x82, 0xf3, 0x89, 0x7e, 0x60, 0xfb, 0x78, 0xe1,
		0x3b, 0x16, 0xde, 0xbf, 0x26, 0xcd, 0x24, 0xb9, 0x5a, 0xff, 0x6c, 0x5a, 0xb4, 0xf0, 0xa2, 0xae,
		0x9a, 0xc7, 0x0b, 0x1f, 0xd9, 0xd4, 0x93, 0xe9, 0xe6, 0xb7, 0x04, 0xbf, 0x48, 0xc1, 0x42, 0xc2,
		0x1f, 0x3e, 0x3f, 0xd6, 0x43, 0x40, 0x0f, 0x73, 0x04, 0x0e, 0xd2, 0x3f, 0xd7, 0x8c, 0x0a, 0xc1,
		0x36, 0xfd, 0xd4, 0x31, 0x98, 0x5a, 0xbd, 0xbf, 0x7a, 0x6b, 0xa3, 0xb4, 0x56, 0x5c, 0xdf, 0x58,
		0x55, 0x4b, 0x1b, 0x1f, 0xbb, 0xb3, 0x5a, 0x2a, 0xde, 0xba, 0xbf, 0xb4, 0x5e, 0xbc, 0x39, 0xf2,
		0x04, 0x3a, 0x01, 0x47, 0x3a, 0x5f, 0x2f, 0xad, 0xaf, 0x97, 0xe8, 0xe8, 0x88, 0x82, 0x4e, 0xc2,
		0xb1, 0x4e, 0x82, 0x95, 0xf5, 0xdb, 0x77, 0x57, 0x19, 0x49, 0x6a, 0xf9, 0x65, 0x38, 0x5c, 0xb6,
		0xaa, 0xbc, 0x35, 0x58, 0xf6, 0xff, 0x75, 0xee, 0x1d, 0x37, 0x3f, 0xbe, 0xa3, 0x7c, 0xfc, 0xe2,
		0x03, 0x83, 0x6c, 0xd7, 0x37, 0x0b, 0x65, 0xab, 0xba, 0xd0, 0xfe, 0x2f, 0x7c, 0xcf, 0x1b, 0x7a,
		0x65, 0xe1, 0x81, 0xe5, 0xfd, 0xdb, 0x60, 0xf6, 0xff, 0x7c, 0x6f, 0x68, 0x35, 0x63, 0xf7, 0xe2,
		0x66, 0x86, 0x8e, 0x5d, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xaf, 0x7e, 0x39, 0xb2,
		0x58, 0x00, 0x00,
	},
	// uber/cadence/api/v1/tasklist.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xeb, 0x4e, 0xe3, 0x46,
		0x14, 0x6e, 0x6e, 0x5c, 0x4e, 0x16, 0x30, 0x03, 0x2c, 0x49, 0xb6, 0xdb, 0xb2, 0xf9, 0x81, 0x28,
		0x6a, 0x1d, 0x41, 0x5b, 0xa9, 0x6a, 0xab, 0xed, 0x06, 0x82, 0x76, 0x2d, 0x2e, 0x8b, 0x1c, 0x2f,
		0x15, 0x95, 0x2a, 0x77, 0x62, 0x0f, 0x61, 0xea, 0xcb, 0x58, 0x9e, 0x71, 0x02, 0x4f, 0xd0, 0x37,
		0xe8, 0xc3, 0xf4, 0x1d, 0xfa, 0x4e, 0xd5, 0x8c, 0x9d, 0x90, 0x8b, 0x41, 0xdd, 0x1f, 0xfb, 0x2f,
		0x73, 0xce, 0x7c, 0xf3, 0x9d, 0xef, 0xdc, 0x62, 0x68, 0x26, 0x3d, 0x12, 0xb7, 0x1c, 0xec, 0x92,
		0xd0, 0x21, 0x2d, 0x1c, 0xd1, 0xd6, 0xe0, 0xa0, 0x25, 0x30, 0xf7, 0x7c, 0xca, 0x85, 0x1e, 0xc5,
		0x4c, 0x30, 0xb4, 0x21, 0xef, 0xe8, 0xd9, 0x1d, 0x1d, 0x47, 0x54, 0x1f, 0x1c, 0x34, 0xbe, 0xe8,
		0x33, 0xd6, 0xf7, 0x49, 0x4b, 0x5d, 0xe9, 0x25, 0x37, 0x2d, 0x37, 0x89, 0xb1, 0xa0, 0x2c, 0x4c,
		0x41, 0x8d, 0x2f, 0x67, 0xfd, 0x82, 0x06, 0x84, 0x0b, 0x1c, 0x44, 0xd9, 0x85, 0xb9, 0x07, 0x86,
		0x31, 0x8e, 0x22, 0x12, 0xf3, 0xd4, 0xdf, 0xfc, 0x00, 0x4b, 0x16, 0xe6, 0xde, 0x19, 0xe5, 0x02,
		0x21, 0x28, 0x87, 0x38, 0x20, 0xb5, 0xc2, 0x4e, 0x61, 0x6f, 0xd9, 0x54, 0xbf, 0xd1, 0xf7, 0x50,
		0xf6, 0x68, 0xe8, 0xd6, 0x8a, 0x3b, 0x85, 0xbd, 0xd5, 0xc3, 0x57, 0x7a, 0x4e, 0x90, 0xfa, 0xe8,
		0x81, 0x53, 0x1a, 0xba, 0xa6, 0xba, 0xde, 0xc4, 0xa0, 0x8d, 0xac, 0xe7, 0x44, 0x60, 0x17, 0x0b,
		0x8c, 0xce, 0x61, 0x33, 0xc0, 0x77, 0xb6, 0x94, 0xcd, 0xed, 0x88, 0xc4, 0x36, 0x27, 0x0e, 0x0b,
		0x5d, 0x45, 0x57, 0x3d, 0xfc, 0x5c, 0x4f, 0x23, 0xd5, 0x47, 0x91, 0xea, 0x1d, 0x96, 0xf4, 0x7c,
		0x72, 0x85, 0xfd, 0x84, 0x98, 0xeb, 0x01, 0xbe, 0x93, 0x0f, 0xf2, 0x4b, 0x12, 0x77, 0x15, 0xac,
		0xf9, 0x01, 0xea, 0x23, 0x8a, 0x4b, 0x1c, 0x0b, 0x2a, 0xb3, 0x32, 0xe6, 0xd2, 0xa0, 0xe4, 0x91,
		0xfb, 0x4c, 0x89, 0xfc, 0x89, 0x76, 0x61, 0x8d, 0x0d, 0x43, 0x12, 0xdb, 0xb7, 0x8c, 0x0b, 0x5b,
		0xe9, 0x2c, 0x2a, 0xef, 0x8a, 0x32, 0xbf, 0x63, 0x5c, 0x5c, 0xe0, 0x80, 0x34, 0x3d, 0xd8, 0x32,
		0x38, 0xf3, 0x55, 0x92, 0xdf, 0xc6, 0x2c, 0x89, 0xce, 0x89, 0x88, 0xa9, 0xc3, 0x51, 0x0b, 0x36,
		0x43, 0x32, 0xcc, 0x0f, 0xbf, 0x60, 0xae, 0x87, 0x64, 0x38, 0x1d, 0x20, 0x7a, 0x05, 0xcf, 0x22,
		0xe6, 0xfb, 0x24, 0xb6, 0x1d, 0x96, 0x84, 0x42, 0xd1, 0x95, 0xcc, 0x6a, 0x6a, 0x3b, 0x96, 0xa6,
		0xe6, 0x5f, 0x65, 0x58, 0x1d, 0x89, 0xe8, 0x0a, 0x2c, 0x12, 0x8e, 0xbe, 0x06, 0xd4, 0xc3, 0x8e,
		0xe7, 0xb3, 0x7e, 0x0a, 0xb3, 0x6f, 0x69, 0x28, 0x14, 0x49, 0xc9, 0xd4, 0x32, 0x8f, 0x02, 0xbf,
		0xa3, 0xa1, 0x40, 0x2f, 0x01, 0x62, 0x82, 0x5d, 0xdb, 0x27, 0x03, 0xe2, 0x67, 0x0c, 0xcb, 0xd2,
		0x72, 0x26, 0x0d, 0xe8, 0x05, 0x2c, 0x63, 0xc7, 0xcb, 0xbc, 0x25, 0xe5, 0x5d, 0xc2, 0x8e, 0x97,
		0x3a, 0x77, 0x61, 0x2d, 0xc6, 0x82, 0x4c, 0x6a, 0x29, 0x2b, 0x2d, 0x2b, 0xd2, 0xfc, 0xa0, 0xa3,
		0x03, 0x2b, 0x52, 0xb4, 0x4d, 0x5d, 0xbb, 0xe7, 0x33, 0xc7, 0xab, 0x55, 0x54, 0xc1, 0x76, 0x1e,
		0xed, 0x05, 0xa3, 0x73, 0x24, 0xef, 0x99, 0x55, 0x09, 0x33, 0x5c, 0x75, 0x40, 0x03, 0xd8, 0xa6,
		0xa3, 0xbc, 0xda, 0x7d, 0x99, 0x58, 0x3b, 0x48, 0x33, 0x5b, 0x5b, 0xd8, 0x29, 0xed, 0x55, 0x0f,
		0x5f, 0x3f, 0xd9, 0x5b, 0x69, 0x76, 0xf4, 0xdc, 0xd2, 0x9c, 0x84, 0x22, 0xbe, 0x37, 0xb7, 0xe8,
		0x47, 0x95, 0x6d, 0xf1, 0x91, 0xb2, 0x35, 0x04, 0x34, 0x1e, 0x67, 0xc9, 0x69, 0xac, 0x37, 0x50,
		0x19, 0xc8, 0x1e, 0x55, 0xd9, 0xaf, 0x1e, 0xee, 0xe7, 0xca, 0xc8, 0x7d, 0xd1, 0x4c, 0x81, 0x3f,
		0x16, 0x7f, 0x28, 0x34, 0x7f, 0x81, 0xea, 0x44, 0xea, 0x50, 0x1d, 0x96, 0xb8, 0xc0, 0xb1, 0xb0,
		0xa9, 0x9b, 0xd5, 0x7e, 0x51, 0x9d, 0x0d, 0x17, 0x6d, 0xc1, 0x02, 0x09, 0x5d, 0xe9, 0x48, 0xcb,
		0x5d, 0x21, 0xa1, 0x6b, 0xb8, 0xcd, 0xbf, 0x0b, 0x00, 0x97, 0xaa, 0xb5, 0x8c, 0xf0, 0x86, 0xa1,
		0x0e, 0x68, 0x3e, 0xe6, 0xc2, 0xc6, 0x8e, 0x43, 0x38, 0xb7, 0xe5, 0x5a, 0xc8, 0x06, 0xad, 0x31,
		0x37, 0x68, 0xd6, 0x68, 0x67, 0x98, 0xab, 0x12, 0xd3, 0x56, 0x10, 0x69, 0x44, 0x0d, 0x58, 0xa2,
		0x2e, 0x09, 0x05, 0x15, 0xf7, 0xd9, 0xb4, 0x8c, 0xcf, 0x79, 0xed, 0x53, 0xca, 0x69, 0x9f, 0xe6,
		0x3f, 0x05, 0xa8, 0x77, 0x05, 0x75, 0xbc, 0xfb, 0x93, 0x3b, 0xe2, 0x24, 0x32, 0x09, 0x6d, 0x21,
		0x62, 0xda, 0x4b, 0x04, 0xe1, 0xe8, 0x2d, 0x68, 0x43, 0x16, 0x7b, 0x24, 0x56, 0x15, 0xb2, 0xe5,
		0x3e, 0xcc, 0xe2, 0x7c, 0xf9, 0x64, 0x3f, 0x98, 0xab, 0x29, 0x6c, 0xbc, 0xbc, 0x2c, 0xa8, 0x73,
		0xe7, 0x96, 0xb8, 0x89, 0x4f, 0x6c, 0xc1, 0xec, 0x34, 0x7b, 0x52, 0x36, 0x4b, 0x44, 0x56, 0x9a,
		0xfa, 0xfc, 0x8a, 0xc9, 0xb6, 0xa9, 0xf9, 0x7c, 0x84, 0xb5, 0x58, 0x57, 0x22, 0xad, 0x14, 0xd8,
		0x7c, 0x0d, 0xeb, 0x73, 0x4b, 0x06, 0x7d, 0x05, 0xda, 0x4c, 0x2b, 0xf3, 0x5a, 0x61, 0xa7, 0xb4,
		0xb7, 0x6c, 0xae, 0x4d, 0xf7, 0x20, 0x6f, 0xfe, 0x5b, 0x86, 0xed, 0xb9, 0x07, 0x8e, 0x59, 0x78,
		0x43, 0xfb, 0xa8, 0x06, 0x8b, 0x03, 0x12, 0x73, 0xca, 0xc2, 0x51, 0x89, 0xb3, 0x23, 0x3a, 0x84,
		0x8d, 0x30, 0x09, 0x6c, 0x35, 0xd9, 0xd1, 0x08, 0xc5, 0x95, 0x8a, 0xca, 0x51, 0xb1, 0x26, 0xdb,
		0x36, 0x09, 0x4c, 0x82, 0xdd, 0xf1, 0x93, 0x1c, 0x7d, 0x07, 0x9b, 0x12, 0x33, 0x8c, 0xa9, 0xac,
		0xc9, 0x03, 0xa8, 0x34, 0x06, 0xa1, 0x30, 0x09, 0x7e, 0x95, 0xee, 0x09, 0x14, 0x85, 0xb5, 0x59,
		0x96, 0xb2, 0x9a, 0xc6, 0x37, 0x4f, 0x66, 0x7f, 0x46, 0x8a, 0x3e, 0x1d, 0x4b, 0x3a, 0x8f, 0xab,
		0xf1, 0x74, 0x80, 0x3e, 0x68, 0x73, 0xc1, 0x55, 0x14, 0x57, 0xfb, 0xa3, 0xb8, 0x66, 0x24, 0xa4,
		0x64, 0x6b, 0xc3, 0x69, 0x6b, 0x83, 0xc2, 0x46, 0x4e, 0x50, 0x93, 0xe3, 0x5b, 0x49, 0xc7, 0xf7,
		0xe7, 0xe9, 0xf1, 0xdd, 0xfd, 0x7f, 0xb1, 0x4c, 0x8c, 0x6e, 0xe3, 0x4f, 0xd8, 0xcc, 0x8b, 0xe9,
		0x53, 0x70, 0xed, 0xff, 0x01, 0xcf, 0x26, 0xff, 0x6d, 0x51, 0x03, 0x9e, 0x5b, 0xed, 0xee, 0xa9,
		0x7d, 0x66, 0x74, 0x2d, 0xfb, 0xd4, 0xb8, 0xe8, 0xd8, 0xc6, 0xc5, 0x55, 0xfb, 0xcc, 0xe8, 0x68,
		0x9f, 0xa1, 0x3a, 0x6c, 0xcd, 0xf8, 0x2e, 0xde, 0x9b, 0xe7, 0xed, 0x33, 0xad, 0x90, 0xe3, 0xea,
		0x5a, 0xc6, 0xf1, 0xe9, 0xb5, 0x56, 0xdc, 0x77, 0x1f, 0x18, 0xac, 0xfb, 0x88, 0x4c, 0x33, 0x58,
		0xd7, 0x97, 0x27, 0x13, 0x0c, 0x2f, 0x60, 0x7b, 0xc6, 0xd7, 0x39, 0x39, 0x36, 0xba, 0xc6, 0xfb,
		0x0b, 0xad, 0x90, 0xe3, 0x6c, 0x1f, 0x5b, 0xc6, 0x95, 0x61, 0x5d, 0x6b, 0xc5, 0xa3, 0xdf, 0x61,
		0xdb, 0x61, 0x41, 0x9e, 0xfe, 0xa3, 0x95, 0x71, 0x02, 0xe4, 0x94, 0x5e, 0x16, 0x7e, 0x3b, 0xe8,
		0x53, 0x71, 0x9b, 0xf4, 0x74, 0x87, 0x05, 0xad, 0xc9, 0xef, 0xa8, 0x6f, 0xa8, 0xeb, 0xb7, 0xfa,
		0x2c, 0xfd, 0xb4, 0xc9, 0x3e, 0xaa, 0x7e, 0xc2, 0x11, 0x1d, 0x1c, 0xf4, 0x16, 0x94, 0xed, 0xdb,
		0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xf6, 0xce, 0x1e, 0x78, 0x09, 0x00, 0x00,
	},
	// google/protobuf/wrappers.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x2f, 0x4a, 0x2c,
		0x28, 0x48, 0x2d, 0x2a, 0xd6, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0xca,
		0x5c, 0xdc, 0x2e, 0xf9, 0xa5, 0x49, 0x39, 0xa9, 0x61, 0x89, 0x39, 0xa5, 0xa9, 0x42, 0x22, 0x5c,
		0xac, 0x65, 0x20, 0x86, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x63, 0x10, 0x84, 0xa3, 0xa4, 0xc4, 0xc5,
		0xe5, 0x96, 0x93, 0x9f, 0x58, 0x82, 0x45, 0x0d, 0x13, 0x92, 0x1a, 0xcf, 0xbc, 0x12, 0x33, 0x13,
		0x2c, 0x6a, 0x98, 0x61, 0x6a, 0x94, 0xb9, 0xb8, 0x43, 0x71, 0x29, 0x62, 0x41, 0x35, 0xc8, 0xd8,
		0x08, 0x8b, 0x1a, 0x56, 0x34, 0x83, 0xb0, 0x2a, 0xe2, 0x85, 0x29, 0x52, 0xe4, 0xe2, 0x74, 0xca,
		0xcf, 0xcf, 0xc1, 0xa2, 0x84, 0x03, 0xc9, 0x9c, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0x74, 0x2c, 0x8a,
		0x38, 0x91, 0x1c, 0xe4, 0x54, 0x59, 0x92, 0x5a, 0x8c, 0x45, 0x0d, 0x0f, 0x54, 0x8d, 0x53, 0x33,
		0x23, 0x97, 0x70, 0x72, 0x7e, 0xae, 0x1e, 0x5a, 0xf0, 0x3a, 0xf1, 0x86, 0x43, 0xc3, 0x3f, 0x00,
		0x24, 0x12, 0xc0, 0x18, 0x65, 0x08, 0x55, 0x91, 0x9e, 0x9f, 0x93, 0x98, 0x97, 0xae, 0x97, 0x5f,
		0x94, 0x8e, 0x88, 0xab, 0x92, 0xca, 0x82, 0xd4, 0x62, 0xfd, 0xec, 0xbc, 0xfc, 0xf2, 0x3c, 0x78,
		0xbc, 0x15, 0x24, 0xfd, 0x60, 0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce,
		0x1d, 0xa2, 0x39, 0x00, 0xaa, 0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4,
		0x35, 0x89, 0x0d, 0x6c, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x92, 0x48, 0x30, 0x06,
		0x02, 0x00, 0x00,
	},
	// uber/cadence/api/v1/workflow.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcf, 0x72, 0xdb, 0xc8,
		0xf1, 0xfe, 0x81, 0x94, 0x64, 0xa9, 0xa9, 0x3f, 0xd0, 0x48, 0xb2, 0x68, 0x79, 0xd7, 0x96, 0xb9,
		0x6b, 0x5b, 0xe6, 0x6f, 0x25, 0xad, 0xec, 0xb5, 0xbd, 0xb6, 0xe2, 0x38, 0x10, 0x08, 0x59, 0xb0,
		0x28, 0x90, 0x19, 0x82, 0x96, 0xb5, 0x95, 0x04, 0x05, 0x91, 0x23, 0x09, 0x31, 0x09, 0xb0, 0x80,
		0xa1, 0x6c, 0xdd, 0x93, 0xca, 0x39, 0x39, 0xa5, 0x72, 0xca, 0x03, 0xa4, 0x2a, 0x95, 0xca, 0x21,
		0xa7, 0x54, 0x9e, 0x20, 0xd7, 0xbc, 0x42, 0x2a, 0x6f, 0x91, 0x9a, 0x01, 0x40, 0x82, 0x24, 0x48,
		0x50, 0x49, 0xd5, 0xe6, 0x26, 0xf4, 0x7c, 0x5f, 0xa3, 0xa7, 0xa7, 0xfb, 0xeb, 0x01, 0x05, 0xb9,
		0xf6, 0x29, 0x71, 0xb7, 0x6b, 0x66, 0x9d, 0xd8, 0x35, 0xb2, 0x6d, 0xb6, 0xac, 0xed, 0xcb, 0x9d,
		0xed, 0x8f, 0x8e, 0xfb, 0xe1, 0xac, 0xe1, 0x7c, 0xdc, 0x6a, 0xb9, 0x0e, 0x75, 0xd0, 0x12, 0xc3,
		0x6c, 0x05, 0x98, 0x2d, 0xb3, 0x65, 0x6d, 0x5d, 0xee, 0xac, 0xdd, 0x39, 0x77, 0x9c, 0xf3, 0x06,
		0xd9, 0xe6, 0x90, 0xd3, 0xf6, 0xd9, 0x76, 0xbd, 0xed, 0x9a, 0xd4, 0x72, 0x6c, 0x9f, 0xb4, 0x76,
		0xb7, 0x7f, 0x9d, 0x5a, 0x4d, 0xe2, 0x51, 0xb3, 0xd9, 0x0a, 0x00, 0xeb, 0x71, 0x6f, 0xae, 0x39,
		0xcd, 0x66, 0xc7, 0x45, 0x6c, 0x6c, 0xd4, 0xf4, 0x3e, 0x34, 0x2c, 0x8f, 0xfa, 0x98, 0xdc, 0x2f,
		0x67, 0x60, 0xe5, 0x38, 0x08, 0x57, 0xf9, 0x44, 0x6a, 0x6d, 0x16, 0x82, 0x6a, 0x9f, 0x39, 0xa8,
		0x0a, 0x28, 0xdc, 0x87, 0x41, 0xc2, 0x95, 0xac, 0xb0, 0x2e, 0x6c, 0x64, 0x1e, 0x3f, 0xd8, 0x8a,
		0xd9, 0xd2, 0xd6, 0x80, 0x1f, 0xbc, 0xf8, 0xb1, 0xdf, 0x84, 0x9e, 0xc2, 0x04, 0xbd, 0x6a, 0x91,
		0x6c, 0x8a, 0x3b, 0xba, 0x37, 0xd2, 0x91, 0x7e, 0xd5, 0x22, 0x98, 0xc3, 0xd1, 0x0b, 0x00, 0x8f,
		0x9a, 0x2e, 0x35, 0x58, 0x1a, 0xb2, 0x69, 0x4e, 0x5e, 0xdb, 0xf2, 0x73, 0xb4, 0x15, 0xe6, 0x68,
		0x4b, 0x0f, 0x73, 0x84, 0x67, 0x38, 0x9a, 0x3d, 0x33, 0x6a, 0xad, 0xe1, 0x78, 0xc4, 0xa7, 0x4e,
		0x24, 0x53, 0x39, 0x9a, 0x53, 0x75, 0x98, 0xf5, 0xa9, 0x1e, 0x35, 0x69, 0xdb, 0xcb, 0x4e, 0xae,
		0x0b, 0x1b, 0xf3, 0x8f, 0x77, 0xc6, 0xdb, 0xbd, 0xcc, 0x98, 0x15, 0x4e, 0xc4, 0x99, 0x5a, 0xf7,
		0x01, 0xdd, 0x87, 0xf9, 0x0b, 0xcb, 0xa3, 0x8e, 0x7b, 0x65, 0x34, 0x88, 0x7d, 0x4e, 0x2f, 0xb2,
		0x53, 0xeb, 0xc2, 0x46, 0x1a, 0xcf, 0x05, 0xd6, 0x22, 0x37, 0xa2, 0x9f, 0xc0, 0x4a, 0xcb, 0x74,
		0x89, 0x4d, 0xbb, 0xe9, 0x37, 0x2c, 0xfb, 0xcc, 0xc9, 0xde, 0xe0, 0x5b, 0xd8, 0x88, 0x8d, 0xa2,
		0xcc, 0x19, 0x3d, 0x27, 0x89, 0x97, 0x5a, 0x83, 0x46, 0x24, 0xc1, 0x7c, 0xd7, 0x2d, 0xcf, 0xcc,
		0x74, 0x62, 0x66, 0xe6, 0x3a, 0x0c, 0x9e, 0x9d, 0x4d, 0x98, 0x68, 0x92, 0xa6, 0x93, 0x9d, 0xe1,
		0xc4, 0x5b, 0xb1, 0xf1, 0x1c, 0x91, 0xa6, 0x83, 0x39, 0x0c, 0x61, 0x58, 0xf4, 0x88, 0xe9, 0xd6,
		0x2e, 0x0c, 0x93, 0x52, 0xd7, 0x3a, 0x6d, 0x53, 0xe2, 0x65, 0x81, 0x73, 0xef, 0xc7, 0x72, 0x2b,
		0x1c, 0x2d, 0x75, 0xc0, 0x58, 0xf4, 0xfa, 0x2c, 0xa8, 0x08, 0x8b, 0x66, 0x9b, 0x3a, 0x86, 0x4b,
		0x3c, 0x42, 0x8d, 0x96, 0x63, 0xd9, 0xd4, 0xcb, 0x66, 0xb8, 0xcf, 0xf5, 0x58, 0x9f, 0x98, 0x01,
		0xcb, 0x1c, 0x87, 0x17, 0x18, 0x35, 0x62, 0x40, 0xb7, 0x61, 0x86, 0xb5, 0x87, 0xc1, 0xfa, 0x23,
		0x3b, 0xbb, 0x2e, 0x6c, 0xcc, 0xe0, 0x69, 0x66, 0x28, 0x5a, 0x1e, 0x45, 0xab, 0x70, 0xc3, 0xf2,
		0x8c, 0x9a, 0xeb, 0xd8, 0xd9, 0xb9, 0x75, 0x61, 0x63, 0x1a, 0x4f, 0x59, 0x9e, 0xec, 0x3a, 0x36,
		0xda, 0x85, 0x4c, 0xbb, 0x55, 0x37, 0x69, 0x50, 0x60, 0xf3, 0x89, 0x69, 0x04, 0x1f, 0xce, 0x73,
		0xf8, 0x73, 0x10, 0x5b, 0xa6, 0x4b, 0x2d, 0x7e, 0x0c, 0x35, 0xc7, 0x3e, 0xb3, 0xce, 0xb3, 0x0b,
		0xeb, 0xe9, 0x8d, 0xcc, 0xe3, 0xd7, 0xe3, 0x55, 0x19, 0x3b, 0x4c, 0x76, 0xea, 0xbe, 0x0b, 0x99,
		0x7b, 0x50, 0x6c, 0xea, 0x5e, 0xe1, 0x85, 0x56, 0xaf, 0x15, 0xbd, 0x83, 0x25, 0x16, 0xbe, 0xe1,
		0x5c, 0x12, 0xb7, 0x61, 0xb6, 0x8c, 0x96, 0xd3, 0xb0, 0x6a, 0x57, 0x59, 0x91, 0x17, 0x75, 0x7c,
		0x4b, 0xb3, 0x0d, 0x96, 0x7c, 0x78, 0x99, 0xa3, 0xf1, 0x62, 0xad, 0xdf, 0xb4, 0xb6, 0x07, 0xcb,
		0x71, 0x01, 0x20, 0x11, 0xd2, 0x1f, 0xc8, 0x15, 0x97, 0x8c, 0x19, 0xcc, 0xfe, 0x44, 0xcb, 0x30,
		0x79, 0x69, 0x36, 0xda, 0x7e, 0xf7, 0xcf, 0x60, 0xff, 0xe1, 0x65, 0xea, 0x5b, 0x21, 0xf7, 0xdb,
		0x14, 0xdc, 0x19, 0xec, 0x20, 0xee, 0x2c, 0xd0, 0x45, 0xf4, 0x32, 0x7a, 0x3a, 0xbe, 0x0e, 0x7d,
		0x1e, 0x1b, 0xb4, 0x1e, 0x1c, 0x59, 0xe4, 0xf0, 0x4c, 0x58, 0xef, 0x56, 0x7b, 0x20, 0x24, 0x8e,
		0xd1, 0x95, 0x05, 0xa7, 0x4d, 0x03, 0x45, 0xba, 0x35, 0x70, 0x70, 0x85, 0x20, 0x00, 0xfc, 0x59,
		0xc7, 0x45, 0x85, 0x8b, 0x8b, 0x23, 0x87, 0x42, 0xe1, 0xb4, 0x29, 0x3a, 0x86, 0xdb, 0x3c, 0xbc,
		0x21, 0xde, 0xd3, 0x49, 0xde, 0x57, 0x19, 0x3b, 0xc6, 0x71, 0xee, 0xef, 0x02, 0x2c, 0xc5, 0xb4,
		0x35, 0xab, 0xd6, 0xba, 0xd3, 0x34, 0x2d, 0xdb, 0xb0, 0xea, 0x41, 0x92, 0xa7, 0x7d, 0x83, 0x5a,
		0x47, 0x77, 0x21, 0x13, 0x2c, 0xda, 0x66, 0x33, 0xcc, 0x37, 0xf8, 0x26, 0xcd, 0x6c, 0x92, 0x21,
		0xf2, 0x9e, 0xfe, 0x6f, 0xe5, 0xfd, 0x1e, 0xcc, 0x5a, 0xb6, 0x45, 0x2d, 0x93, 0x92, 0x3a, 0x8b,
		0x6b, 0x82, 0x2b, 0x5b, 0xa6, 0x63, 0x53, 0xeb, 0xb9, 0x5f, 0x0b, 0xb0, 0xa2, 0x7c, 0xa2, 0xc4,
		0xb5, 0xcd, 0xc6, 0xf7, 0x32, 0x72, 0xfa, 0x63, 0x4a, 0x0d, 0xc6, 0xf4, 0x97, 0x29, 0x58, 0x2a,
		0x13, 0xbb, 0x6e, 0xd9, 0xe7, 0x52, 0x8d, 0x5a, 0x97, 0x16, 0xbd, 0xe2, 0x11, 0xdd, 0x85, 0x8c,
		0x19, 0x3c, 0x77, 0xb3, 0x0c, 0xa1, 0x49, 0xad, 0xa3, 0x7d, 0x98, 0xeb, 0x00, 0x12, 0xe7, 0x5a,
		0xe8, 0x9a, 0xcf, 0xb5, 0x59, 0x33, 0xf2, 0x84, 0x5e, 0xc3, 0x24, 0x9b, 0x31, 0xfe, 0x68, 0x9b,
		0x7f, 0xfc, 0x28, 0x5e, 0xdc, 0x7b, 0x23, 0x64, 0xe3, 0x84, 0x60, 0x9f, 0x87, 0x54, 0x58, 0xbc,
		0x20, 0xa6, 0x4b, 0x4f, 0x89, 0x49, 0x8d, 0x3a, 0xa1, 0xa6, 0xd5, 0xf0, 0x82, 0x61, 0xf7, 0xd9,
		0x90, 0x49, 0x71, 0xd5, 0x70, 0xcc, 0x3a, 0x16, 0x3b, 0xb4, 0x82, 0xcf, 0x42, 0x6f, 0x61, 0xa9,
		0x61, 0x7a, 0xd4, 0xe8, 0xfa, 0xe3, 0xc2, 0x36, 0x99, 0x28, 0x6c, 0x8b, 0x8c, 0x76, 0x10, 0xb2,
		0xb8, 0xbe, 0xed, 0x03, 0x37, 0xfa, 0x5d, 0x41, 0xea, 0xbe, 0xa7, 0xa9, 0x44, 0x4f, 0x0b, 0x8c,
		0x54, 0xf1, 0x39, 0xdc, 0x4f, 0x16, 0x6e, 0x98, 0x94, 0x92, 0x66, 0x8b, 0xf2, 0xf1, 0x37, 0x89,
		0xc3, 0x47, 0xf4, 0x08, 0xc4, 0xa6, 0xf9, 0xc9, 0x6a, 0xb6, 0x9b, 0x46, 0x60, 0xf2, 0xf8, 0x28,
		0x9b, 0xc4, 0x0b, 0x81, 0x5d, 0x0a, 0xcc, 0x6c, 0xe6, 0x79, 0xb5, 0x0b, 0x52, 0x6f, 0x37, 0xc2,
		0x48, 0x66, 0x92, 0x67, 0x5e, 0x87, 0xc1, 0xe3, 0x90, 0x61, 0x81, 0x7c, 0x6a, 0x59, 0x7e, 0xcf,
		0xfa, 0x3e, 0x20, 0xd1, 0xc7, 0x7c, 0x97, 0xc2, 0x9d, 0xbc, 0x86, 0x59, 0x9e, 0x94, 0x33, 0xd3,
		0x6a, 0xb4, 0x5d, 0x12, 0x0c, 0xac, 0xf8, 0x63, 0xda, 0xf7, 0x31, 0x38, 0xc3, 0x18, 0xc1, 0x03,
		0xfa, 0x1a, 0x96, 0xb9, 0x03, 0x56, 0xeb, 0xc4, 0x35, 0xac, 0x3a, 0xb1, 0xa9, 0x45, 0xaf, 0x82,
		0x99, 0x85, 0xd8, 0xda, 0x31, 0x5f, 0x52, 0x83, 0x15, 0xf4, 0x0c, 0x56, 0xc3, 0x23, 0xe8, 0x27,
		0xcd, 0x71, 0xd2, 0x4a, 0xb0, 0xdc, 0xc7, 0xbb, 0x0b, 0x99, 0x30, 0x01, 0xac, 0x01, 0xe6, 0x79,
		0xeb, 0x40, 0x68, 0x52, 0xeb, 0xb9, 0x3f, 0xa7, 0xe0, 0x56, 0x50, 0x97, 0xf2, 0x85, 0xd5, 0xa8,
		0x7f, 0x2f, 0x1d, 0xfd, 0x55, 0xc4, 0x2d, 0xeb, 0xba, 0xa8, 0xc8, 0x89, 0x1f, 0x23, 0xb7, 0x47,
		0x2e, 0x75, 0xfd, 0xfd, 0x9f, 0x1e, 0xe8, 0x7f, 0x36, 0x1a, 0x83, 0xbb, 0x96, 0xaf, 0xda, 0xc1,
		0x68, 0x9c, 0x18, 0x31, 0x1a, 0x7d, 0x49, 0xe6, 0x4a, 0x1d, 0x8e, 0xc6, 0x56, 0xbf, 0x09, 0xdd,
		0x84, 0x29, 0x5f, 0x73, 0x79, 0xf7, 0xcc, 0xe0, 0xe0, 0x29, 0xf7, 0xcf, 0x54, 0x47, 0x6f, 0x0a,
		0xa4, 0x66, 0x79, 0x61, 0xbe, 0x3a, 0x32, 0x20, 0x24, 0xcb, 0x40, 0x48, 0xec, 0x91, 0x81, 0xc1,
		0x12, 0x4f, 0x5d, 0xb7, 0xc4, 0x5f, 0xc1, 0x6c, 0x4f, 0xb7, 0x26, 0x5f, 0xb6, 0x33, 0x5e, 0x7c,
		0xa7, 0x4e, 0xf4, 0x76, 0x2a, 0x86, 0x55, 0xc7, 0xb5, 0xce, 0x2d, 0xdb, 0x6c, 0x18, 0x7d, 0x41,
		0x26, 0x6b, 0xcb, 0x4a, 0x48, 0xad, 0xf4, 0x04, 0xdb, 0x57, 0x9f, 0x53, 0x03, 0xf5, 0xf9, 0xd7,
		0x14, 0xdc, 0x0a, 0x05, 0xb3, 0xe8, 0xd4, 0xcc, 0x46, 0xc1, 0xf2, 0x5a, 0x26, 0xad, 0x5d, 0x8c,
		0xa7, 0xef, 0xff, 0xfb, 0x7c, 0xfe, 0x0c, 0xee, 0xf4, 0x46, 0x60, 0x38, 0x67, 0x06, 0xbd, 0xb0,
		0x3c, 0x23, 0x9a, 0xe6, 0xd1, 0x0e, 0xd7, 0x7a, 0x22, 0x2a, 0x9d, 0xe9, 0x17, 0x96, 0x17, 0xa8,
		0x22, 0xfa, 0x1c, 0x80, 0xdf, 0x5b, 0xa8, 0xf3, 0x81, 0xf8, 0x65, 0x3a, 0x8b, 0xf9, 0x45, 0x4b,
		0x67, 0x86, 0xdc, 0x5b, 0xc8, 0x44, 0xaf, 0xc8, 0xbb, 0x30, 0x15, 0xdc, 0xb2, 0x05, 0x7e, 0x4b,
		0xfd, 0x22, 0xe1, 0x96, 0xcd, 0x3f, 0x40, 0x02, 0x4a, 0xee, 0x8f, 0x29, 0x98, 0xef, 0x5d, 0x42,
		0x0f, 0x61, 0xe1, 0xd4, 0xb2, 0x4d, 0xf7, 0xca, 0xa8, 0x5d, 0x90, 0xda, 0x07, 0xaf, 0xdd, 0x0c,
		0x0e, 0x61, 0xde, 0x37, 0xcb, 0x81, 0x15, 0xad, 0xc0, 0x94, 0xdb, 0xb6, 0xc3, 0xf1, 0x3d, 0x83,
		0x27, 0xdd, 0x36, 0xbb, 0xe7, 0xbc, 0x82, 0xdb, 0x67, 0x96, 0xeb, 0xb1, 0x91, 0xe7, 0x77, 0x83,
		0x51, 0x73, 0x9a, 0xad, 0x06, 0xe9, 0x69, 0xf5, 0x2c, 0x87, 0x84, 0xfd, 0x22, 0x87, 0x00, 0x4e,
		0x9f, 0xad, 0xb9, 0xc4, 0xec, 0x9c, 0x4d, 0x72, 0x2a, 0x33, 0x01, 0x3e, 0x10, 0xf2, 0x39, 0x2e,
		0xed, 0x96, 0x7d, 0x3e, 0x6e, 0x1d, 0xcf, 0x86, 0x04, 0xee, 0xe0, 0x0e, 0x00, 0xff, 0x74, 0xa1,
		0xe6, 0x69, 0xc3, 0x9f, 0x8b, 0xd3, 0x38, 0x62, 0xc9, 0xff, 0x49, 0x80, 0xe5, 0xb8, 0xa9, 0x8f,
		0x72, 0x70, 0xa7, 0xac, 0x68, 0x05, 0x55, 0x7b, 0x63, 0x48, 0xb2, 0xae, 0xbe, 0x53, 0xf5, 0x13,
		0xa3, 0xa2, 0x4b, 0xba, 0x62, 0xa8, 0xda, 0x3b, 0xa9, 0xa8, 0x16, 0xc4, 0xff, 0x43, 0x5f, 0xc2,
		0xfa, 0x10, 0x4c, 0x45, 0x3e, 0x50, 0x0a, 0xd5, 0xa2, 0x52, 0x10, 0x85, 0x11, 0x9e, 0x2a, 0xba,
		0x84, 0x75, 0xa5, 0x20, 0xa6, 0xd0, 0xff, 0xc3, 0xc3, 0x21, 0x18, 0x59, 0xd2, 0x64, 0xa5, 0x68,
		0x60, 0xe5, 0xc7, 0x55, 0xa5, 0xc2, 0xc0, 0xe9, 0xfc, 0x2f, 0xba, 0x31, 0xf7, 0x48, 0x54, 0xf4,
		0x4d, 0x05, 0x45, 0x56, 0x2b, 0x6a, 0x49, 0x1b, 0x15, 0x73, 0x1f, 0x66, 0x48, 0xcc, 0xfd, 0xa8,
		0x30, 0xe6, 0xfc, 0xaf, 0x52, 0xdd, 0x5f, 0x36, 0xd4, 0x3a, 0x26, 0xed, 0x8e, 0x28, 0x7f, 0x09,
		0xeb, 0xc7, 0x25, 0x7c, 0xb8, 0x5f, 0x2c, 0x1d, 0x1b, 0x6a, 0xc1, 0xc0, 0x4a, 0xb5, 0xa2, 0x18,
		0xe5, 0x52, 0x51, 0x95, 0x4f, 0x22, 0x91, 0x7c, 0x0b, 0xdf, 0x0c, 0x45, 0x49, 0x45, 0x66, 0x2d,
		0x54, 0xcb, 0x45, 0x55, 0x66, 0x6f, 0xdd, 0x97, 0xd4, 0xa2, 0x52, 0x30, 0x4a, 0x5a, 0xf1, 0x44,
		0x14, 0xd0, 0x57, 0xb0, 0x31, 0x2e, 0x53, 0x4c, 0xa1, 0x4d, 0x78, 0x34, 0x14, 0x8d, 0x95, 0xb7,
		0x8a, 0xac, 0x47, 0xe0, 0x69, 0xb4, 0x03, 0x9b, 0x43, 0xe1, 0xba, 0x82, 0x8f, 0x54, 0x8d, 0x27,
		0x74, 0xdf, 0xc0, 0x55, 0x4d, 0x53, 0xb5, 0x37, 0xe2, 0x44, 0xfe, 0x0a, 0x16, 0x07, 0xbe, 0xe3,
		0xd0, 0x5d, 0xb8, 0x2d, 0xe3, 0x92, 0x66, 0x94, 0xde, 0x29, 0xb8, 0x28, 0x95, 0x07, 0xf7, 0x3f,
		0x04, 0x50, 0x39, 0x54, 0xcb, 0xe5, 0xf0, 0x10, 0xe2, 0x00, 0x7b, 0xd5, 0xfd, 0x7d, 0x05, 0x1b,
		0x25, 0x4d, 0x11, 0x53, 0xf9, 0xdf, 0x0b, 0xb0, 0x38, 0x30, 0x28, 0x99, 0xeb, 0xb2, 0x84, 0x15,
		0x4d, 0x37, 0xe4, 0x62, 0x29, 0x2e, 0xf7, 0x43, 0x00, 0xd2, 0x9e, 0xa4, 0x15, 0x4a, 0x9a, 0x28,
		0xa0, 0x07, 0x90, 0x8b, 0x03, 0x04, 0x65, 0x18, 0x54, 0xa5, 0x98, 0x42, 0xf7, 0xe0, 0xf3, 0x38,
		0x5c, 0x27, 0x51, 0x62, 0x3a, 0xff, 0xaf, 0x14, 0x7c, 0x36, 0xea, 0xb7, 0x1b, 0x56, 0xfc, 0x9d,
		0x8c, 0x2b, 0xef, 0x15, 0xb9, 0xaa, 0xb3, 0x72, 0xf3, 0xfd, 0xb1, 0xa2, 0xab, 0x56, 0x22, 0x91,
		0x47, 0x4f, 0x73, 0x08, 0x58, 0x2e, 0x1d, 0x95, 0x8b, 0x8a, 0xce, 0x73, 0x98, 0x87, 0x07, 0x49,
		0x70, 0xbf, 0xb6, 0xc4, 0x54, 0x4f, 0x59, 0x0d, 0x73, 0xcd, 0xf7, 0xcd, 0xba, 0x10, 0x6d, 0x41,
		0x3e, 0x09, 0xdd, 0xc9, 0x42, 0x41, 0x9c, 0x40, 0xdf, 0xc0, 0xd7, 0xc9, 0x81, 0x6b, 0xba, 0xaa,
		0x55, 0x95, 0x82, 0x21, 0x55, 0x0c, 0x4d, 0x39, 0x16, 0x27, 0xc7, 0xd9, 0xae, 0xae, 0x1e, 0xb1,
		0xd6, 0xa8, 0xea, 0xe2, 0x54, 0xfe, 0x6f, 0x02, 0xdc, 0x94, 0x1d, 0x9b, 0x5a, 0x76, 0x9b, 0x48,
		0x9e, 0x46, 0x3e, 0xaa, 0xfe, 0x1d, 0xcc, 0x71, 0xd1, 0x7d, 0xb8, 0x17, 0xfa, 0x0f, 0xdc, 0x1b,
		0xaa, 0xa6, 0xea, 0xaa, 0xa4, 0x97, 0x70, 0x24, 0xbf, 0x23, 0x61, 0x4c, 0x0b, 0x0a, 0x0a, 0xf6,
		0xf3, 0x3a, 0x1c, 0x86, 0x15, 0x1d, 0x9f, 0x04, 0xa5, 0xe0, 0x8b, 0xdb, 0x70, 0x2c, 0xaf, 0xf0,
		0x50, 0x7a, 0xc4, 0x74, 0xfe, 0x0f, 0x02, 0x64, 0x82, 0x0f, 0x73, 0xfe, 0xdd, 0x96, 0x85, 0x65,
		0xb6, 0xc1, 0x52, 0x55, 0x37, 0xf4, 0x93, 0xb2, 0xd2, 0x5b, 0xc3, 0x3d, 0x2b, 0x5c, 0x99, 0x0c,
		0xbd, 0xe4, 0x67, 0xc7, 0xef, 0x9f, 0x5e, 0x40, 0xf0, 0x16, 0x86, 0xe1, 0x60, 0x31, 0x35, 0x12,
		0xe3, 0xfb, 0x49, 0xa3, 0x35, 0xb8, 0xd9, 0x83, 0x39, 0x50, 0x24, 0xac, 0xef, 0x29, 0x92, 0x2e,
		0x4e, 0xe4, 0x7f, 0x27, 0xc0, 0xad, 0x50, 0x84, 0x75, 0x36, 0xd3, 0xad, 0x26, 0xa9, 0x97, 0xda,
		0x54, 0x36, 0xdb, 0x1e, 0x41, 0x8f, 0xe0, 0x7e, 0x47, 0x3e, 0x75, 0xa9, 0x72, 0xd8, 0x3d, 0x2b,
		0x43, 0x96, 0x98, 0xae, 0x74, 0x77, 0x93, 0x08, 0x0d, 0x42, 0x10, 0x05, 0xf4, 0x10, 0xbe, 0x18,
		0x0d, 0xc5, 0x4a, 0x45, 0xd1, 0xc5, 0x54, 0xfe, 0x1f, 0x19, 0x58, 0x8d, 0x06, 0xc7, 0xbe, 0x6e,
		0x48, 0xdd, 0x0f, 0xed, 0x01, 0xe4, 0x7a, 0x9d, 0x04, 0x12, 0xdb, 0x1f, 0xd7, 0x0e, 0x6c, 0x8e,
		0xc0, 0x55, 0xb5, 0x03, 0x49, 0x2b, 0xb0, 0xe7, 0x10, 0x24, 0x0a, 0xe8, 0x35, 0xec, 0x8e, 0xa0,
		0xec, 0x49, 0x85, 0x6e, 0x96, 0x3b, 0xc3, 0x4e, 0xd2, 0x75, 0xac, 0xee, 0x55, 0x75, 0xa5, 0x22,
		0xa6, 0x90, 0x02, 0x52, 0x82, 0x83, 0x5e, 0x1d, 0x8a, 0x75, 0x93, 0x46, 0x2f, 0xe0, 0x69, 0x52,
		0x1c, 0x7e, 0xc9, 0xa8, 0x47, 0x0a, 0x8e, 0x52, 0x27, 0xd0, 0x4b, 0x78, 0x96, 0x40, 0x0d, 0xde,
		0x3c, 0xc0, 0x9d, 0x44, 0xbb, 0xf0, 0x3c, 0x31, 0x7a, 0xb9, 0x84, 0x0b, 0xc6, 0x91, 0x84, 0x0f,
		0x7b, 0xc9, 0x53, 0x48, 0x05, 0x25, 0xe9, 0xc5, 0x81, 0xba, 0x19, 0x31, 0xba, 0x10, 0x71, 0x75,
		0x63, 0x8c, 0x2c, 0x32, 0x43, 0x82, 0x9b, 0x69, 0xf4, 0x06, 0xe4, 0xf1, 0x52, 0x31, 0xda, 0xd1,
		0x0c, 0x7a, 0x0f, 0xfa, 0xf5, 0x4e, 0x55, 0x79, 0xaf, 0x2b, 0x58, 0x93, 0x92, 0x3c, 0x03, 0x7a,
		0x05, 0x2f, 0x12, 0x93, 0xd6, 0xab, 0x3f, 0x11, 0x7a, 0x06, 0x3d, 0x87, 0x27, 0x23, 0xe8, 0xd1,
		0x1a, 0xe9, 0x5e, 0x48, 0xd4, 0x82, 0x38, 0x8b, 0x9e, 0xc2, 0xce, 0x08, 0x22, 0xef, 0x42, 0xa3,
		0xa2, 0xab, 0xf2, 0xe1, 0x89, 0xbf, 0x5c, 0x54, 0x2b, 0xba, 0x38, 0x87, 0x7e, 0x04, 0x3f, 0x18,
		0x41, 0xeb, 0x6c, 0x96, 0xfd, 0xa1, 0xe0, 0x48, 0x8b, 0x31, 0x58, 0x15, 0x2b, 0xe2, 0xfc, 0x18,
		0x67, 0x52, 0x51, 0xdf, 0x24, 0x67, 0x6e, 0x01, 0xc9, 0xf0, 0x7a, 0xac, 0x16, 0x91, 0x0f, 0xd4,
		0x62, 0x21, 0xde, 0x89, 0x88, 0x9e, 0xc0, 0xf6, 0x08, 0x27, 0xfb, 0x25, 0x2c, 0x2b, 0xc1, 0xc4,
		0xea, 0x88, 0xc4, 0x22, 0x7a, 0x06, 0x8f, 0x47, 0x91, 0x24, 0xb5, 0xc8, 0xae, 0x3d, 0xfd, 0x3c,
		0xc4, 0xc6, 0xe8, 0x78, 0x5b, 0x57, 0xb5, 0x72, 0x55, 0x37, 0x2a, 0xea, 0x77, 0x8a, 0xb8, 0xc4,
		0xc6, 0x68, 0xe2, 0x49, 0x85, 0xb9, 0x12, 0x97, 0x07, 0xc5, 0x78, 0xe0, 0x25, 0x7b, 0xaa, 0x26,
		0xe1, 0x13, 0x71, 0x25, 0xa1, 0xf6, 0x06, 0x85, 0xae, 0xa7, 0x84, 0x6e, 0x8e, 0xb3, 0x1d, 0x45,
		0xc2, 0xf2, 0x41, 0x34, 0xe3, 0xab, 0x6c, 0xea, 0xdc, 0xe3, 0x3f, 0x06, 0x0d, 0xdc, 0xab, 0xa2,
		0x12, 0xbf, 0x03, 0x9b, 0xfe, 0xb9, 0xc5, 0x54, 0xc1, 0x10, 0xb5, 0xdf, 0x83, 0x1f, 0x8e, 0x47,
		0xe9, 0xac, 0x4b, 0x45, 0xac, 0x48, 0x85, 0x93, 0xce, 0x6d, 0x58, 0xc8, 0xff, 0x26, 0x05, 0x79,
		0xd9, 0xb4, 0x6b, 0xa4, 0x11, 0xfe, 0x08, 0x3d, 0x32, 0xca, 0x5d, 0x78, 0x3e, 0x46, 0xbf, 0x0f,
		0x89, 0xf7, 0x18, 0x2a, 0xd7, 0x25, 0x57, 0xb5, 0x43, 0xad, 0x74, 0xac, 0x8d, 0x22, 0x88, 0x02,
		0xd2, 0xe0, 0xed, 0x75, 0x1d, 0x0f, 0xa4, 0xa4, 0x7b, 0x0f, 0x4d, 0xf1, 0xa4, 0x54, 0xac, 0x73,
		0xfe, 0x8b, 0xfc, 0x78, 0x49, 0x09, 0xca, 0xf8, 0x3f, 0x4b, 0xca, 0x75, 0xc9, 0x63, 0x27, 0xe5,
		0xba, 0x8e, 0x47, 0x25, 0x65, 0xef, 0xa7, 0xb0, 0x5a, 0x73, 0x9a, 0x71, 0x3f, 0x70, 0xec, 0xcd,
		0x85, 0xe9, 0x29, 0xb3, 0x2f, 0xfc, 0xb2, 0xf0, 0xdd, 0xce, 0xb9, 0x45, 0x2f, 0xda, 0xa7, 0x5b,
		0x35, 0xa7, 0xb9, 0x1d, 0xfd, 0xb7, 0xfb, 0xa6, 0x55, 0x6f, 0x6c, 0x9f, 0x3b, 0xfe, 0xbf, 0xf1,
		0x83, 0xff, 0xc1, 0xef, 0x9a, 0x2d, 0xeb, 0x72, 0xe7, 0x74, 0x8a, 0xdb, 0x9e, 0xfc, 0x3b, 0x00,
		0x00, 0xff, 0xff, 0x11, 0x01, 0x0c, 0x12, 0x43, 0x20, 0x00, 0x00,
	},
	// uber/cadence/api/v1/query.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdf, 0x6f, 0x93, 0x50,
		0x18, 0x95, 0x9a, 0x2c, 0xd9, 0xb7, 0x55, 0xc9, 0x9d, 0xc6, 0xda, 0xec, 0x47, 0xd3, 0xed, 0x61,
		0x69, 0x14, 0xec, 0xf4, 0x6d, 0x4f, 0x8c, 0x5e, 0x0d, 0x86, 0x01, 0x03, 0xda, 0xa5, 0x7b, 0x21,
		0x94, 0x5e, 0x2b, 0x8e, 0x72, 0xf1, 0x5e, 0x68, 0xed, 0x3f, 0xe0, 0xbb, 0x7f, 0x8d, 0xff, 0x9e,
		0x81, 0x52, 0x5b, 0x2d, 0x33, 0xbe, 0x7d, 0x9c, 0xef, 0x1c, 0xce, 0x39, 0xb9, 0xf9, 0xe0, 0x24,
		0x1b, 0x11, 0x26, 0x07, 0xfe, 0x98, 0xc4, 0x01, 0x91, 0xfd, 0x24, 0x94, 0x67, 0x5d, 0xf9, 0x6b,
		0x46, 0xd8, 0x42, 0x4a, 0x18, 0x4d, 0x29, 0x3a, 0xc8, 0x09, 0x52, 0x49, 0x90, 0xfc, 0x24, 0x94,
		0x66, 0xdd, 0x66, 0xab, 0x4a, 0x15, 0xd0, 0xe9, 0x94, 0xc6, 0x4b, 0x59, 0xb3, 0x5d, 0xc5, 0x98,
		0x53, 0x76, 0xff, 0x29, 0xa2, 0xf3, 0x25, 0xa7, 0x7d, 0x0f, 0xf5, 0xdb, 0x12, 0xb9, 0xc9, 0x1d,
		0xd1, 0x11, 0x40, 0x61, 0xed, 0xa5, 0x8b, 0x84, 0x34, 0x84, 0x96, 0x70, 0xbe, 0x6b, 0xef, 0x16,
		0x88, 0xbb, 0x48, 0x08, 0xba, 0x5c, 0xad, 0x7d, 0x36, 0xe1, 0x8d, 0x5a, 0x4b, 0x38, 0xdf, 0xbb,
		0x38, 0x94, 0x2a, 0xf2, 0x49, 0x96, 0xbf, 0x88, 0xa8, 0x3f, 0x2e, 0xc5, 0x0a, 0x9b, 0xf0, 0xf6,
		0x4f, 0x01, 0x0e, 0xfe, 0x70, 0xb3, 0x09, 0xcf, 0xa2, 0x14, 0x61, 0xd8, 0x63, 0xc5, 0xb4, 0x36,
		0x7d, 0x72, 0x71, 0x56, 0xf9, 0xd7, 0x0d, 0x59, 0x9e, 0xc7, 0x06, 0xf6, 0x7b, 0x46, 0xef, 0x60,
		0xc7, 0x8f, 0xf9, 0x9c, 0xb0, 0xff, 0xca, 0x55, 0x72, 0xd1, 0x29, 0xd4, 0x09, 0x63, 0x94, 0x79,
		0x53, 0xc2, 0xb9, 0x3f, 0x21, 0x8d, 0xc7, 0x45, 0xe7, 0xfd, 0x02, 0xbc, 0x5e, 0x62, 0x6d, 0x02,
		0xf5, 0xd2, 0xf9, 0x0b, 0x09, 0x52, 0x32, 0x46, 0x2e, 0xec, 0x07, 0x11, 0xe5, 0xc4, 0xe3, 0xa9,
		0x9f, 0x66, 0xbc, 0xcc, 0xdc, 0xad, 0x74, 0x5c, 0x55, 0xc6, 0xdf, 0x48, 0x90, 0xa5, 0x21, 0x8d,
		0xd5, 0x5c, 0xe9, 0x14, 0x42, 0x7b, 0x2f, 0x58, 0x7f, 0x74, 0x62, 0x78, 0xfa, 0x57, 0x41, 0x74,
		0x04, 0x2f, 0x6f, 0xfa, 0xd8, 0x1e, 0x7a, 0x36, 0x76, 0xfa, 0xba, 0xeb, 0xb9, 0x43, 0x0b, 0x7b,
		0x9a, 0x31, 0x50, 0x74, 0xad, 0x27, 0x3e, 0x42, 0xc7, 0xd0, 0xdc, 0x5e, 0x2b, 0x86, 0x73, 0x8b,
		0x6d, 0xdc, 0x13, 0x05, 0x74, 0x08, 0x8d, 0xed, 0xfd, 0x7b, 0x45, 0xd3, 0x71, 0x4f, 0xac, 0x75,
		0x7e, 0x08, 0xf0, 0x6c, 0xa3, 0x97, 0x4a, 0xe3, 0x71, 0x98, 0x07, 0x44, 0x6d, 0x38, 0x5e, 0xc9,
		0x3e, 0x62, 0xd5, 0xf5, 0x54, 0xd3, 0xe8, 0x69, 0xae, 0x66, 0x1a, 0x1b, 0xd6, 0xa7, 0x70, 0xf2,
		0x00, 0xc7, 0x30, 0x5d, 0xcf, 0xb4, 0xb0, 0x21, 0x0a, 0xe8, 0x0d, 0xbc, 0xfa, 0x07, 0x49, 0x35,
		0xaf, 0x2d, 0x1d, 0xbb, 0xb8, 0xe7, 0xa9, 0x3a, 0x56, 0x0c, 0x7d, 0x28, 0xd6, 0x3a, 0xdf, 0x05,
		0x78, 0x5e, 0x64, 0x52, 0x69, 0xcc, 0x43, 0x9e, 0x92, 0x38, 0x58, 0xe8, 0x64, 0x46, 0xa2, 0xb5,
		0xa1, 0x6a, 0x1a, 0x8e, 0xe6, 0xb8, 0xd8, 0x50, 0x87, 0x9e, 0x8e, 0x07, 0x58, 0xdf, 0x48, 0x75,
		0x06, 0xad, 0x87, 0x48, 0x78, 0x80, 0x0d, 0xb7, 0xaf, 0xe8, 0xa2, 0xb0, 0xee, 0xb7, 0xcd, 0x72,
		0x5c, 0xdb, 0x34, 0x3e, 0x88, 0xb5, 0xab, 0x3b, 0x78, 0x11, 0xd0, 0x69, 0xd5, 0x8b, 0x5e, 0x41,
		0x11, 0xd0, 0xca, 0x2f, 0xc8, 0x12, 0xee, 0xba, 0x93, 0x30, 0xfd, 0x9c, 0x8d, 0xa4, 0x80, 0x4e,
		0xe5, 0xcd, 0x93, 0x7b, 0x1d, 0x8e, 0x23, 0x79, 0x42, 0xe5, 0xe2, 0xd2, 0xca, 0xfb, 0xbb, 0xf4,
		0x93, 0x70, 0xd6, 0x1d, 0xed, 0x14, 0xd8, 0xdb, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x69,
		0x28, 0x5b, 0xfb, 0x03, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) WorkflowAPIYARPCClient {
			return NewWorkflowAPIYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
