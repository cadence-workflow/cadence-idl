// The MIT License (MIT)
// 
// Copyright (c) 2021 Uber Technologies, Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: uber/cadence/api/v1/service_worker.proto

package apiv1

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// WorkerAPIYARPCClient is the YARPC client-side interface for the WorkerAPI service.
type WorkerAPIYARPCClient interface {
	PollForDecisionTask(context.Context, *PollForDecisionTaskRequest, ...yarpc.CallOption) (*PollForDecisionTaskResponse, error)
	RespondDecisionTaskCompleted(context.Context, *RespondDecisionTaskCompletedRequest, ...yarpc.CallOption) (*RespondDecisionTaskCompletedResponse, error)
	RespondDecisionTaskFailed(context.Context, *RespondDecisionTaskFailedRequest, ...yarpc.CallOption) (*RespondDecisionTaskFailedResponse, error)
	PollForActivityTask(context.Context, *PollForActivityTaskRequest, ...yarpc.CallOption) (*PollForActivityTaskResponse, error)
	RespondActivityTaskCompleted(context.Context, *RespondActivityTaskCompletedRequest, ...yarpc.CallOption) (*RespondActivityTaskCompletedResponse, error)
	RespondActivityTaskCompletedByID(context.Context, *RespondActivityTaskCompletedByIDRequest, ...yarpc.CallOption) (*RespondActivityTaskCompletedByIDResponse, error)
	RespondActivityTaskFailed(context.Context, *RespondActivityTaskFailedRequest, ...yarpc.CallOption) (*RespondActivityTaskFailedResponse, error)
	RespondActivityTaskFailedByID(context.Context, *RespondActivityTaskFailedByIDRequest, ...yarpc.CallOption) (*RespondActivityTaskFailedByIDResponse, error)
	RespondActivityTaskCanceled(context.Context, *RespondActivityTaskCanceledRequest, ...yarpc.CallOption) (*RespondActivityTaskCanceledResponse, error)
	RespondActivityTaskCanceledByID(context.Context, *RespondActivityTaskCanceledByIDRequest, ...yarpc.CallOption) (*RespondActivityTaskCanceledByIDResponse, error)
	RecordActivityTaskHeartbeat(context.Context, *RecordActivityTaskHeartbeatRequest, ...yarpc.CallOption) (*RecordActivityTaskHeartbeatResponse, error)
	RecordActivityTaskHeartbeatByID(context.Context, *RecordActivityTaskHeartbeatByIDRequest, ...yarpc.CallOption) (*RecordActivityTaskHeartbeatByIDResponse, error)
	RespondQueryTaskCompleted(context.Context, *RespondQueryTaskCompletedRequest, ...yarpc.CallOption) (*RespondQueryTaskCompletedResponse, error)
	ResetStickyTaskList(context.Context, *ResetStickyTaskListRequest, ...yarpc.CallOption) (*ResetStickyTaskListResponse, error)
}

func newWorkerAPIYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) WorkerAPIYARPCClient {
	return &_WorkerAPIYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.cadence.api.v1.WorkerAPI",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewWorkerAPIYARPCClient builds a new YARPC client for the WorkerAPI service.
func NewWorkerAPIYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) WorkerAPIYARPCClient {
	return newWorkerAPIYARPCClient(clientConfig, nil, options...)
}

// WorkerAPIYARPCServer is the YARPC server-side interface for the WorkerAPI service.
type WorkerAPIYARPCServer interface {
	PollForDecisionTask(context.Context, *PollForDecisionTaskRequest) (*PollForDecisionTaskResponse, error)
	RespondDecisionTaskCompleted(context.Context, *RespondDecisionTaskCompletedRequest) (*RespondDecisionTaskCompletedResponse, error)
	RespondDecisionTaskFailed(context.Context, *RespondDecisionTaskFailedRequest) (*RespondDecisionTaskFailedResponse, error)
	PollForActivityTask(context.Context, *PollForActivityTaskRequest) (*PollForActivityTaskResponse, error)
	RespondActivityTaskCompleted(context.Context, *RespondActivityTaskCompletedRequest) (*RespondActivityTaskCompletedResponse, error)
	RespondActivityTaskCompletedByID(context.Context, *RespondActivityTaskCompletedByIDRequest) (*RespondActivityTaskCompletedByIDResponse, error)
	RespondActivityTaskFailed(context.Context, *RespondActivityTaskFailedRequest) (*RespondActivityTaskFailedResponse, error)
	RespondActivityTaskFailedByID(context.Context, *RespondActivityTaskFailedByIDRequest) (*RespondActivityTaskFailedByIDResponse, error)
	RespondActivityTaskCanceled(context.Context, *RespondActivityTaskCanceledRequest) (*RespondActivityTaskCanceledResponse, error)
	RespondActivityTaskCanceledByID(context.Context, *RespondActivityTaskCanceledByIDRequest) (*RespondActivityTaskCanceledByIDResponse, error)
	RecordActivityTaskHeartbeat(context.Context, *RecordActivityTaskHeartbeatRequest) (*RecordActivityTaskHeartbeatResponse, error)
	RecordActivityTaskHeartbeatByID(context.Context, *RecordActivityTaskHeartbeatByIDRequest) (*RecordActivityTaskHeartbeatByIDResponse, error)
	RespondQueryTaskCompleted(context.Context, *RespondQueryTaskCompletedRequest) (*RespondQueryTaskCompletedResponse, error)
	ResetStickyTaskList(context.Context, *ResetStickyTaskListRequest) (*ResetStickyTaskListResponse, error)
}

type buildWorkerAPIYARPCProceduresParams struct {
	Server      WorkerAPIYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildWorkerAPIYARPCProcedures(params buildWorkerAPIYARPCProceduresParams) []transport.Procedure {
	handler := &_WorkerAPIYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.cadence.api.v1.WorkerAPI",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "PollForDecisionTask",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.PollForDecisionTask,
							NewRequest:  newWorkerAPIServicePollForDecisionTaskYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondDecisionTaskCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondDecisionTaskCompleted,
							NewRequest:  newWorkerAPIServiceRespondDecisionTaskCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondDecisionTaskFailed",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondDecisionTaskFailed,
							NewRequest:  newWorkerAPIServiceRespondDecisionTaskFailedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "PollForActivityTask",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.PollForActivityTask,
							NewRequest:  newWorkerAPIServicePollForActivityTaskYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCompleted,
							NewRequest:  newWorkerAPIServiceRespondActivityTaskCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCompletedByID",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCompletedByID,
							NewRequest:  newWorkerAPIServiceRespondActivityTaskCompletedByIDYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskFailed",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskFailed,
							NewRequest:  newWorkerAPIServiceRespondActivityTaskFailedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskFailedByID",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskFailedByID,
							NewRequest:  newWorkerAPIServiceRespondActivityTaskFailedByIDYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCanceled",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCanceled,
							NewRequest:  newWorkerAPIServiceRespondActivityTaskCanceledYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCanceledByID",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCanceledByID,
							NewRequest:  newWorkerAPIServiceRespondActivityTaskCanceledByIDYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RecordActivityTaskHeartbeat",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RecordActivityTaskHeartbeat,
							NewRequest:  newWorkerAPIServiceRecordActivityTaskHeartbeatYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RecordActivityTaskHeartbeatByID",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RecordActivityTaskHeartbeatByID,
							NewRequest:  newWorkerAPIServiceRecordActivityTaskHeartbeatByIDYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondQueryTaskCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondQueryTaskCompleted,
							NewRequest:  newWorkerAPIServiceRespondQueryTaskCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ResetStickyTaskList",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ResetStickyTaskList,
							NewRequest:  newWorkerAPIServiceResetStickyTaskListYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// BuildWorkerAPIYARPCProcedures prepares an implementation of the WorkerAPI service for YARPC registration.
func BuildWorkerAPIYARPCProcedures(server WorkerAPIYARPCServer) []transport.Procedure {
	return buildWorkerAPIYARPCProcedures(buildWorkerAPIYARPCProceduresParams{Server: server})
}

// FxWorkerAPIYARPCClientParams defines the input
// for NewFxWorkerAPIYARPCClient. It provides the
// paramaters to get a WorkerAPIYARPCClient in an
// Fx application.
type FxWorkerAPIYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxWorkerAPIYARPCClientResult defines the output
// of NewFxWorkerAPIYARPCClient. It provides a
// WorkerAPIYARPCClient to an Fx application.
type FxWorkerAPIYARPCClientResult struct {
	fx.Out

	Client WorkerAPIYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxWorkerAPIYARPCClient provides a WorkerAPIYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    apiv1.NewFxWorkerAPIYARPCClient("service-name"),
//    ...
//  )
func NewFxWorkerAPIYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxWorkerAPIYARPCClientParams) FxWorkerAPIYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxWorkerAPIYARPCClientResult{
			Client: newWorkerAPIYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxWorkerAPIYARPCProceduresParams defines the input
// for NewFxWorkerAPIYARPCProcedures. It provides the
// paramaters to get WorkerAPIYARPCServer procedures in an
// Fx application.
type FxWorkerAPIYARPCProceduresParams struct {
	fx.In

	Server      WorkerAPIYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxWorkerAPIYARPCProceduresResult defines the output
// of NewFxWorkerAPIYARPCProcedures. It provides
// WorkerAPIYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxWorkerAPIYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxWorkerAPIYARPCProcedures provides WorkerAPIYARPCServer procedures to an Fx application.
// It expects a WorkerAPIYARPCServer to be present in the container.
//
//  fx.Provide(
//    apiv1.NewFxWorkerAPIYARPCProcedures(),
//    ...
//  )
func NewFxWorkerAPIYARPCProcedures() interface{} {
	return func(params FxWorkerAPIYARPCProceduresParams) FxWorkerAPIYARPCProceduresResult {
		return FxWorkerAPIYARPCProceduresResult{
			Procedures: buildWorkerAPIYARPCProcedures(buildWorkerAPIYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.cadence.api.v1.WorkerAPI",
				FileDescriptors: yarpcFileDescriptorClosure00684e887839a48c,
			},
		}
	}
}

type _WorkerAPIYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_WorkerAPIYARPCCaller) PollForDecisionTask(ctx context.Context, request *PollForDecisionTaskRequest, options ...yarpc.CallOption) (*PollForDecisionTaskResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "PollForDecisionTask", request, newWorkerAPIServicePollForDecisionTaskYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*PollForDecisionTaskResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServicePollForDecisionTaskYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RespondDecisionTaskCompleted(ctx context.Context, request *RespondDecisionTaskCompletedRequest, options ...yarpc.CallOption) (*RespondDecisionTaskCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondDecisionTaskCompleted", request, newWorkerAPIServiceRespondDecisionTaskCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondDecisionTaskCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRespondDecisionTaskCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RespondDecisionTaskFailed(ctx context.Context, request *RespondDecisionTaskFailedRequest, options ...yarpc.CallOption) (*RespondDecisionTaskFailedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondDecisionTaskFailed", request, newWorkerAPIServiceRespondDecisionTaskFailedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondDecisionTaskFailedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRespondDecisionTaskFailedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) PollForActivityTask(ctx context.Context, request *PollForActivityTaskRequest, options ...yarpc.CallOption) (*PollForActivityTaskResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "PollForActivityTask", request, newWorkerAPIServicePollForActivityTaskYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*PollForActivityTaskResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServicePollForActivityTaskYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RespondActivityTaskCompleted(ctx context.Context, request *RespondActivityTaskCompletedRequest, options ...yarpc.CallOption) (*RespondActivityTaskCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCompleted", request, newWorkerAPIServiceRespondActivityTaskCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RespondActivityTaskCompletedByID(ctx context.Context, request *RespondActivityTaskCompletedByIDRequest, options ...yarpc.CallOption) (*RespondActivityTaskCompletedByIDResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCompletedByID", request, newWorkerAPIServiceRespondActivityTaskCompletedByIDYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCompletedByIDResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskCompletedByIDYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RespondActivityTaskFailed(ctx context.Context, request *RespondActivityTaskFailedRequest, options ...yarpc.CallOption) (*RespondActivityTaskFailedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskFailed", request, newWorkerAPIServiceRespondActivityTaskFailedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskFailedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskFailedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RespondActivityTaskFailedByID(ctx context.Context, request *RespondActivityTaskFailedByIDRequest, options ...yarpc.CallOption) (*RespondActivityTaskFailedByIDResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskFailedByID", request, newWorkerAPIServiceRespondActivityTaskFailedByIDYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskFailedByIDResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskFailedByIDYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RespondActivityTaskCanceled(ctx context.Context, request *RespondActivityTaskCanceledRequest, options ...yarpc.CallOption) (*RespondActivityTaskCanceledResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCanceled", request, newWorkerAPIServiceRespondActivityTaskCanceledYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCanceledResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskCanceledYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RespondActivityTaskCanceledByID(ctx context.Context, request *RespondActivityTaskCanceledByIDRequest, options ...yarpc.CallOption) (*RespondActivityTaskCanceledByIDResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCanceledByID", request, newWorkerAPIServiceRespondActivityTaskCanceledByIDYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCanceledByIDResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskCanceledByIDYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RecordActivityTaskHeartbeat(ctx context.Context, request *RecordActivityTaskHeartbeatRequest, options ...yarpc.CallOption) (*RecordActivityTaskHeartbeatResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RecordActivityTaskHeartbeat", request, newWorkerAPIServiceRecordActivityTaskHeartbeatYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RecordActivityTaskHeartbeatResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRecordActivityTaskHeartbeatYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RecordActivityTaskHeartbeatByID(ctx context.Context, request *RecordActivityTaskHeartbeatByIDRequest, options ...yarpc.CallOption) (*RecordActivityTaskHeartbeatByIDResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RecordActivityTaskHeartbeatByID", request, newWorkerAPIServiceRecordActivityTaskHeartbeatByIDYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RecordActivityTaskHeartbeatByIDResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRecordActivityTaskHeartbeatByIDYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) RespondQueryTaskCompleted(ctx context.Context, request *RespondQueryTaskCompletedRequest, options ...yarpc.CallOption) (*RespondQueryTaskCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondQueryTaskCompleted", request, newWorkerAPIServiceRespondQueryTaskCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondQueryTaskCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceRespondQueryTaskCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkerAPIYARPCCaller) ResetStickyTaskList(ctx context.Context, request *ResetStickyTaskListRequest, options ...yarpc.CallOption) (*ResetStickyTaskListResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ResetStickyTaskList", request, newWorkerAPIServiceResetStickyTaskListYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ResetStickyTaskListResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkerAPIServiceResetStickyTaskListYARPCResponse, responseMessage)
	}
	return response, err
}

type _WorkerAPIYARPCHandler struct {
	server WorkerAPIYARPCServer
}

func (h *_WorkerAPIYARPCHandler) PollForDecisionTask(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *PollForDecisionTaskRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*PollForDecisionTaskRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServicePollForDecisionTaskYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.PollForDecisionTask(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RespondDecisionTaskCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondDecisionTaskCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondDecisionTaskCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRespondDecisionTaskCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondDecisionTaskCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RespondDecisionTaskFailed(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondDecisionTaskFailedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondDecisionTaskFailedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRespondDecisionTaskFailedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondDecisionTaskFailed(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) PollForActivityTask(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *PollForActivityTaskRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*PollForActivityTaskRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServicePollForActivityTaskYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.PollForActivityTask(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RespondActivityTaskCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RespondActivityTaskCompletedByID(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCompletedByIDRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCompletedByIDRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskCompletedByIDYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCompletedByID(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RespondActivityTaskFailed(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskFailedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskFailedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskFailedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskFailed(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RespondActivityTaskFailedByID(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskFailedByIDRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskFailedByIDRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskFailedByIDYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskFailedByID(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RespondActivityTaskCanceled(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCanceledRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCanceledRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskCanceledYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCanceled(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RespondActivityTaskCanceledByID(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCanceledByIDRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCanceledByIDRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRespondActivityTaskCanceledByIDYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCanceledByID(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RecordActivityTaskHeartbeat(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RecordActivityTaskHeartbeatRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RecordActivityTaskHeartbeatRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRecordActivityTaskHeartbeatYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RecordActivityTaskHeartbeat(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RecordActivityTaskHeartbeatByID(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RecordActivityTaskHeartbeatByIDRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RecordActivityTaskHeartbeatByIDRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRecordActivityTaskHeartbeatByIDYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RecordActivityTaskHeartbeatByID(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) RespondQueryTaskCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondQueryTaskCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondQueryTaskCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceRespondQueryTaskCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondQueryTaskCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkerAPIYARPCHandler) ResetStickyTaskList(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ResetStickyTaskListRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ResetStickyTaskListRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkerAPIServiceResetStickyTaskListYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ResetStickyTaskList(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newWorkerAPIServicePollForDecisionTaskYARPCRequest() proto.Message {
	return &PollForDecisionTaskRequest{}
}

func newWorkerAPIServicePollForDecisionTaskYARPCResponse() proto.Message {
	return &PollForDecisionTaskResponse{}
}

func newWorkerAPIServiceRespondDecisionTaskCompletedYARPCRequest() proto.Message {
	return &RespondDecisionTaskCompletedRequest{}
}

func newWorkerAPIServiceRespondDecisionTaskCompletedYARPCResponse() proto.Message {
	return &RespondDecisionTaskCompletedResponse{}
}

func newWorkerAPIServiceRespondDecisionTaskFailedYARPCRequest() proto.Message {
	return &RespondDecisionTaskFailedRequest{}
}

func newWorkerAPIServiceRespondDecisionTaskFailedYARPCResponse() proto.Message {
	return &RespondDecisionTaskFailedResponse{}
}

func newWorkerAPIServicePollForActivityTaskYARPCRequest() proto.Message {
	return &PollForActivityTaskRequest{}
}

func newWorkerAPIServicePollForActivityTaskYARPCResponse() proto.Message {
	return &PollForActivityTaskResponse{}
}

func newWorkerAPIServiceRespondActivityTaskCompletedYARPCRequest() proto.Message {
	return &RespondActivityTaskCompletedRequest{}
}

func newWorkerAPIServiceRespondActivityTaskCompletedYARPCResponse() proto.Message {
	return &RespondActivityTaskCompletedResponse{}
}

func newWorkerAPIServiceRespondActivityTaskCompletedByIDYARPCRequest() proto.Message {
	return &RespondActivityTaskCompletedByIDRequest{}
}

func newWorkerAPIServiceRespondActivityTaskCompletedByIDYARPCResponse() proto.Message {
	return &RespondActivityTaskCompletedByIDResponse{}
}

func newWorkerAPIServiceRespondActivityTaskFailedYARPCRequest() proto.Message {
	return &RespondActivityTaskFailedRequest{}
}

func newWorkerAPIServiceRespondActivityTaskFailedYARPCResponse() proto.Message {
	return &RespondActivityTaskFailedResponse{}
}

func newWorkerAPIServiceRespondActivityTaskFailedByIDYARPCRequest() proto.Message {
	return &RespondActivityTaskFailedByIDRequest{}
}

func newWorkerAPIServiceRespondActivityTaskFailedByIDYARPCResponse() proto.Message {
	return &RespondActivityTaskFailedByIDResponse{}
}

func newWorkerAPIServiceRespondActivityTaskCanceledYARPCRequest() proto.Message {
	return &RespondActivityTaskCanceledRequest{}
}

func newWorkerAPIServiceRespondActivityTaskCanceledYARPCResponse() proto.Message {
	return &RespondActivityTaskCanceledResponse{}
}

func newWorkerAPIServiceRespondActivityTaskCanceledByIDYARPCRequest() proto.Message {
	return &RespondActivityTaskCanceledByIDRequest{}
}

func newWorkerAPIServiceRespondActivityTaskCanceledByIDYARPCResponse() proto.Message {
	return &RespondActivityTaskCanceledByIDResponse{}
}

func newWorkerAPIServiceRecordActivityTaskHeartbeatYARPCRequest() proto.Message {
	return &RecordActivityTaskHeartbeatRequest{}
}

func newWorkerAPIServiceRecordActivityTaskHeartbeatYARPCResponse() proto.Message {
	return &RecordActivityTaskHeartbeatResponse{}
}

func newWorkerAPIServiceRecordActivityTaskHeartbeatByIDYARPCRequest() proto.Message {
	return &RecordActivityTaskHeartbeatByIDRequest{}
}

func newWorkerAPIServiceRecordActivityTaskHeartbeatByIDYARPCResponse() proto.Message {
	return &RecordActivityTaskHeartbeatByIDResponse{}
}

func newWorkerAPIServiceRespondQueryTaskCompletedYARPCRequest() proto.Message {
	return &RespondQueryTaskCompletedRequest{}
}

func newWorkerAPIServiceRespondQueryTaskCompletedYARPCResponse() proto.Message {
	return &RespondQueryTaskCompletedResponse{}
}

func newWorkerAPIServiceResetStickyTaskListYARPCRequest() proto.Message {
	return &ResetStickyTaskListRequest{}
}

func newWorkerAPIServiceResetStickyTaskListYARPCResponse() proto.Message {
	return &ResetStickyTaskListResponse{}
}

var (
	emptyWorkerAPIServicePollForDecisionTaskYARPCRequest               = &PollForDecisionTaskRequest{}
	emptyWorkerAPIServicePollForDecisionTaskYARPCResponse              = &PollForDecisionTaskResponse{}
	emptyWorkerAPIServiceRespondDecisionTaskCompletedYARPCRequest      = &RespondDecisionTaskCompletedRequest{}
	emptyWorkerAPIServiceRespondDecisionTaskCompletedYARPCResponse     = &RespondDecisionTaskCompletedResponse{}
	emptyWorkerAPIServiceRespondDecisionTaskFailedYARPCRequest         = &RespondDecisionTaskFailedRequest{}
	emptyWorkerAPIServiceRespondDecisionTaskFailedYARPCResponse        = &RespondDecisionTaskFailedResponse{}
	emptyWorkerAPIServicePollForActivityTaskYARPCRequest               = &PollForActivityTaskRequest{}
	emptyWorkerAPIServicePollForActivityTaskYARPCResponse              = &PollForActivityTaskResponse{}
	emptyWorkerAPIServiceRespondActivityTaskCompletedYARPCRequest      = &RespondActivityTaskCompletedRequest{}
	emptyWorkerAPIServiceRespondActivityTaskCompletedYARPCResponse     = &RespondActivityTaskCompletedResponse{}
	emptyWorkerAPIServiceRespondActivityTaskCompletedByIDYARPCRequest  = &RespondActivityTaskCompletedByIDRequest{}
	emptyWorkerAPIServiceRespondActivityTaskCompletedByIDYARPCResponse = &RespondActivityTaskCompletedByIDResponse{}
	emptyWorkerAPIServiceRespondActivityTaskFailedYARPCRequest         = &RespondActivityTaskFailedRequest{}
	emptyWorkerAPIServiceRespondActivityTaskFailedYARPCResponse        = &RespondActivityTaskFailedResponse{}
	emptyWorkerAPIServiceRespondActivityTaskFailedByIDYARPCRequest     = &RespondActivityTaskFailedByIDRequest{}
	emptyWorkerAPIServiceRespondActivityTaskFailedByIDYARPCResponse    = &RespondActivityTaskFailedByIDResponse{}
	emptyWorkerAPIServiceRespondActivityTaskCanceledYARPCRequest       = &RespondActivityTaskCanceledRequest{}
	emptyWorkerAPIServiceRespondActivityTaskCanceledYARPCResponse      = &RespondActivityTaskCanceledResponse{}
	emptyWorkerAPIServiceRespondActivityTaskCanceledByIDYARPCRequest   = &RespondActivityTaskCanceledByIDRequest{}
	emptyWorkerAPIServiceRespondActivityTaskCanceledByIDYARPCResponse  = &RespondActivityTaskCanceledByIDResponse{}
	emptyWorkerAPIServiceRecordActivityTaskHeartbeatYARPCRequest       = &RecordActivityTaskHeartbeatRequest{}
	emptyWorkerAPIServiceRecordActivityTaskHeartbeatYARPCResponse      = &RecordActivityTaskHeartbeatResponse{}
	emptyWorkerAPIServiceRecordActivityTaskHeartbeatByIDYARPCRequest   = &RecordActivityTaskHeartbeatByIDRequest{}
	emptyWorkerAPIServiceRecordActivityTaskHeartbeatByIDYARPCResponse  = &RecordActivityTaskHeartbeatByIDResponse{}
	emptyWorkerAPIServiceRespondQueryTaskCompletedYARPCRequest         = &RespondQueryTaskCompletedRequest{}
	emptyWorkerAPIServiceRespondQueryTaskCompletedYARPCResponse        = &RespondQueryTaskCompletedResponse{}
	emptyWorkerAPIServiceResetStickyTaskListYARPCRequest               = &ResetStickyTaskListRequest{}
	emptyWorkerAPIServiceResetStickyTaskListYARPCResponse              = &ResetStickyTaskListResponse{}
)

var yarpcFileDescriptorClosure00684e887839a48c = [][]byte{
	// uber/cadence/api/v1/service_worker.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0x5b, 0x6f, 0xdb, 0xc8,
		0x15, 0x06, 0x7d, 0xf7, 0x91, 0x2f, 0xf2, 0x04, 0x4d, 0x65, 0xe5, 0xe6, 0x68, 0x9b, 0xc4, 0xdb,
		0x6e, 0xa5, 0xc6, 0xbb, 0xcd, 0x66, 0x93, 0x4d, 0x51, 0x5f, 0x62, 0xc4, 0xc5, 0x76, 0xeb, 0x65,
		0xb4, 0xd9, 0x62, 0x0b, 0x84, 0x18, 0x93, 0x63, 0x6b, 0x60, 0x8a, 0xc3, 0x90, 0x43, 0x29, 0x7a,
		0xe9, 0x43, 0x1f, 0x77, 0xfb, 0x50, 0xa0, 0xe8, 0xf6, 0xa5, 0x40, 0x9e, 0xfb, 0x03, 0xfa, 0x6b,
		0xfa, 0xd4, 0xe7, 0xfe, 0x87, 0xa2, 0xe0, 0xcc, 0x90, 0xa2, 0xa4, 0x21, 0x75, 0xe9, 0x83, 0x17,
		0xe8, 0x9b, 0x39, 0xfc, 0xce, 0xe1, 0x99, 0xf3, 0x9d, 0x39, 0xf3, 0xcd, 0x58, 0xb0, 0x1b, 0x9d,
		0x91, 0xa0, 0x61, 0x63, 0x87, 0x78, 0x36, 0x69, 0x60, 0x9f, 0x36, 0x3a, 0x0f, 0x1b, 0x21, 0x09,
		0x3a, 0xd4, 0x26, 0x56, 0x97, 0x05, 0x97, 0x24, 0xa8, 0xfb, 0x01, 0xe3, 0x0c, 0x5d, 0x8b, 0x91,
		0x75, 0x85, 0xac, 0x63, 0x9f, 0xd6, 0x3b, 0x0f, 0xab, 0xb7, 0x2f, 0x18, 0xbb, 0x70, 0x49, 0x43,
		0x40, 0xce, 0xa2, 0xf3, 0x86, 0x13, 0x05, 0x98, 0x53, 0xe6, 0x49, 0xa3, 0xea, 0x9d, 0xe1, 0xf7,
		0x9c, 0xb6, 0x49, 0xc8, 0x71, 0xdb, 0x57, 0x80, 0x11, 0x07, 0xdd, 0x00, 0xfb, 0x3e, 0x09, 0x42,
		0xf5, 0x7e, 0x47, 0x17, 0x9f, 0xcd, 0xda, 0xed, 0xf4, 0x13, 0x35, 0x1d, 0xc2, 0x21, 0x36, 0x0d,
		0xfb, 0x61, 0xdc, 0xd5, 0x61, 0x5a, 0x34, 0xe4, 0x2c, 0xe8, 0x25, 0x91, 0xea, 0x20, 0x6f, 0x22,
		0x92, 0x02, 0xb4, 0xdf, 0xe1, 0x38, 0xbc, 0x74, 0x69, 0xc8, 0x8b, 0x30, 0x71, 0x16, 0xcf, 0x5d,
		0xd6, 0x95, 0x98, 0xda, 0x3f, 0x0c, 0xa8, 0x9e, 0x32, 0xd7, 0x3d, 0x66, 0xc1, 0x91, 0x8a, 0xb2,
		0x89, 0xc3, 0x4b, 0x93, 0xbc, 0x89, 0x48, 0xc8, 0xd1, 0x75, 0x58, 0x72, 0x58, 0x1b, 0x53, 0xaf,
		0x62, 0xec, 0x18, 0xbb, 0xab, 0xa6, 0x7a, 0x42, 0x4f, 0x60, 0x35, 0xfe, 0x98, 0x15, 0x7f, 0xad,
		0x32, 0xb7, 0x63, 0xec, 0x96, 0xf6, 0x6e, 0xd5, 0x35, 0x94, 0xd4, 0x63, 0x67, 0x9f, 0xd1, 0x90,
		0x9b, 0x2b, 0x5c, 0xfd, 0x85, 0xaa, 0xb0, 0x42, 0x1d, 0xe2, 0x71, 0xca, 0x7b, 0x95, 0x79, 0xe1,
		0x35, 0x7d, 0x46, 0x0f, 0x60, 0xf3, 0x8c, 0x7a, 0x38, 0xe8, 0x59, 0x76, 0x8b, 0xd8, 0x97, 0x61,
		0xd4, 0xae, 0x2c, 0x08, 0xc8, 0x86, 0x1c, 0x3e, 0x54, 0xa3, 0xb5, 0xff, 0x2c, 0xc3, 0x0d, 0x6d,
		0xdc, 0xa1, 0xcf, 0xbc, 0x90, 0xa0, 0x5b, 0x00, 0x22, 0x40, 0xce, 0x2e, 0x89, 0x0c, 0x7e, 0xcd,
		0x14, 0x21, 0x37, 0xe3, 0x01, 0xf4, 0x25, 0xa0, 0x24, 0x11, 0x16, 0x79, 0x4b, 0xec, 0x28, 0xae,
		0x12, 0x35, 0x91, 0xfb, 0xda, 0x89, 0x7c, 0xa5, 0xe0, 0xcf, 0x13, 0xb4, 0xb9, 0xd5, 0x1d, 0x1e,
		0x42, 0xc7, 0xb0, 0x9e, 0xba, 0xe5, 0x3d, 0x9f, 0x88, 0xf9, 0x95, 0xf6, 0xee, 0x16, 0x7a, 0x6c,
		0xf6, 0x7c, 0x62, 0xae, 0x75, 0x33, 0x4f, 0xe8, 0x15, 0x6c, 0xfb, 0x01, 0xe9, 0x50, 0x16, 0x85,
		0x56, 0xc8, 0x71, 0xc0, 0x89, 0x63, 0x91, 0x0e, 0xf1, 0xb8, 0x45, 0x1d, 0x91, 0x90, 0xd2, 0xde,
		0x8d, 0xba, 0xac, 0xd5, 0x7a, 0x52, 0xab, 0xf5, 0x13, 0x8f, 0x3f, 0xfa, 0xe8, 0x15, 0x76, 0x23,
		0x62, 0x5e, 0x4f, 0xac, 0x5f, 0x4a, 0xe3, 0xe7, 0xb1, 0xed, 0x89, 0x83, 0x76, 0xa1, 0x3c, 0xe2,
		0x6e, 0x71, 0xc7, 0xd8, 0x9d, 0x37, 0x37, 0xc2, 0x41, 0x64, 0x05, 0x96, 0x31, 0xe7, 0xa4, 0xed,
		0xf3, 0xca, 0x92, 0x00, 0x24, 0x8f, 0xe8, 0x03, 0x40, 0x67, 0xd8, 0xbe, 0x74, 0xd9, 0x85, 0x65,
		0xb3, 0xc8, 0xe3, 0x56, 0x8b, 0x7a, 0xbc, 0xb2, 0x2c, 0x40, 0x65, 0xf5, 0xe6, 0x30, 0x7e, 0xf1,
		0x82, 0x7a, 0x1c, 0x3d, 0x82, 0x65, 0x55, 0xd9, 0x95, 0x15, 0x11, 0xf7, 0x4d, 0x6d, 0x2e, 0x5e,
		0x48, 0x8c, 0x99, 0x80, 0xd1, 0x7d, 0xd8, 0xf4, 0xc8, 0x5b, 0x6e, 0xf9, 0xf8, 0x82, 0x28, 0x12,
		0x57, 0x05, 0x89, 0xeb, 0xf1, 0xf0, 0x29, 0xbe, 0x20, 0x92, 0xc8, 0xc7, 0xb0, 0x28, 0x96, 0x45,
		0x05, 0x84, 0xf7, 0x5a, 0x61, 0xa6, 0xbf, 0x88, 0x91, 0xa6, 0x34, 0x40, 0xaf, 0xe1, 0xe6, 0x68,
		0x09, 0x58, 0xfd, 0xaa, 0x2e, 0x4d, 0x52, 0xd5, 0xdb, 0x23, 0x35, 0x90, 0xbc, 0x42, 0xfb, 0xb0,
		0x11, 0xda, 0x2d, 0xe2, 0x44, 0x2e, 0x71, 0xac, 0xb8, 0xd1, 0x54, 0xd6, 0x84, 0xc7, 0xea, 0x08,
		0x71, 0xcd, 0xa4, 0x0b, 0x99, 0xeb, 0xa9, 0x45, 0x3c, 0x86, 0x9e, 0xc1, 0x5a, 0x42, 0x97, 0x70,
		0xb0, 0x3e, 0xd6, 0x41, 0x49, 0xe1, 0x85, 0xf9, 0x57, 0xb0, 0x1c, 0x4f, 0x95, 0x92, 0xb0, 0xb2,
		0xb1, 0x33, 0xbf, 0x5b, 0xda, 0x7b, 0xa6, 0x9d, 0x4c, 0xc1, 0x32, 0xaa, 0x7f, 0x21, 0xed, 0x9f,
		0x7b, 0x3c, 0x26, 0x47, 0x79, 0x43, 0x35, 0x10, 0x2c, 0xf4, 0x6b, 0x68, 0x53, 0xb0, 0x5f, 0x8a,
		0x07, 0x55, 0x01, 0x55, 0x5f, 0xc3, 0x5a, 0xd6, 0x18, 0x95, 0x61, 0xfe, 0x92, 0xf4, 0x54, 0x1b,
		0x89, 0xff, 0x8c, 0xa9, 0xeb, 0xc4, 0xd5, 0xaa, 0x96, 0xdd, 0x44, 0xd4, 0x09, 0x83, 0x27, 0x73,
		0x8f, 0x8d, 0xda, 0xdf, 0x17, 0xe1, 0x3d, 0x19, 0xa6, 0x93, 0x8d, 0xfc, 0x90, 0xb5, 0x7d, 0x97,
		0x70, 0xe2, 0x24, 0x1d, 0x6c, 0x4c, 0x23, 0x78, 0x0a, 0xab, 0x49, 0x77, 0x0e, 0x2b, 0x73, 0x22,
		0x4b, 0x7a, 0xca, 0x93, 0x8f, 0x98, 0x7d, 0x3c, 0xfa, 0x09, 0x6c, 0xf5, 0x2b, 0xc7, 0x66, 0x1e,
		0x27, 0x6f, 0xb9, 0x58, 0xf2, 0x6b, 0x66, 0x39, 0x7d, 0x71, 0x28, 0xc7, 0x07, 0xda, 0xde, 0xc2,
		0x50, 0xdb, 0xfb, 0x1d, 0x6c, 0x85, 0x9c, 0xda, 0x97, 0x3d, 0x0b, 0x73, 0x1e, 0xd0, 0xb3, 0x88,
		0x93, 0x50, 0x2c, 0xcc, 0xd2, 0x5e, 0x5d, 0x1b, 0xcd, 0x4b, 0x81, 0x4e, 0x8b, 0x6e, 0x3f, 0xb5,
		0x32, 0xcb, 0xd2, 0x51, 0x7f, 0x04, 0x7d, 0x0c, 0x95, 0x80, 0xf0, 0x28, 0xf0, 0x2c, 0x8f, 0x74,
		0xad, 0x24, 0x7a, 0x51, 0xe9, 0x62, 0x6d, 0xaf, 0x98, 0x3f, 0x90, 0xef, 0x3f, 0x27, 0xdd, 0x6c,
		0x2a, 0xd1, 0x01, 0xdc, 0x3e, 0x67, 0x81, 0x4d, 0x2c, 0x3b, 0x20, 0x98, 0x13, 0x8d, 0xf9, 0xb2,
		0x30, 0xaf, 0x0a, 0xd4, 0xa1, 0x00, 0x0d, 0xfb, 0xd0, 0x34, 0xf4, 0x15, 0x5d, 0x43, 0x47, 0x0c,
		0xd6, 0xc5, 0xba, 0xb4, 0x02, 0x12, 0x46, 0x2e, 0x0f, 0x2b, 0xab, 0x82, 0x8c, 0x5f, 0x69, 0xa7,
		0x3f, 0x01, 0xf1, 0x75, 0x59, 0x31, 0xd2, 0x99, 0xac, 0xdf, 0xb5, 0x37, 0x99, 0xa1, 0x2a, 0x85,
		0xad, 0x11, 0x88, 0xa6, 0x4a, 0x7f, 0x31, 0x58, 0xa5, 0xbb, 0x13, 0x54, 0xa9, 0x70, 0x98, 0xad,
		0xd5, 0x77, 0xf3, 0xf0, 0xa3, 0xe2, 0x90, 0xd5, 0xae, 0xf5, 0x25, 0xac, 0x0f, 0x26, 0xd8, 0x10,
		0x1f, 0xfd, 0xd9, 0xb4, 0xeb, 0xd6, 0x5c, 0x73, 0xb2, 0x24, 0xbc, 0x33, 0xe0, 0x36, 0xb6, 0x39,
		0xed, 0x50, 0x4e, 0x49, 0x68, 0x71, 0x66, 0x39, 0x34, 0xf4, 0x31, 0xb7, 0x5b, 0x96, 0xcb, 0x6c,
		0xec, 0xba, 0x3d, 0x55, 0xfa, 0x5f, 0xcf, 0x90, 0x6d, 0xd5, 0x29, 0xf6, 0x53, 0xff, 0x4d, 0x76,
		0xa4, 0xbc, 0x7f, 0x26, 0x9d, 0xcb, 0xec, 0xdf, 0xc0, 0xf9, 0x88, 0xea, 0xef, 0x61, 0x67, 0x9c,
		0x03, 0x0d, 0x37, 0x47, 0x83, 0xdc, 0xe8, 0x97, 0x8a, 0xf2, 0xdb, 0x13, 0xbe, 0x12, 0xc7, 0x27,
		0xde, 0x39, 0xcb, 0x32, 0xf4, 0x87, 0x39, 0xd8, 0xd1, 0x4c, 0xf3, 0x18, 0x53, 0x77, 0xe2, 0x56,
		0x72, 0x00, 0x8b, 0x36, 0x8e, 0x42, 0x19, 0xcd, 0xc6, 0xde, 0x07, 0x85, 0x6d, 0xa4, 0xef, 0xfd,
		0x30, 0xb6, 0x31, 0xa5, 0x69, 0xbc, 0x5d, 0x3a, 0x84, 0x63, 0xea, 0x86, 0x4a, 0x3a, 0xe8, 0xb7,
		0xcb, 0x53, 0xdc, 0x73, 0x19, 0x76, 0xcc, 0x04, 0x5c, 0xd8, 0x5c, 0x34, 0x4b, 0x70, 0x51, 0xab,
		0xa9, 0xde, 0x83, 0xbb, 0x05, 0x39, 0x90, 0x3c, 0xd7, 0xfe, 0xd5, 0x17, 0x8c, 0x49, 0x66, 0xaf,
		0x52, 0x30, 0xbe, 0x04, 0x94, 0xfa, 0xb5, 0xda, 0x84, 0x63, 0x07, 0x73, 0xac, 0x24, 0xd2, 0xbd,
		0xc2, 0x0f, 0xfc, 0x5a, 0x81, 0xcd, 0x32, 0x1f, 0x1a, 0xa9, 0x7d, 0xbb, 0x92, 0x8a, 0xcb, 0xc1,
		0x39, 0x5e, 0xa9, 0xb8, 0xbc, 0x03, 0x25, 0xb5, 0x84, 0x7a, 0xf1, 0x9e, 0x2b, 0x33, 0x01, 0xc9,
		0xd0, 0x89, 0x13, 0xab, 0xcf, 0x14, 0x20, 0xd4, 0xe7, 0x42, 0x81, 0xfa, 0x4c, 0x27, 0x26, 0xd4,
		0x27, 0xce, 0x3c, 0xa1, 0x3d, 0x58, 0xa4, 0x9e, 0x1f, 0x71, 0xb5, 0x03, 0x15, 0x97, 0xa0, 0x84,
		0x6a, 0xd4, 0xce, 0xd2, 0xff, 0xaa, 0x76, 0x96, 0xa7, 0x53, 0x3b, 0x4d, 0xd8, 0x4e, 0xfc, 0xc5,
		0x1d, 0xce, 0x76, 0x59, 0x48, 0x84, 0x23, 0x16, 0x71, 0xa5, 0x3d, 0xb7, 0x47, 0x7c, 0x1d, 0xa9,
		0x03, 0xa2, 0x79, 0x3d, 0xb1, 0x6d, 0xb2, 0xc3, 0xd8, 0xb2, 0x29, 0x0d, 0xd1, 0xe7, 0x70, 0x5d,
		0x7c, 0x64, 0xd4, 0xe5, 0xea, 0x38, 0x97, 0xd7, 0x84, 0xe1, 0x90, 0xbf, 0x63, 0xd8, 0x6a, 0x11,
		0x1c, 0xf0, 0x33, 0x82, 0x79, 0xea, 0x0a, 0xc6, 0xb9, 0x2a, 0xa7, 0x36, 0x89, 0x9f, 0x8c, 0x3e,
		0x8f, 0x85, 0xea, 0x62, 0x5f, 0x9f, 0xbf, 0x86, 0xdb, 0x83, 0x4c, 0x58, 0xec, 0xdc, 0xe2, 0x2d,
		0x1a, 0x5a, 0x89, 0xc1, 0x78, 0x1d, 0x5a, 0x1d, 0x60, 0xe6, 0x37, 0xe7, 0xcd, 0x16, 0x0d, 0xf7,
		0x95, 0xff, 0x93, 0xec, 0x0c, 0x92, 0x66, 0xb5, 0x3e, 0x41, 0xa5, 0xf4, 0x27, 0x71, 0xa4, 0xba,
		0xd6, 0xc8, 0x71, 0x69, 0x63, 0xb6, 0xe3, 0xd2, 0x03, 0xd8, 0x4c, 0xfd, 0xa8, 0xee, 0xb3, 0x29,
		0x3b, 0x5c, 0x32, 0x7c, 0x24, 0xbb, 0xd0, 0x87, 0xb0, 0xd4, 0x22, 0xd8, 0x21, 0x41, 0xa5, 0xac,
		0x0e, 0x51, 0xda, 0xc3, 0x88, 0x80, 0x98, 0x0a, 0x5a, 0xfb, 0xce, 0x48, 0x95, 0x66, 0xb6, 0x1b,
		0x4c, 0xab, 0x34, 0x3f, 0x82, 0x25, 0x29, 0x6d, 0x54, 0x27, 0x28, 0x4e, 0x96, 0xc2, 0x16, 0xf5,
		0xbe, 0xda, 0xfd, 0x54, 0x55, 0xe4, 0xc4, 0xa5, 0x5a, 0xf6, 0xb7, 0x73, 0xf0, 0xa0, 0x08, 0x78,
		0xd0, 0x3b, 0x39, 0x1a, 0xd7, 0xbf, 0xaf, 0xaa, 0xa7, 0xf5, 0xb3, 0xb6, 0x30, 0x63, 0xd6, 0x16,
		0x87, 0xb2, 0xf6, 0x63, 0xd8, 0x1d, 0x9f, 0x0c, 0x95, 0xb9, 0xbf, 0x18, 0xa9, 0x2c, 0xc8, 0x82,
		0xa7, 0x92, 0x05, 0x8f, 0x60, 0xf9, 0x1c, 0x53, 0x37, 0x0a, 0x48, 0x21, 0xf1, 0xc7, 0x12, 0x63,
		0x26, 0xe0, 0x42, 0xe6, 0xfb, 0x3b, 0xb5, 0x2e, 0x2c, 0x15, 0xfc, 0x37, 0x73, 0xda, 0xfa, 0x90,
		0xa8, 0xef, 0x33, 0xe7, 0x99, 0x8c, 0x2d, 0xcc, 0x9a, 0xb1, 0x61, 0xd6, 0x1f, 0xc0, 0xbd, 0x31,
		0xb9, 0x50, 0x59, 0xfb, 0xab, 0x01, 0x35, 0x5d, 0x7d, 0x60, 0xcf, 0x26, 0x53, 0x91, 0x9e, 0xb4,
		0xc6, 0xb9, 0x59, 0x75, 0xdc, 0x30, 0xe9, 0xf7, 0xf4, 0x6d, 0x28, 0x0d, 0x4c, 0x4d, 0xe0, 0x8f,
		0x73, 0x70, 0xbf, 0x00, 0xf7, 0x3d, 0x27, 0x3e, 0xc9, 0xda, 0xc2, 0xac, 0x59, 0x1b, 0x26, 0xfe,
		0x7d, 0x7d, 0xef, 0x1b, 0xc8, 0xc6, 0x00, 0xf5, 0x36, 0x0b, 0x06, 0xa0, 0x2f, 0x92, 0x5d, 0xeb,
		0x0a, 0xa9, 0x3f, 0x8d, 0xa9, 0x2f, 0x08, 0x4c, 0xe9, 0xd2, 0xf7, 0xa1, 0x6c, 0x8b, 0x89, 0x59,
		0x81, 0x8c, 0x95, 0x38, 0x22, 0xbe, 0x15, 0x73, 0x53, 0x8e, 0x9b, 0xc9, 0xb0, 0xaa, 0x92, 0x5c,
		0x97, 0xff, 0x6f, 0x55, 0xd2, 0x8c, 0xab, 0x64, 0x4c, 0x36, 0xa6, 0x4f, 0xf2, 0x3f, 0xfb, 0xdb,
		0x87, 0xb8, 0x19, 0x98, 0x45, 0x36, 0xfc, 0x72, 0x48, 0x36, 0x4c, 0x7e, 0x01, 0x91, 0x6c, 0x86,
		0xaf, 0xe0, 0x9a, 0xfc, 0xd7, 0x89, 0xd5, 0x21, 0x81, 0xb8, 0x5a, 0xa0, 0xde, 0x39, 0x53, 0xe7,
		0xcb, 0x7c, 0xa2, 0x48, 0xf0, 0x4a, 0xc2, 0xc5, 0x59, 0x79, 0xab, 0x3b, 0x3c, 0x94, 0xd9, 0x84,
		0x74, 0x93, 0x4b, 0xb4, 0x87, 0x01, 0x55, 0x93, 0x84, 0x84, 0xcb, 0x1b, 0xab, 0xf4, 0x74, 0x77,
		0x25, 0xb5, 0x55, 0xbb, 0x05, 0x37, 0xb4, 0xc1, 0xc8, 0x60, 0xf7, 0xfe, 0xbd, 0x09, 0xab, 0x72,
		0xea, 0xfb, 0xa7, 0x27, 0xe8, 0x2d, 0x5c, 0xd3, 0x5c, 0xb1, 0xa0, 0xc6, 0xe4, 0x97, 0x31, 0x62,
		0x8e, 0xd5, 0xa9, 0x6f, 0x6f, 0xd0, 0x9f, 0x0d, 0xb8, 0x59, 0x74, 0xe9, 0x82, 0x1e, 0xcf, 0x7a,
		0x2b, 0x56, 0xfd, 0x64, 0xe6, 0x1b, 0x1e, 0xf4, 0x8d, 0x01, 0xdb, 0xb9, 0xf7, 0x03, 0xe8, 0xe7,
		0x93, 0x3a, 0x1e, 0x10, 0x4f, 0xd5, 0x47, 0xd3, 0x9a, 0xa9, 0x60, 0xfa, 0xe4, 0x64, 0x57, 0x6c,
		0x31, 0x39, 0x9a, 0xfb, 0x8a, 0x62, 0x72, 0xb4, 0x87, 0xff, 0x0c, 0x39, 0x5a, 0x01, 0x59, 0x4c,
		0x4e, 0xd1, 0x09, 0xa2, 0x98, 0x9c, 0x42, 0x8d, 0x8f, 0xde, 0xe9, 0x95, 0xea, 0x80, 0xac, 0x45,
		0x9f, 0x4e, 0xed, 0x3f, 0xb3, 0x0f, 0x54, 0x9f, 0xcd, 0x68, 0x3d, 0x5a, 0x3e, 0xa3, 0x12, 0xac,
		0xb8, 0x7c, 0x72, 0xb5, 0x77, 0x71, 0xf9, 0xe4, 0x6b, 0x63, 0xf4, 0x9d, 0x01, 0xb7, 0x0a, 0xf5,
		0x20, 0xfa, 0x64, 0x3a, 0xcf, 0xd9, 0x44, 0x3d, 0x99, 0xc5, 0x54, 0x05, 0xf6, 0x27, 0x43, 0xb4,
		0xa8, 0x3c, 0xbd, 0x82, 0x3e, 0x9e, 0x98, 0x84, 0x41, 0xc1, 0x5a, 0x7d, 0x3c, 0xbd, 0xa1, 0x0a,
		0xe9, 0x6f, 0x06, 0xdc, 0x19, 0x23, 0xa1, 0xd0, 0xd3, 0x69, 0xbd, 0x67, 0xf3, 0xf5, 0xe9, 0x6c,
		0xc6, 0x03, 0x19, 0xcb, 0xdd, 0xbb, 0x73, 0x33, 0x36, 0x4e, 0xe7, 0xe5, 0x66, 0x6c, 0xbc, 0x0e,
		0x93, 0x19, 0x2b, 0x94, 0x13, 0xb9, 0x19, 0x9b, 0x44, 0x92, 0xe5, 0x66, 0x6c, 0x32, 0x05, 0x93,
		0x59, 0x89, 0xa3, 0x3b, 0x77, 0xf1, 0x4a, 0xcc, 0x95, 0x31, 0xc5, 0x2b, 0x31, 0x5f, 0x20, 0xc4,
		0x8d, 0x5c, 0xb3, 0x25, 0xe7, 0x34, 0xf2, 0x7c, 0x25, 0x91, 0xd3, 0xc8, 0x0b, 0x76, 0xfb, 0x83,
		0xdf, 0xc2, 0x0f, 0x6d, 0xd6, 0xd6, 0x99, 0x1d, 0xac, 0xec, 0xfb, 0xf4, 0x34, 0x60, 0x9c, 0x9d,
		0x1a, 0x5f, 0x3f, 0xbc, 0xa0, 0xbc, 0x15, 0x9d, 0xd5, 0x6d, 0xd6, 0x6e, 0x64, 0x7f, 0x50, 0xf1,
		0x53, 0xea, 0xb8, 0x8d, 0x0b, 0x26, 0x7f, 0x2b, 0xa2, 0x7e, 0x5d, 0xf1, 0x14, 0xfb, 0xb4, 0xf3,
		0xf0, 0x6c, 0x49, 0x8c, 0x7d, 0xf8, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0x6c, 0x40, 0x2d,
		0xcf, 0x22, 0x00, 0x00,
	},
	// google/protobuf/duration.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0x29, 0x2d, 0x4a,
		0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0x56,
		0x5c, 0x1c, 0x2e, 0x50, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa9, 0xc9, 0xf9, 0x79, 0x29, 0xc5,
		0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30, 0xae, 0x90, 0x08, 0x17, 0x6b, 0x5e, 0x62, 0x5e,
		0x7e, 0xb1, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xe3, 0xd4, 0xcc, 0xc8, 0x25, 0x9c,
		0x9c, 0x9f, 0xab, 0x87, 0x66, 0xa6, 0x13, 0x2f, 0xcc, 0xc4, 0x00, 0x90, 0x48, 0x00, 0x63, 0x94,
		0x21, 0x54, 0x45, 0x7a, 0x7e, 0x4e, 0x62, 0x5e, 0xba, 0x5e, 0x7e, 0x51, 0x3a, 0xc2, 0x81, 0x25,
		0x95, 0x05, 0xa9, 0xc5, 0xfa, 0xd9, 0x79, 0xf9, 0xe5, 0x79, 0x70, 0xc7, 0x16, 0x24, 0xfd, 0x60,
		0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce, 0x1d, 0xa2, 0x39, 0x00, 0xaa,
		0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4, 0x35, 0x89, 0x0d, 0x6c, 0x94,
		0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xef, 0x8a, 0xb4, 0xc3, 0xfb, 0x00, 0x00, 0x00,
	},
	// google/protobuf/timestamp.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc9, 0xcc, 0x4d,
		0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0xd0, 0x03, 0x0b, 0x09, 0xf1, 0x43, 0x14, 0xe8, 0xc1, 0x14, 0x28,
		0x59, 0x73, 0x71, 0x86, 0xc0, 0xd4, 0x08, 0x49, 0x70, 0xb1, 0x17, 0xa7, 0x26, 0xe7, 0xe7, 0xa5,
		0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xc1, 0xb8, 0x42, 0x22, 0x5c, 0xac, 0x79, 0x89,
		0x79, 0xf9, 0xc5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x10, 0x8e, 0x53, 0x2b, 0x23, 0x97,
		0x70, 0x72, 0x7e, 0xae, 0x1e, 0x9a, 0xa1, 0x4e, 0x7c, 0x70, 0x23, 0x03, 0x40, 0x42, 0x01, 0x8c,
		0x51, 0x46, 0x50, 0x25, 0xe9, 0xf9, 0x39, 0x89, 0x79, 0xe9, 0x7a, 0xf9, 0x45, 0xe9, 0x48, 0x6e,
		0xac, 0x2c, 0x48, 0x2d, 0xd6, 0xcf, 0xce, 0xcb, 0x2f, 0xcf, 0x43, 0xb8, 0xb7, 0x20, 0xe9, 0x07,
		0x23, 0xe3, 0x22, 0x26, 0x66, 0xf7, 0x00, 0xa7, 0x55, 0x4c, 0x72, 0xee, 0x10, 0xdd, 0x01, 0x50,
		0x2d, 0x7a, 0xe1, 0xa9, 0x39, 0x39, 0xde, 0x20, 0x0d, 0x21, 0x20, 0xbd, 0x49, 0x6c, 0x60, 0xb3,
		0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x65, 0xce, 0x7d, 0xff, 0x00, 0x00, 0x00,
	},
	// google/protobuf/wrappers.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x2f, 0x4a, 0x2c,
		0x28, 0x48, 0x2d, 0x2a, 0xd6, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0xca,
		0x5c, 0xdc, 0x2e, 0xf9, 0xa5, 0x49, 0x39, 0xa9, 0x61, 0x89, 0x39, 0xa5, 0xa9, 0x42, 0x22, 0x5c,
		0xac, 0x65, 0x20, 0x86, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x63, 0x10, 0x84, 0xa3, 0xa4, 0xc4, 0xc5,
		0xe5, 0x96, 0x93, 0x9f, 0x58, 0x82, 0x45, 0x0d, 0x13, 0x92, 0x1a, 0xcf, 0xbc, 0x12, 0x33, 0x13,
		0x2c, 0x6a, 0x98, 0x61, 0x6a, 0x94, 0xb9, 0xb8, 0x43, 0x71, 0x29, 0x62, 0x41, 0x35, 0xc8, 0xd8,
		0x08, 0x8b, 0x1a, 0x56, 0x34, 0x83, 0xb0, 0x2a, 0xe2, 0x85, 0x29, 0x52, 0xe4, 0xe2, 0x74, 0xca,
		0xcf, 0xcf, 0xc1, 0xa2, 0x84, 0x03, 0xc9, 0x9c, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0x74, 0x2c, 0x8a,
		0x38, 0x91, 0x1c, 0xe4, 0x54, 0x59, 0x92, 0x5a, 0x8c, 0x45, 0x0d, 0x0f, 0x54, 0x8d, 0x53, 0x33,
		0x23, 0x97, 0x70, 0x72, 0x7e, 0xae, 0x1e, 0x5a, 0xf0, 0x3a, 0xf1, 0x86, 0x43, 0xc3, 0x3f, 0x00,
		0x24, 0x12, 0xc0, 0x18, 0x65, 0x08, 0x55, 0x91, 0x9e, 0x9f, 0x93, 0x98, 0x97, 0xae, 0x97, 0x5f,
		0x94, 0x8e, 0x88, 0xab, 0x92, 0xca, 0x82, 0xd4, 0x62, 0xfd, 0xec, 0xbc, 0xfc, 0xf2, 0x3c, 0x78,
		0xbc, 0x15, 0x24, 0xfd, 0x60, 0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce,
		0x1d, 0xa2, 0x39, 0x00, 0xaa, 0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4,
		0x35, 0x89, 0x0d, 0x6c, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x92, 0x48, 0x30, 0x06,
		0x02, 0x00, 0x00,
	},
	// uber/cadence/api/v1/common.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
		0x14, 0x9e, 0xe2, 0xd8, 0x49, 0x8f, 0xdd, 0xd4, 0x63, 0xd6, 0xd4, 0xc9, 0xfe, 0x3c, 0x03, 0x43,
		0xb3, 0x01, 0x93, 0x10, 0xf7, 0xa6, 0x58, 0x51, 0x0c, 0x4e, 0xec, 0xac, 0x6a, 0xb7, 0xc4, 0x90,
		0x8d, 0x66, 0xdb, 0xc5, 0x04, 0x5a, 0x3c, 0x72, 0x39, 0x4b, 0xa4, 0x40, 0x51, 0x4e, 0x7c, 0xb7,
		0x27, 0xd9, 0xc5, 0x5e, 0x69, 0x2f, 0x34, 0x48, 0xa2, 0x63, 0xa7, 0xf3, 0x90, 0x9b, 0x61, 0x77,
		0xe4, 0xf9, 0x7e, 0xce, 0x47, 0xe1, 0x90, 0x82, 0x76, 0x36, 0x41, 0xe5, 0x04, 0x94, 0xa1, 0x08,
		0xd0, 0xa1, 0x09, 0x77, 0xe6, 0x27, 0x4e, 0x20, 0xe3, 0x58, 0x0a, 0x3b, 0x51, 0x52, 0x4b, 0xb2,
		0x9f, 0x33, 0x6c, 0xc3, 0xb0, 0x69, 0xc2, 0xed, 0xf9, 0xc9, 0xd1, 0x67, 0x53, 0x29, 0xa7, 0x11,
		0x3a, 0x05, 0x65, 0x92, 0x85, 0x0e, 0xcb, 0x14, 0xd5, 0x7c, 0x29, 0xea, 0xbc, 0x81, 0x0f, 0xaf,
		0xa4, 0x9a, 0x85, 0x91, 0xbc, 0x1e, 0xdc, 0x60, 0x90, 0xe5, 0x10, 0xf9, 0x1c, 0xea, 0xd7, 0xa6,
		0xe8, 0x73, 0xd6, 0xb2, 0xda, 0xd6, 0xf1, 0x03, 0x0f, 0x96, 0x25, 0x97, 0x91, 0xc7, 0x50, 0x53,
		0x99, 0xc8, 0xb1, 0xad, 0x02, 0xab, 0xaa, 0x4c, 0xb8, 0xac, 0xd3, 0x81, 0xc6, 0xd2, 0x6c, 0xbc,
		0x48, 0x90, 0x10, 0xd8, 0x16, 0x34, 0x46, 0x63, 0x50, 0xac, 0x73, 0x4e, 0x2f, 0xd0, 0x7c, 0xce,
		0xf5, 0xe2, 0x5f, 0x39, 0x9f, 0xc2, 0xce, 0x90, 0x2e, 0x22, 0x49, 0x59, 0x0e, 0x33, 0xaa, 0x69,
		0x01, 0x37, 0xbc, 0x62, 0xdd, 0x79, 0x01, 0x3b, 0xe7, 0x94, 0x47, 0x99, 0x42, 0x72, 0x00, 0x35,
		0x85, 0x34, 0x95, 0xc2, 0xe8, 0xcd, 0x8e, 0xb4, 0x60, 0x87, 0xa1, 0xa6, 0x3c, 0x4a, 0x8b, 0x84,
		0x0d, 0x6f, 0xb9, 0xed, 0xfc, 0x61, 0xc1, 0xf6, 0x8f, 0x18, 0x4b, 0xf2, 0x12, 0x6a, 0x21, 0xc7,
		0x88, 0xa5, 0x2d, 0xab, 0x5d, 0x39, 0xae, 0x77, 0xbf, 0xb4, 0x37, 0x7c, 0x3f, 0x3b, 0xa7, 0xda,
		0xe7, 0x05, 0x6f, 0x20, 0xb4, 0x5a, 0x78, 0x46, 0x74, 0x74, 0x05, 0xf5, 0xb5, 0x32, 0x69, 0x42,
		0x65, 0x86, 0x0b, 0x93, 0x22, 0x5f, 0x92, 0x2e, 0x54, 0xe7, 0x34, 0xca, 0xb0, 0x08, 0x50, 0xef,
		0x7e, 0xb2, 0xd1, 0xde, 0x1c, 0xd3, 0x2b, 0xa9, 0xdf, 0x6e, 0x3d, 0xb7, 0x3a, 0x7f, 0x5a, 0x50,
		0x7b, 0x85, 0x94, 0xa1, 0x22, 0xdf, 0xbd, 0x17, 0xf1, 0xe9, 0x46, 0x8f, 0x92, 0xfc, 0xff, 0x86,
		0xfc, 0xcb, 0x82, 0xe6, 0x08, 0xa9, 0x0a, 0xde, 0xf5, 0xb4, 0x56, 0x7c, 0x92, 0x69, 0x4c, 0x89,
		0x0f, 0x7b, 0x5c, 0x30, 0xbc, 0x41, 0xe6, 0xdf, 0x89, 0xfd, 0x7c, 0xa3, 0xeb, 0xfb, 0x72, 0xdb,
		0x2d, 0xb5, 0xeb, 0xe7, 0x78, 0xc8, 0xd7, 0x6b, 0x47, 0xbf, 0x02, 0xf9, 0x27, 0xe9, 0x3f, 0x3c,
		0x55, 0x08, 0xbb, 0x7d, 0xaa, 0xe9, 0x69, 0x24, 0x27, 0xe4, 0x1c, 0x1e, 0xa2, 0x08, 0x24, 0xe3,
		0x62, 0xea, 0xeb, 0x45, 0x52, 0x0e, 0xe8, 0x5e, 0xf7, 0x8b, 0x8d, 0x5e, 0x03, 0xc3, 0xcc, 0x27,
		0xda, 0x6b, 0xe0, 0xda, 0xee, 0x76, 0x80, 0xb7, 0xd6, 0x06, 0x78, 0x58, 0x5e, 0x3a, 0x54, 0x6f,
		0x51, 0xa5, 0x5c, 0x0a, 0x57, 0x84, 0x32, 0x27, 0xf2, 0x38, 0x89, 0x96, 0x17, 0x21, 0x5f, 0x93,
		0xa7, 0xf0, 0x28, 0x44, 0xaa, 0x33, 0x85, 0xfe, 0xbc, 0xa4, 0x9a, 0x0b, 0xb7, 0x67, 0xca, 0xc6,
		0xa0, 0xf3, 0x06, 0x9e, 0x8c, 0xb2, 0x24, 0x91, 0x4a, 0x23, 0x3b, 0x8b, 0x38, 0x0a, 0x6d, 0x90,
		0x34, 0xbf, 0xab, 0x53, 0xe9, 0xa7, 0x6c, 0x66, 0x9c, 0xab, 0x53, 0x39, 0x62, 0x33, 0x72, 0x08,
		0xbb, 0xbf, 0xd1, 0x39, 0x2d, 0x80, 0xd2, 0x73, 0x27, 0xdf, 0x8f, 0xd8, 0xac, 0xf3, 0x7b, 0x05,
		0xea, 0x1e, 0x6a, 0xb5, 0x18, 0xca, 0x88, 0x07, 0x0b, 0xd2, 0x87, 0x26, 0x17, 0x5c, 0x73, 0x1a,
		0xf9, 0x5c, 0x68, 0x54, 0x73, 0x5a, 0xa6, 0xac, 0x77, 0x0f, 0xed, 0xf2, 0x79, 0xb1, 0x97, 0xcf,
		0x8b, 0xdd, 0x37, 0xcf, 0x8b, 0xf7, 0xc8, 0x48, 0x5c, 0xa3, 0x20, 0x0e, 0xec, 0x4f, 0x68, 0x30,
		0x93, 0x61, 0xe8, 0x07, 0x12, 0xc3, 0x90, 0x07, 0x79, 0xcc, 0xa2, 0xb7, 0xe5, 0x11, 0x03, 0x9d,
		0xad, 0x90, 0xbc, 0x6d, 0x4c, 0x6f, 0x78, 0x9c, 0xc5, 0xab, 0xb6, 0x95, 0x7b, 0xdb, 0x1a, 0xc9,
		0x6d, 0xdb, 0xaf, 0x56, 0x2e, 0x54, 0x6b, 0x8c, 0x13, 0x9d, 0xb6, 0xb6, 0xdb, 0xd6, 0x71, 0xf5,
		0x96, 0xda, 0x33, 0x65, 0xf2, 0x12, 0x3e, 0x16, 0x52, 0xf8, 0x2a, 0x3f, 0x3a, 0x9d, 0x44, 0xe8,
		0xa3, 0x52, 0x52, 0xf9, 0xe5, 0x93, 0x92, 0xb6, 0xaa, 0xed, 0xca, 0xf1, 0x03, 0xaf, 0x25, 0xa4,
		0xf0, 0x96, 0x8c, 0x41, 0x4e, 0xf0, 0x4a, 0x9c, 0xbc, 0x86, 0x7d, 0xbc, 0x49, 0x78, 0x19, 0x64,
		0x15, 0xb9, 0x76, 0x5f, 0x64, 0xb2, 0x52, 0x2d, 0x53, 0x7f, 0x7d, 0x0d, 0x8d, 0xf5, 0x99, 0x22,
		0x87, 0xf0, 0x78, 0x70, 0x71, 0x76, 0xd9, 0x77, 0x2f, 0xbe, 0xf7, 0xc7, 0x3f, 0x0f, 0x07, 0xbe,
		0x7b, 0xf1, 0xb6, 0xf7, 0x83, 0xdb, 0x6f, 0x7e, 0x40, 0x8e, 0xe0, 0xe0, 0x2e, 0x34, 0x7e, 0xe5,
		0xb9, 0xe7, 0x63, 0xef, 0xaa, 0x69, 0x91, 0x03, 0x20, 0x77, 0xb1, 0xd7, 0xa3, 0xcb, 0x8b, 0xe6,
		0x16, 0x69, 0xc1, 0x47, 0x77, 0xeb, 0x43, 0xef, 0x72, 0x7c, 0xf9, 0xac, 0x59, 0x39, 0xfd, 0x09,
		0x9e, 0x04, 0x32, 0xde, 0x34, 0xe4, 0xa7, 0xbb, 0xbd, 0x84, 0x0f, 0xf3, 0xf4, 0x43, 0xeb, 0x97,
		0x93, 0x29, 0xd7, 0xef, 0xb2, 0x89, 0x1d, 0xc8, 0xd8, 0x59, 0xff, 0x31, 0x7d, 0xc3, 0x59, 0xe4,
		0x4c, 0x65, 0xf9, 0xbb, 0x31, 0x7f, 0xa9, 0x17, 0x34, 0xe1, 0xf3, 0x93, 0x49, 0xad, 0xa8, 0x3d,
		0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x8c, 0x5b, 0xe4, 0xc9, 0x06, 0x00, 0x00,
	},
	// uber/cadence/api/v1/decision.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x5d, 0x4f, 0xdc, 0x46,
		0x17, 0x7e, 0xcd, 0xc7, 0x7e, 0x1c, 0x20, 0x6f, 0x18, 0x12, 0x02, 0x09, 0x09, 0x64, 0x5f, 0xbd,
		0xa4, 0x09, 0x62, 0x17, 0x48, 0x1a, 0x45, 0x49, 0x15, 0x15, 0x48, 0x50, 0x90, 0x12, 0x82, 0x1c,
		0xd2, 0x54, 0xbd, 0xb1, 0x86, 0xf1, 0x00, 0x23, 0xbc, 0xb6, 0x3b, 0x1e, 0x43, 0xb6, 0x52, 0xa5,
		0x5e, 0xb5, 0xbd, 0xe9, 0x0f, 0xa8, 0xd4, 0xab, 0x5e, 0xb5, 0x37, 0xed, 0x6d, 0xab, 0x5e, 0xf5,
		0x27, 0xf4, 0xa2, 0xff, 0xa3, 0x52, 0xff, 0x40, 0x35, 0xe3, 0xb1, 0x77, 0x59, 0xbc, 0x5e, 0x9b,
		0xa4, 0xb9, 0xc3, 0xe3, 0x73, 0x9e, 0x79, 0x66, 0xce, 0xcc, 0x79, 0x1e, 0xb3, 0x50, 0x0b, 0x77,
		0x29, 0x6f, 0x10, 0x6c, 0x53, 0x97, 0xd0, 0x06, 0xf6, 0x59, 0xe3, 0x68, 0xb9, 0x61, 0x53, 0xc2,
		0x02, 0xe6, 0xb9, 0x75, 0x9f, 0x7b, 0xc2, 0x43, 0x13, 0x32, 0xa6, 0xae, 0x63, 0xea, 0xd8, 0x67,
		0xf5, 0xa3, 0xe5, 0xcb, 0xd7, 0xf6, 0x3d, 0x6f, 0xdf, 0xa1, 0x0d, 0x15, 0xb2, 0x1b, 0xee, 0x35,
		0xec, 0x90, 0x63, 0x91, 0x24, 0x5d, 0x9e, 0x4b, 0x03, 0x26, 0x5e, 0xb3, 0x99, 0x44, 0xa4, 0x4e,
		0x2d, 0x70, 0x70, 0xe8, 0xb0, 0x40, 0x64, 0xc5, 0x1c, 0x7b, 0xfc, 0x70, 0xcf, 0xf1, 0x8e, 0xa3,
		0x98, 0xda, 0xd7, 0xe3, 0x50, 0x79, 0xa4, 0x19, 0xa3, 0x6f, 0x0d, 0xb8, 0x15, 0x90, 0x03, 0x6a,
		0x87, 0x0e, 0xb5, 0x30, 0x11, 0xec, 0x88, 0x89, 0x96, 0x25, 0x51, 0xad, 0x78, 0x55, 0x16, 0x16,
		0x82, 0xb3, 0xdd, 0x50, 0xd0, 0x60, 0xca, 0x98, 0x33, 0xde, 0x1b, 0x59, 0x79, 0x50, 0x4f, 0x59,
		0x61, 0xfd, 0x85, 0x86, 0x59, 0xd5, 0x28, 0x3b, 0x38, 0x38, 0x8c, 0xe7, 0x59, 0x4d, 0x20, 0x9e,
		0xfc, 0xc7, 0x9c, 0x0f, 0x72, 0x45, 0xa2, 0xcf, 0x60, 0x36, 0x10, 0x98, 0x0b, 0x4b, 0xb0, 0x26,
		0xe5, 0xa9, 0x7c, 0x06, 0x14, 0x9f, 0xe5, 0x74, 0x3e, 0x32, 0x77, 0x47, 0xa6, 0xa6, 0xb2, 0x98,
		0x09, 0x32, 0xde, 0xa3, 0x1f, 0x0c, 0x90, 0xbb, 0xef, 0x3b, 0x54, 0x50, 0x2b, 0xde, 0x40, 0x8b,
		0xbe, 0xa6, 0x24, 0x94, 0x45, 0x4b, 0x25, 0x33, 0xa8, 0xc8, 0x7c, 0x98, 0x4a, 0x66, 0x5d, 0x63,
		0xbd, 0xd2, 0x50, 0x8f, 0x63, 0xa4, 0x54, 0x6e, 0x0b, 0x24, 0x7f, 0x38, 0xfa, 0xce, 0x80, 0x85,
		0x3d, 0xcc, 0x9c, 0xbc, 0x34, 0x87, 0x14, 0xcd, 0x0f, 0x52, 0x69, 0x6e, 0x60, 0xe6, 0xe4, 0xa3,
		0x78, 0x63, 0x2f, 0x5f, 0x28, 0xfa, 0xd1, 0x80, 0x25, 0x4e, 0x3f, 0x0d, 0x69, 0x20, 0x2c, 0x82,
		0x5d, 0x42, 0x9d, 0x1c, 0xe7, 0x6c, 0x38, 0x63, 0x2b, 0xcd, 0x08, 0x6c, 0x5d, 0x61, 0xf5, 0x3d,
		0x6c, 0x0b, 0x3c, 0x7f, 0x38, 0xfa, 0x1c, 0xe6, 0x34, 0xc5, 0xde, 0x47, 0xae, 0xa4, 0xa8, 0xad,
		0xa4, 0x57, 0x59, 0x25, 0xf7, 0x3e, 0x73, 0x57, 0x49, 0x56, 0x00, 0xfa, 0xde, 0x80, 0x45, 0x3d,
		0x7f, 0xce, 0x5a, 0x96, 0x15, 0x99, 0x87, 0x19, 0x64, 0xf2, 0x55, 0xf3, 0x26, 0xc9, 0x1b, 0x8c,
		0xfe, 0x30, 0xe0, 0x61, 0x57, 0x3d, 0xe9, 0x6b, 0x41, 0xb9, 0x8b, 0x73, 0xb3, 0xae, 0x28, 0xd6,
		0xcf, 0xfa, 0x57, 0xf7, 0xb1, 0x06, 0xce, 0xb7, 0x88, 0x7b, 0xfc, 0x8c, 0xb9, 0xe8, 0x0b, 0x03,
		0xae, 0x73, 0x4a, 0x3c, 0x6e, 0x5b, 0x4d, 0xcc, 0x0f, 0x7b, 0x54, 0xbe, 0xaa, 0x68, 0xdf, 0xee,
		0x41, 0x5b, 0x66, 0x3f, 0x53, 0xc9, 0xa9, 0xe4, 0xae, 0xf1, 0xcc, 0x08, 0xf4, 0xab, 0x01, 0x77,
		0x89, 0xe7, 0x0a, 0xe6, 0x86, 0xd4, 0xc2, 0x81, 0xe5, 0xd2, 0xe3, 0xbc, 0xdb, 0x09, 0x8a, 0xd7,
		0xe3, 0x1e, 0x7d, 0x27, 0x82, 0x5c, 0x0d, 0xb6, 0xe8, 0x71, 0xbe, 0x6d, 0x5c, 0x22, 0x05, 0x73,
		0xd0, 0xcf, 0x06, 0xac, 0x44, 0x9d, 0x9a, 0x1c, 0x30, 0xc7, 0xce, 0xcb, 0x7b, 0x44, 0xf1, 0x5e,
		0xeb, 0xdd, 0xbc, 0xd7, 0x25, 0x5a, 0x3e, 0xd2, 0x8b, 0x41, 0x91, 0x04, 0xf4, 0x9b, 0x01, 0x77,
		0x03, 0xb6, 0x2f, 0xcf, 0x6c, 0xd1, 0xc3, 0x3b, 0xaa, 0x58, 0x6f, 0xa4, 0xb3, 0x56, 0x90, 0xc5,
		0x4e, 0xed, 0x72, 0x50, 0x34, 0x09, 0xfd, 0x62, 0xc0, 0xfb, 0xa1, 0x1f, 0x50, 0x2e, 0xda, 0xa4,
		0x03, 0x8a, 0x39, 0x39, 0xe8, 0x20, 0x9a, 0x4a, 0x7e, 0x2c, 0xe3, 0xa8, 0xbc, 0x54, 0x88, 0xf1,
		0xfc, 0x2f, 0x14, 0x5e, 0x7b, 0xd2, 0xf4, 0xa3, 0x12, 0x16, 0xcc, 0x59, 0x1b, 0x05, 0x68, 0xd3,
		0xa9, 0x7d, 0x53, 0x82, 0xf9, 0x7c, 0xb6, 0x01, 0xcd, 0xc2, 0x48, 0x22, 0x1b, 0xcc, 0x56, 0x46,
		0xa4, 0x6a, 0x42, 0x3c, 0xb4, 0x69, 0xa3, 0x0d, 0x18, 0x6b, 0xeb, 0x4a, 0xcb, 0xa7, 0xda, 0x1b,
		0x5c, 0x4f, 0x5d, 0x6b, 0x32, 0x59, 0xcb, 0xa7, 0xe6, 0x28, 0xee, 0x78, 0x42, 0x93, 0x50, 0xb2,
		0xbd, 0x26, 0x66, 0xae, 0xd2, 0xf3, 0xaa, 0xa9, 0x9f, 0xd0, 0x7d, 0xa8, 0x2a, 0xb9, 0x92, 0x6e,
		0x4b, 0x6b, 0xe8, 0xd5, 0x54, 0x6c, 0xb9, 0x80, 0xa7, 0x2c, 0x10, 0x66, 0x45, 0xe8, 0xbf, 0xd0,
		0x0a, 0x0c, 0x33, 0xd7, 0x0f, 0x85, 0xd6, 0xb5, 0x99, 0xd4, 0xbc, 0x6d, 0xdc, 0x72, 0x3c, 0x6c,
		0x9b, 0x51, 0x28, 0xda, 0x81, 0xe9, 0xc4, 0x98, 0x09, 0xcf, 0x22, 0x8e, 0x17, 0x50, 0x25, 0x4b,
		0x5e, 0x28, 0xb4, 0x08, 0x4d, 0xd7, 0x23, 0x53, 0x59, 0x8f, 0x4d, 0x65, 0xfd, 0x91, 0x36, 0x95,
		0xe6, 0x64, 0x9c, 0xbb, 0xe3, 0xad, 0xcb, 0xcc, 0x9d, 0x28, 0xb1, 0x1b, 0xb5, 0xed, 0xaf, 0x24,
		0x6a, 0xb9, 0x00, 0x6a, 0xe2, 0xae, 0x24, 0xea, 0x16, 0x4c, 0x6a, 0xa4, 0x6e, 0xa2, 0x95, 0x7e,
		0x90, 0x13, 0x91, 0x0d, 0x3b, 0xc9, 0x72, 0x03, 0xc6, 0x0f, 0x28, 0xe6, 0x62, 0x97, 0xe2, 0x36,
		0xbb, 0x6a, 0x3f, 0xa8, 0xf3, 0x49, 0x4e, 0x8c, 0xb3, 0x0e, 0xa3, 0x9c, 0x0a, 0xde, 0xb2, 0x7c,
		0xcf, 0x61, 0xa4, 0xa5, 0x3b, 0xce, 0x5c, 0x8f, 0x0e, 0x2e, 0x78, 0x6b, 0x5b, 0xc5, 0x99, 0x23,
		0xbc, 0xfd, 0x80, 0x6e, 0x43, 0xe9, 0x80, 0x62, 0x9b, 0x72, 0x7d, 0xf5, 0xaf, 0xa4, 0xa6, 0x3f,
		0x51, 0x21, 0xa6, 0x0e, 0x45, 0x77, 0x60, 0x32, 0x16, 0x49, 0xc7, 0x23, 0xd8, 0xb1, 0x6c, 0x16,
		0xf8, 0x58, 0x90, 0x03, 0x75, 0x05, 0x2b, 0xe6, 0x05, 0xfd, 0xf6, 0xa9, 0x7c, 0xf9, 0x48, 0xbf,
		0xab, 0x7d, 0x65, 0xc0, 0x4c, 0x96, 0x6d, 0x45, 0xd3, 0x50, 0x89, 0x9c, 0x49, 0x72, 0x05, 0xca,
		0xea, 0x79, 0xd3, 0x46, 0x4f, 0xe1, 0x62, 0x52, 0x83, 0x3d, 0xc6, 0xdb, 0x25, 0x18, 0xe8, 0xb7,
		0x6f, 0x48, 0x97, 0x60, 0x83, 0xf1, 0xb8, 0x02, 0x35, 0x02, 0x0b, 0x05, 0x2c, 0x2b, 0xba, 0x03,
		0x25, 0x4e, 0x83, 0xd0, 0x11, 0xfa, 0x0b, 0x21, 0xfb, 0x84, 0xeb, 0xd8, 0x1a, 0x86, 0x1b, 0x39,
		0x0d, 0x27, 0xba, 0x0b, 0x65, 0x69, 0x38, 0x43, 0x4e, 0x33, 0x67, 0xd8, 0x88, 0x62, 0xcc, 0x38,
		0xb8, 0xb6, 0x05, 0x0b, 0x05, 0xfc, 0x62, 0xdf, 0x2e, 0x53, 0xbb, 0x0f, 0x57, 0x33, 0x4d, 0x5e,
		0x46, 0x85, 0x6a, 0x04, 0x6e, 0xe6, 0xf6, 0x64, 0x72, 0xc1, 0x36, 0x15, 0x98, 0x39, 0x41, 0xae,
		0x2d, 0x8d, 0x83, 0x6b, 0x7f, 0x1b, 0x70, 0xef, 0xac, 0x1e, 0xaa, 0xa3, 0xf7, 0x19, 0x27, 0x7a,
		0xdf, 0x4b, 0x40, 0xa7, 0xd5, 0x51, 0x1f, 0xac, 0xf9, 0x54, 0x5e, 0xa7, 0x66, 0x33, 0xc7, 0x8f,
		0xbb, 0x87, 0xd0, 0x14, 0x94, 0xa5, 0xd7, 0xe0, 0x9e, 0xa3, 0x7a, 0xed, 0xa8, 0x19, 0x3f, 0xa2,
		0x3a, 0x4c, 0x74, 0x59, 0x09, 0xcf, 0x75, 0x5a, 0xaa, 0xed, 0x56, 0xcc, 0x71, 0xd2, 0x29, 0xf3,
		0xcf, 0x5d, 0xa7, 0x55, 0xfb, 0xc9, 0x80, 0x6b, 0xd9, 0x16, 0x4c, 0x96, 0x56, 0x7b, 0x3b, 0x17,
		0x37, 0x69, 0x5c, 0xda, 0x68, 0x68, 0x0b, 0x37, 0x69, 0xe7, 0x8e, 0x0f, 0x14, 0xd8, 0xf1, 0x8e,
		0xfe, 0x30, 0x98, 0xbb, 0x3f, 0xd4, 0xfe, 0x2a, 0xc3, 0x52, 0x51, 0x6f, 0x26, 0x25, 0x2e, 0xd9,
		0x0f, 0x25, 0x71, 0x46, 0x86, 0xc4, 0xc5, 0x80, 0x91, 0xc4, 0x1d, 0x77, 0x3c, 0x9d, 0x94, 0xb2,
		0x81, 0x33, 0x4a, 0xd9, 0x60, 0x7e, 0x29, 0xc3, 0x30, 0xd7, 0xf6, 0x54, 0x3d, 0x84, 0x62, 0xa8,
		0x5f, 0x97, 0x9a, 0x49, 0x20, 0x5e, 0xa4, 0x28, 0xc6, 0x2b, 0xb8, 0xa2, 0x96, 0xd4, 0x03, 0x7d,
		0xb8, 0x1f, 0xfa, 0x25, 0x99, 0x9d, 0x06, 0xfc, 0x1c, 0x26, 0x77, 0x31, 0x39, 0xf4, 0xf6, 0xf6,
		0x34, 0x36, 0x73, 0x05, 0xe5, 0x47, 0xd8, 0xe9, 0xaf, 0xc1, 0x17, 0x74, 0xa2, 0x82, 0xdd, 0xd4,
		0x69, 0xa7, 0x34, 0xa9, 0x7c, 0x16, 0x4d, 0xda, 0x84, 0x2a, 0x73, 0x99, 0x60, 0x58, 0x78, 0x5c,
		0x69, 0xec, 0xb9, 0x95, 0x85, 0xfe, 0xfe, 0x7f, 0x33, 0x4e, 0x31, 0xdb, 0xd9, 0x9d, 0x9d, 0xb5,
		0x5a, 0xa0, 0xb3, 0x22, 0x13, 0x26, 0x1d, 0x2c, 0xbf, 0x01, 0x23, 0x99, 0x90, 0xa5, 0xd5, 0x12,
		0x00, 0x39, 0x4e, 0xc6, 0x05, 0x99, 0xbb, 0x9e, 0xa4, 0x9a, 0x2a, 0x13, 0xfd, 0x0f, 0xc6, 0x08,
		0x97, 0x67, 0x44, 0xdb, 0x0c, 0x25, 0xd8, 0x55, 0x73, 0x54, 0x0e, 0xc6, 0x3e, 0xf1, 0x6c, 0x7a,
		0xbc, 0x08, 0x43, 0x4d, 0xda, 0xf4, 0xb4, 0x01, 0x9e, 0x4e, 0x4d, 0x79, 0x46, 0x9b, 0x9e, 0xa9,
		0xc2, 0x90, 0x09, 0xe3, 0xa7, 0x0c, 0xf5, 0xd4, 0x39, 0x95, 0xfb, 0xff, 0x74, 0xe7, 0xdf, 0x65,
		0x7d, 0xcd, 0xf3, 0x41, 0xd7, 0x48, 0xed, 0xcf, 0x32, 0x2c, 0x16, 0xfa, 0xac, 0xe9, 0xd9, 0x8e,
		0x67, 0x61, 0x24, 0xe9, 0x03, 0xcc, 0x56, 0x37, 0xb8, 0x6a, 0x42, 0x3c, 0x14, 0x79, 0xe1, 0x93,
		0x8d, 0x62, 0xf0, 0x2d, 0x34, 0x8a, 0x77, 0xe0, 0x79, 0xf3, 0x34, 0x8a, 0xd2, 0xbf, 0xda, 0x28,
		0xca, 0x67, 0x6e, 0x14, 0x1f, 0xc1, 0x84, 0x8f, 0x39, 0x75, 0x85, 0x46, 0xd4, 0xd7, 0x3b, 0xba,
		0x9c, 0xf3, 0x3d, 0x56, 0x2f, 0xe3, 0x15, 0x8a, 0xbe, 0xe4, 0xe3, 0x7e, 0xf7, 0x50, 0xa7, 0x48,
		0x56, 0x4f, 0x8a, 0x24, 0x81, 0xa9, 0x8e, 0x63, 0x60, 0x71, 0x1a, 0xb6, 0xa7, 0x05, 0x35, 0xed,
		0xad, 0xcc, 0x82, 0x6f, 0xda, 0xa6, 0x4c, 0xd1, 0x53, 0x5f, 0x3c, 0x4e, 0x1b, 0x7e, 0x3b, 0x16,
		0xfa, 0xd4, 0xbd, 0x1e, 0xcd, 0xbc, 0xd7, 0x63, 0xc5, 0xef, 0xf5, 0xb9, 0x37, 0xb8, 0xd7, 0xff,
		0x7d, 0xb3, 0x7b, 0xfd, 0xfb, 0x00, 0x2c, 0x17, 0xfe, 0xf0, 0x7f, 0xd7, 0x56, 0x6b, 0x16, 0x46,
		0xf4, 0xff, 0x3b, 0x94, 0xfb, 0x89, 0x3e, 0x6d, 0x21, 0x1a, 0x52, 0xee, 0x27, 0xb9, 0xae, 0x43,
		0xf9, 0xaf, 0x6b, 0xc7, 0xd1, 0x1c, 0xce, 0xe5, 0xdf, 0x4a, 0xbd, 0xfc, 0xdb, 0x97, 0x06, 0x2c,
		0x15, 0xfd, 0xff, 0x43, 0x7a, 0x31, 0x8d, 0x37, 0x2a, 0xe6, 0xda, 0xc7, 0x70, 0x89, 0x78, 0xcd,
		0xb4, 0xec, 0xb5, 0xca, 0xaa, 0xcf, 0xb6, 0x65, 0x3f, 0xd8, 0x36, 0x3e, 0x59, 0xde, 0x67, 0xe2,
		0x20, 0xdc, 0xad, 0x13, 0xaf, 0xd9, 0xe8, 0xfc, 0xc9, 0x65, 0x91, 0xd9, 0x4e, 0x63, 0xdf, 0x8b,
		0x7e, 0xe5, 0xd1, 0xbf, 0xbf, 0x3c, 0xc0, 0x3e, 0x3b, 0x5a, 0xde, 0x2d, 0xa9, 0xb1, 0xdb, 0xff,
		0x04, 0x00, 0x00, 0xff, 0xff, 0x24, 0x00, 0x18, 0x00, 0x42, 0x1a, 0x00, 0x00,
	},
	// uber/cadence/api/v1/tasklist.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x72, 0xe3, 0x34,
		0x14, 0xc6, 0x4d, 0x77, 0x49, 0x15, 0x9a, 0x35, 0x82, 0xdd, 0x6d, 0xb2, 0x2c, 0x04, 0x5f, 0xec,
		0x74, 0x76, 0xc0, 0x9e, 0x94, 0xe1, 0x8a, 0x0b, 0x26, 0x4d, 0x3a, 0xac, 0x27, 0x69, 0x36, 0x63,
		0x7b, 0x3b, 0x94, 0x1b, 0x21, 0x5b, 0xda, 0x44, 0xe3, 0x1f, 0x79, 0x24, 0x39, 0x6d, 0x5e, 0x84,
		0x87, 0xe1, 0x89, 0x78, 0x0c, 0x46, 0xb2, 0x13, 0x42, 0x1b, 0xb8, 0x93, 0xce, 0x77, 0xbe, 0xf3,
		0xf3, 0xe9, 0x1c, 0x01, 0xa7, 0x8a, 0xa9, 0xf0, 0x12, 0x4c, 0x68, 0x91, 0x50, 0x0f, 0x97, 0xcc,
		0x5b, 0x0f, 0x3d, 0x85, 0x65, 0x9a, 0x31, 0xa9, 0xdc, 0x52, 0x70, 0xc5, 0xe1, 0x17, 0xda, 0xc7,
		0x6d, 0x7c, 0x5c, 0x5c, 0x32, 0x77, 0x3d, 0xec, 0x7f, 0xbd, 0xe4, 0x7c, 0x99, 0x51, 0xcf, 0xb8,
		0xc4, 0xd5, 0x47, 0x8f, 0x54, 0x02, 0x2b, 0xc6, 0x8b, 0x9a, 0xd4, 0xff, 0xe6, 0x21, 0xae, 0x58,
		0x4e, 0xa5, 0xc2, 0x79, 0xd9, 0x38, 0x3c, 0x0a, 0x70, 0x27, 0x70, 0x59, 0x52, 0x21, 0x6b, 0xdc,
		0xf9, 0x00, 0xda, 0x11, 0x96, 0xe9, 0x8c, 0x49, 0x05, 0x21, 0x38, 0x2e, 0x70, 0x4e, 0xcf, 0xac,
		0x81, 0x75, 0x7e, 0x12, 0x98, 0x33, 0xfc, 0x11, 0x1c, 0xa7, 0xac, 0x20, 0x67, 0x47, 0x03, 0xeb,
		0xbc, 0x7b, 0xf1, 0xad, 0x7b, 0xa0, 0x48, 0x77, 0x1b, 0x60, 0xca, 0x0a, 0x12, 0x18, 0x77, 0x07,
		0x03, 0x7b, 0x6b, 0xbd, 0xa6, 0x0a, 0x13, 0xac, 0x30, 0xbc, 0x06, 0x5f, 0xe6, 0xf8, 0x1e, 0xe9,
		0xb6, 0x25, 0x2a, 0xa9, 0x40, 0x92, 0x26, 0xbc, 0x20, 0x26, 0x5d, 0xe7, 0xe2, 0x2b, 0xb7, 0xae,
		0xd4, 0xdd, 0x56, 0xea, 0x4e, 0x78, 0x15, 0x67, 0xf4, 0x06, 0x67, 0x15, 0x0d, 0x3e, 0xcf, 0xf1,
		0xbd, 0x0e, 0x28, 0x17, 0x54, 0x84, 0x86, 0xe6, 0x7c, 0x00, 0xbd, 0x6d, 0x8a, 0x05, 0x16, 0x8a,
		0x69, 0x55, 0x76, 0xb9, 0x6c, 0xd0, 0x4a, 0xe9, 0xa6, 0xe9, 0x44, 0x1f, 0xe1, 0x1b, 0xf0, 0x8c,
		0xdf, 0x15, 0x54, 0xa0, 0x15, 0x97, 0x0a, 0x99, 0x3e, 0x8f, 0x0c, 0x7a, 0x6a, 0xcc, 0xef, 0xb8,
		0x54, 0x73, 0x9c, 0x53, 0xe7, 0x2f, 0x0b, 0x74, 0xb7, 0x71, 0x43, 0x85, 0x55, 0x25, 0xe1, 0x77,
		0x00, 0xc6, 0x38, 0x49, 0x33, 0xbe, 0x44, 0x09, 0xaf, 0x0a, 0x85, 0x56, 0xac, 0x50, 0x26, 0x76,
		0x2b, 0xb0, 0x1b, 0x64, 0xac, 0x81, 0x77, 0xac, 0x50, 0xf0, 0x35, 0x00, 0x82, 0x62, 0x82, 0x32,
		0xba, 0xa6, 0x99, 0xc9, 0xd1, 0x0a, 0x4e, 0xb4, 0x65, 0xa6, 0x0d, 0xf0, 0x15, 0x38, 0xc1, 0x49,
		0xda, 0xa0, 0x2d, 0x83, 0xb6, 0x71, 0x92, 0xd6, 0xe0, 0x1b, 0xf0, 0x4c, 0x60, 0x45, 0xf7, 0xd5,
		0x39, 0x1e, 0x58, 0xe7, 0x56, 0x70, 0xaa, 0xcd, 0xbb, 0xde, 0xe1, 0x04, 0x9c, 0x6a, 0x19, 0x11,
		0x23, 0x28, 0xce, 0x78, 0x92, 0x9e, 0x3d, 0x31, 0x1a, 0x0e, 0xfe, 0xf3, 0x79, 0xfc, 0xc9, 0xa5,
		0xf6, 0x0b, 0x3a, 0x9a, 0xe6, 0x13, 0x73, 0x71, 0x7e, 0x06, 0x9d, 0x3d, 0x0c, 0xf6, 0x40, 0x5b,
		0x2a, 0x2c, 0x14, 0x62, 0xa4, 0x69, 0xee, 0x53, 0x73, 0xf7, 0x09, 0x7c, 0x0e, 0x9e, 0xd2, 0x82,
		0x68, 0xa0, 0xee, 0xe7, 0x09, 0x2d, 0x88, 0x4f, 0x9c, 0x3f, 0x2c, 0x00, 0x16, 0x3c, 0xcb, 0xa8,
		0xf0, 0x8b, 0x8f, 0x1c, 0x4e, 0x80, 0x9d, 0x61, 0xa9, 0x10, 0x4e, 0x12, 0x2a, 0x25, 0xd2, 0xa3,
		0xd8, 0x3c, 0x6e, 0xff, 0xd1, 0xe3, 0x46, 0xdb, 0x39, 0x0d, 0xba, 0x9a, 0x33, 0x32, 0x14, 0x6d,
		0x84, 0x7d, 0xd0, 0x66, 0x84, 0x16, 0x8a, 0xa9, 0x4d, 0xf3, 0x42, 0xbb, 0xfb, 0x21, 0x7d, 0x5a,
		0x07, 0xf4, 0x71, 0xfe, 0xb4, 0x40, 0x2f, 0x54, 0x2c, 0x49, 0x37, 0x57, 0xf7, 0x34, 0xa9, 0xf4,
		0x68, 0x8c, 0x94, 0x12, 0x2c, 0xae, 0x14, 0x95, 0xf0, 0x17, 0x60, 0xdf, 0x71, 0x91, 0x52, 0x61,
		0x66, 0x11, 0xe9, 0x1d, 0x6c, 0xea, 0x7c, 0xfd, 0xbf, 0xf3, 0x1d, 0x74, 0x6b, 0xda, 0x6e, 0x61,
		0x22, 0xd0, 0x93, 0xc9, 0x8a, 0x92, 0x2a, 0xa3, 0x48, 0x71, 0x54, 0xab, 0xa7, 0xdb, 0xe6, 0x95,
		0x32, 0xb5, 0x77, 0x2e, 0x7a, 0x8f, 0xc7, 0xba, 0xd9, 0xe0, 0xe0, 0xc5, 0x96, 0x1b, 0xf1, 0x50,
		0x33, 0xa3, 0x9a, 0xf8, 0xf6, 0x77, 0xf0, 0xd9, 0xfe, 0x46, 0xc1, 0x3e, 0x78, 0x11, 0x8d, 0xc2,
		0x29, 0x9a, 0xf9, 0x61, 0x84, 0xa6, 0xfe, 0x7c, 0x82, 0xfc, 0xf9, 0xcd, 0x68, 0xe6, 0x4f, 0xec,
		0x4f, 0x60, 0x0f, 0x3c, 0x7f, 0x80, 0xcd, 0xdf, 0x07, 0xd7, 0xa3, 0x99, 0x6d, 0x1d, 0x80, 0xc2,
		0xc8, 0x1f, 0x4f, 0x6f, 0xed, 0xa3, 0xb7, 0xe4, 0x9f, 0x0c, 0xd1, 0xa6, 0xa4, 0xff, 0xce, 0x10,
		0xdd, 0x2e, 0xae, 0xf6, 0x32, 0xbc, 0x02, 0x2f, 0x1f, 0x60, 0x93, 0xab, 0xb1, 0x1f, 0xfa, 0xef,
		0xe7, 0xb6, 0x75, 0x00, 0x1c, 0x8d, 0x23, 0xff, 0xc6, 0x8f, 0x6e, 0xed, 0xa3, 0xcb, 0x5f, 0xc1,
		0xcb, 0x84, 0xe7, 0x87, 0x14, 0xbd, 0x6c, 0x8f, 0x4a, 0xb6, 0xd0, 0x82, 0x2c, 0xac, 0xdf, 0x86,
		0x4b, 0xa6, 0x56, 0x55, 0xec, 0x26, 0x3c, 0xf7, 0xf6, 0xbf, 0xc9, 0xef, 0x19, 0xc9, 0xbc, 0x25,
		0xaf, 0x7f, 0xae, 0xe6, 0xcf, 0xfc, 0x09, 0x97, 0x6c, 0x3d, 0x8c, 0x9f, 0x1a, 0xdb, 0x0f, 0x7f,
		0x07, 0x00, 0x00, 0xff, 0xff, 0x99, 0x3b, 0x06, 0xfc, 0x57, 0x05, 0x00, 0x00,
	},
	// uber/cadence/api/v1/workflow.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcd, 0x72, 0xdb, 0xc8,
		0xd5, 0xfd, 0x40, 0x4a, 0xb2, 0x74, 0xa9, 0x1f, 0xa8, 0x65, 0x8d, 0x68, 0x7b, 0x6c, 0xcb, 0x9c,
		0xcf, 0xb6, 0xcc, 0x8c, 0xa4, 0x91, 0x3d, 0x1e, 0xc7, 0xe3, 0x38, 0x0e, 0x04, 0x40, 0x16, 0x6c,
		0x0a, 0x64, 0x9a, 0xa0, 0x65, 0x4d, 0xa5, 0x82, 0x82, 0xc8, 0x96, 0xd4, 0x65, 0x12, 0x60, 0x01,
		0xa0, 0x6d, 0xed, 0x53, 0x95, 0x75, 0x76, 0xa9, 0x64, 0x93, 0x07, 0x48, 0x55, 0x2a, 0x0f, 0x90,
		0x4a, 0x2a, 0x8b, 0xec, 0xb2, 0xcd, 0x32, 0xfb, 0xbc, 0x45, 0xaa, 0x1b, 0x0d, 0x12, 0xfc, 0x05,
		0x9d, 0x54, 0x4d, 0x76, 0xc2, 0xc5, 0x39, 0x07, 0xb7, 0x6f, 0xdf, 0x7b, 0xd0, 0x10, 0xa1, 0xd0,
		0x39, 0x25, 0xfe, 0x6e, 0xdd, 0x69, 0x10, 0xb7, 0x4e, 0x76, 0x9d, 0x36, 0xdd, 0x7d, 0xbf, 0xb7,
		0xfb, 0xc1, 0xf3, 0xdf, 0x9d, 0x35, 0xbd, 0x0f, 0x3b, 0x6d, 0xdf, 0x0b, 0x3d, 0xb4, 0xc6, 0x30,
		0x3b, 0x02, 0xb3, 0xe3, 0xb4, 0xe9, 0xce, 0xfb, 0xbd, 0xeb, 0xb7, 0xce, 0x3d, 0xef, 0xbc, 0x49,
		0x76, 0x39, 0xe4, 0xb4, 0x73, 0xb6, 0xdb, 0xe8, 0xf8, 0x4e, 0x48, 0x3d, 0x37, 0x22, 0x5d, 0xbf,
		0x3d, 0x78, 0x3f, 0xa4, 0x2d, 0x12, 0x84, 0x4e, 0xab, 0x2d, 0x00, 0x9b, 0xa3, 0x9e, 0x5c, 0xf7,
		0x5a, 0xad, 0xae, 0xc4, 0xc8, 0xdc, 0x42, 0x27, 0x78, 0xd7, 0xa4, 0x41, 0x18, 0x61, 0x0a, 0x7f,
		0x99, 0x83, 0xf5, 0x63, 0x91, 0xae, 0xfe, 0x91, 0xd4, 0x3b, 0x2c, 0x05, 0xc3, 0x3d, 0xf3, 0x50,
		0x0d, 0x50, 0xbc, 0x0e, 0x9b, 0xc4, 0x77, 0xf2, 0xd2, 0xa6, 0xb4, 0x95, 0x7b, 0x78, 0x6f, 0x67,
		0xc4, 0x92, 0x76, 0x86, 0x74, 0xf0, 0xea, 0x87, 0xc1, 0x10, 0x7a, 0x0c, 0x33, 0xe1, 0x65, 0x9b,
		0xe4, 0x33, 0x5c, 0xe8, 0xce, 0x44, 0x21, 0xeb, 0xb2, 0x4d, 0x30, 0x87, 0xa3, 0xa7, 0x00, 0x41,
		0xe8, 0xf8, 0xa1, 0xcd, 0xca, 0x90, 0xcf, 0x72, 0xf2, 0xf5, 0x9d, 0xa8, 0x46, 0x3b, 0x71, 0x8d,
		0x76, 0xac, 0xb8, 0x46, 0x78, 0x81, 0xa3, 0xd9, 0x35, 0xa3, 0xd6, 0x9b, 0x5e, 0x40, 0x22, 0xea,
		0x4c, 0x3a, 0x95, 0xa3, 0x39, 0xd5, 0x82, 0xc5, 0x88, 0x1a, 0x84, 0x4e, 0xd8, 0x09, 0xf2, 0xb3,
		0x9b, 0xd2, 0xd6, 0xf2, 0xc3, 0xbd, 0xe9, 0x56, 0xaf, 0x32, 0x66, 0x95, 0x13, 0x71, 0xae, 0xde,
		0xbb, 0x40, 0x77, 0x61, 0xf9, 0x82, 0x06, 0xa1, 0xe7, 0x5f, 0xda, 0x4d, 0xe2, 0x9e, 0x87, 0x17,
		0xf9, 0xb9, 0x4d, 0x69, 0x2b, 0x8b, 0x97, 0x44, 0xb4, 0xc4, 0x83, 0xe8, 0x67, 0xb0, 0xde, 0x76,
		0x7c, 0xe2, 0x86, 0xbd, 0xf2, 0xdb, 0xd4, 0x3d, 0xf3, 0xf2, 0x57, 0xf8, 0x12, 0xb6, 0x46, 0x66,
		0x51, 0xe1, 0x8c, 0xbe, 0x9d, 0xc4, 0x6b, 0xed, 0xe1, 0x20, 0x52, 0x60, 0xb9, 0x27, 0xcb, 0x2b,
		0x33, 0x9f, 0x5a, 0x99, 0xa5, 0x2e, 0x83, 0x57, 0x67, 0x1b, 0x66, 0x5a, 0xa4, 0xe5, 0xe5, 0x17,
		0x38, 0xf1, 0xda, 0xc8, 0x7c, 0x8e, 0x48, 0xcb, 0xc3, 0x1c, 0x86, 0x30, 0xac, 0x06, 0xc4, 0xf1,
		0xeb, 0x17, 0xb6, 0x13, 0x86, 0x3e, 0x3d, 0xed, 0x84, 0x24, 0xc8, 0x03, 0xe7, 0xde, 0x1d, 0xc9,
		0xad, 0x72, 0xb4, 0xd2, 0x05, 0x63, 0x39, 0x18, 0x88, 0xa0, 0x12, 0xac, 0x3a, 0x9d, 0xd0, 0xb3,
		0x7d, 0x12, 0x90, 0xd0, 0x6e, 0x7b, 0xd4, 0x0d, 0x83, 0x7c, 0x8e, 0x6b, 0x6e, 0x8e, 0xd4, 0xc4,
		0x0c, 0x58, 0xe1, 0x38, 0xbc, 0xc2, 0xa8, 0x89, 0x00, 0xba, 0x01, 0x0b, 0x6c, 0x3c, 0x6c, 0x36,
		0x1f, 0xf9, 0xc5, 0x4d, 0x69, 0x6b, 0x01, 0xcf, 0xb3, 0x40, 0x89, 0x06, 0x21, 0xda, 0x80, 0x2b,
		0x34, 0xb0, 0xeb, 0xbe, 0xe7, 0xe6, 0x97, 0x36, 0xa5, 0xad, 0x79, 0x3c, 0x47, 0x03, 0xd5, 0xf7,
		0xdc, 0xc2, 0xaf, 0x33, 0x70, 0x6b, 0x78, 0xf3, 0x3d, 0xf7, 0x8c, 0x9e, 0x8b, 0x91, 0x46, 0xdf,
		0x26, 0x85, 0xa3, 0x11, 0xba, 0x39, 0x32, 0x3d, 0x4b, 0x3c, 0x2d, 0xf1, 0x5c, 0x07, 0x36, 0x7b,
		0x1b, 0x25, 0x66, 0xc0, 0xb3, 0x7b, 0x1d, 0xed, 0x75, 0x42, 0x31, 0x4c, 0xd7, 0x86, 0xb6, 0x4e,
		0x13, 0x09, 0xe0, 0xcf, 0xbb, 0x12, 0x55, 0x3e, 0x17, 0x9e, 0x1a, 0xf7, 0xb8, 0xd7, 0x09, 0xd1,
		0x31, 0xdc, 0xe0, 0xe9, 0x8d, 0x51, 0xcf, 0xa6, 0xa9, 0x6f, 0x30, 0xf6, 0x08, 0xe1, 0xc2, 0xdf,
		0x25, 0x58, 0x1b, 0xd1, 0x91, 0xac, 0xd0, 0x0d, 0xaf, 0xe5, 0x50, 0xd7, 0xa6, 0x0d, 0x5e, 0x8f,
		0x05, 0x3c, 0x1f, 0x05, 0x8c, 0x06, 0xba, 0x0d, 0x39, 0x71, 0xd3, 0x75, 0x5a, 0x91, 0x51, 0x2c,
		0x60, 0x88, 0x42, 0xa6, 0xd3, 0x22, 0x63, 0x9c, 0x29, 0xfb, 0xdf, 0x3a, 0xd3, 0x1d, 0x58, 0xa4,
		0x2e, 0x0d, 0xa9, 0x13, 0x92, 0x06, 0xcb, 0x6b, 0x86, 0x0f, 0x65, 0xae, 0x1b, 0x33, 0x1a, 0x85,
		0x5f, 0x49, 0xb0, 0xae, 0x7f, 0x0c, 0x89, 0xef, 0x3a, 0xcd, 0xef, 0xc5, 0x2d, 0x07, 0x73, 0xca,
		0x0c, 0xe7, 0xf4, 0xcf, 0x59, 0x58, 0xab, 0x10, 0xb7, 0x41, 0xdd, 0x73, 0xa5, 0x1e, 0xd2, 0xf7,
		0x34, 0xbc, 0xe4, 0x19, 0xdd, 0x86, 0x9c, 0x23, 0xae, 0x7b, 0x55, 0x86, 0x38, 0x64, 0x34, 0xd0,
		0x01, 0x2c, 0x75, 0x01, 0xa9, 0x96, 0x1c, 0x4b, 0x73, 0x4b, 0x5e, 0x74, 0x12, 0x57, 0xe8, 0x05,
		0xcc, 0x32, 0x7b, 0x8c, 0x5c, 0x79, 0xf9, 0xe1, 0x83, 0xd1, 0xbe, 0xd4, 0x9f, 0x21, 0x73, 0x42,
		0x82, 0x23, 0x1e, 0x32, 0x60, 0xf5, 0x82, 0x38, 0x7e, 0x78, 0x4a, 0x9c, 0xd0, 0x6e, 0x90, 0xd0,
		0xa1, 0xcd, 0x40, 0xf8, 0xf4, 0xe7, 0x63, 0x4c, 0xee, 0xb2, 0xe9, 0x39, 0x0d, 0x2c, 0x77, 0x69,
		0x5a, 0xc4, 0x42, 0xaf, 0x60, 0xad, 0xe9, 0x04, 0xa1, 0xdd, 0xd3, 0xe3, 0xd6, 0x36, 0x9b, 0x6a,
		0x6d, 0xab, 0x8c, 0x76, 0x18, 0xb3, 0xb8, 0xbd, 0x1d, 0x00, 0x0f, 0x46, 0x53, 0x41, 0x1a, 0x91,
		0xd2, 0x5c, 0xaa, 0xd2, 0x0a, 0x23, 0x55, 0x23, 0x0e, 0xd7, 0xc9, 0xc3, 0x15, 0x27, 0x0c, 0x49,
		0xab, 0x1d, 0x72, 0xe7, 0x9e, 0xc5, 0xf1, 0x25, 0x7a, 0x00, 0x72, 0xcb, 0xf9, 0x48, 0x5b, 0x9d,
		0x96, 0x2d, 0x42, 0x01, 0x77, 0xe1, 0x59, 0xbc, 0x22, 0xe2, 0x8a, 0x08, 0x33, 0xbb, 0x0e, 0xea,
		0x17, 0xa4, 0xd1, 0x69, 0xc6, 0x99, 0x2c, 0xa4, 0xdb, 0x75, 0x97, 0xc1, 0xf3, 0x50, 0x61, 0x85,
		0x7c, 0x6c, 0xd3, 0x68, 0x66, 0x23, 0x0d, 0x48, 0xd5, 0x58, 0xee, 0x51, 0xb8, 0xc8, 0x0b, 0x58,
		0xe4, 0x45, 0x39, 0x73, 0x68, 0xb3, 0xe3, 0x13, 0xe1, 0xb5, 0xa3, 0xb7, 0xe9, 0x20, 0xc2, 0xe0,
		0x1c, 0x63, 0x88, 0x0b, 0xf4, 0x15, 0x5c, 0xe5, 0x02, 0xac, 0xd7, 0x89, 0x6f, 0xd3, 0x06, 0x71,
		0x43, 0x1a, 0x5e, 0x0a, 0xbb, 0x45, 0xec, 0xde, 0x31, 0xbf, 0x65, 0x88, 0x3b, 0x85, 0xdf, 0x66,
		0xe0, 0x9a, 0x68, 0x1f, 0xf5, 0x82, 0x36, 0x1b, 0xdf, 0xcb, 0xe0, 0x7d, 0x99, 0x90, 0x65, 0xc3,
		0x91, 0xf4, 0x22, 0xf9, 0x43, 0xe2, 0x7c, 0xc2, 0x1d, 0x69, 0x70, 0x4c, 0xb3, 0x43, 0x63, 0x8a,
		0xde, 0x80, 0x78, 0x0d, 0x0b, 0x73, 0x6d, 0x7b, 0x4d, 0x5a, 0xbf, 0xe4, 0x6d, 0xbe, 0x3c, 0x26,
		0xd1, 0xc8, 0x39, 0xb9, 0xa1, 0x56, 0x38, 0x1a, 0xaf, 0xb6, 0x07, 0x43, 0x85, 0xbf, 0x65, 0xba,
		0xe3, 0xaf, 0x91, 0x3a, 0x0d, 0xe2, 0xba, 0x74, 0xa7, 0x52, 0x4a, 0x9f, 0xca, 0x98, 0xd8, 0x37,
		0x95, 0xc3, 0x1d, 0x97, 0xf9, 0xd4, 0x8e, 0x7b, 0x0e, 0x8b, 0x7d, 0xc3, 0x93, 0x7e, 0x6c, 0xcb,
		0x05, 0xa3, 0x07, 0x67, 0xa6, 0x7f, 0x70, 0x30, 0x6c, 0x78, 0x3e, 0x3d, 0xa7, 0xae, 0xd3, 0xb4,
		0x07, 0x92, 0x4c, 0x1f, 0xf5, 0xf5, 0x98, 0x5a, 0x4d, 0x26, 0x5b, 0xf8, 0x53, 0x06, 0xae, 0xc5,
		0xf6, 0x54, 0xf2, 0xea, 0x4e, 0x53, 0xa3, 0x41, 0xdb, 0x09, 0xeb, 0x17, 0xd3, 0xb9, 0xe9, 0xff,
		0xbe, 0x5c, 0x3f, 0x87, 0x5b, 0xfd, 0x19, 0xd8, 0xde, 0x99, 0x1d, 0x5e, 0xd0, 0xc0, 0x4e, 0x56,
		0x71, 0xb2, 0xe0, 0xf5, 0xbe, 0x8c, 0xca, 0x67, 0xd6, 0x05, 0x0d, 0x84, 0x07, 0xa1, 0x9b, 0x00,
		0xfc, 0x94, 0x10, 0x7a, 0xef, 0x88, 0xcb, 0xeb, 0xbc, 0x88, 0xf9, 0xb1, 0xc6, 0x62, 0x81, 0xc2,
		0x2b, 0xc8, 0x25, 0xcf, 0x52, 0xcf, 0x60, 0x4e, 0x1c, 0xc7, 0xa4, 0xcd, 0xec, 0x56, 0xee, 0xe1,
		0x17, 0x29, 0xc7, 0x31, 0x7e, 0x52, 0x15, 0x94, 0xc2, 0x1f, 0x32, 0xb0, 0xdc, 0x7f, 0x0b, 0xdd,
		0x87, 0x95, 0x53, 0xea, 0x3a, 0xfe, 0xa5, 0x5d, 0xbf, 0x20, 0xf5, 0x77, 0x41, 0xa7, 0x25, 0x36,
		0x61, 0x39, 0x0a, 0xab, 0x22, 0x8a, 0xd6, 0x61, 0xce, 0xef, 0xb8, 0xf1, 0xcb, 0x72, 0x01, 0xcf,
		0xfa, 0x1d, 0x76, 0xaa, 0x78, 0x0e, 0x37, 0xce, 0xa8, 0x1f, 0xb0, 0x17, 0x4c, 0xd4, 0xec, 0x76,
		0xdd, 0x6b, 0xb5, 0x9b, 0xa4, 0x6f, 0x62, 0xf3, 0x1c, 0x12, 0x8f, 0x83, 0x1a, 0x03, 0x38, 0x7d,
		0xb1, 0xee, 0x13, 0xa7, 0xbb, 0x37, 0xe9, 0xa5, 0xcc, 0x09, 0xbc, 0xb0, 0xcd, 0x25, 0x6e, 0xa4,
		0xd4, 0x3d, 0x9f, 0xb6, 0x4d, 0x17, 0x63, 0x02, 0x17, 0xb8, 0x05, 0xc0, 0xcf, 0xb8, 0xa1, 0x73,
		0xda, 0x8c, 0xde, 0x42, 0xf3, 0x38, 0x11, 0x29, 0xfe, 0x51, 0x82, 0xab, 0xa3, 0xde, 0xb1, 0xa8,
		0x00, 0xb7, 0x2a, 0xba, 0xa9, 0x19, 0xe6, 0x4b, 0x5b, 0x51, 0x2d, 0xe3, 0x8d, 0x61, 0x9d, 0xd8,
		0x55, 0x4b, 0xb1, 0x74, 0xdb, 0x30, 0xdf, 0x28, 0x25, 0x43, 0x93, 0xff, 0x0f, 0xfd, 0x3f, 0x6c,
		0x8e, 0xc1, 0x54, 0xd5, 0x43, 0x5d, 0xab, 0x95, 0x74, 0x4d, 0x96, 0x26, 0x28, 0x55, 0x2d, 0x05,
		0x5b, 0xba, 0x26, 0x67, 0xd0, 0x0f, 0xe0, 0xfe, 0x18, 0x8c, 0xaa, 0x98, 0xaa, 0x5e, 0xb2, 0xb1,
		0xfe, 0xd3, 0x9a, 0x5e, 0x65, 0xe0, 0x6c, 0xf1, 0x17, 0xbd, 0x9c, 0xfb, 0x1c, 0x28, 0xf9, 0x24,
		0x4d, 0x57, 0x8d, 0xaa, 0x51, 0x36, 0x27, 0xe5, 0x3c, 0x80, 0x19, 0x93, 0xf3, 0x20, 0x2a, 0xce,
		0xb9, 0xf8, 0xcb, 0x4c, 0xef, 0x13, 0xd8, 0x68, 0x60, 0xd2, 0x89, 0xbd, 0x95, 0x3d, 0xe3, 0xb8,
		0x8c, 0x5f, 0x1f, 0x94, 0xca, 0xc7, 0xb6, 0xa1, 0xd9, 0x58, 0xaf, 0x55, 0x75, 0xbb, 0x52, 0x2e,
		0x19, 0xea, 0x49, 0x22, 0x93, 0x1f, 0xc2, 0xd7, 0x63, 0x51, 0x4a, 0x89, 0x45, 0xb5, 0x5a, 0xa5,
		0x64, 0xa8, 0xec, 0xa9, 0x07, 0x8a, 0x51, 0xd2, 0x35, 0xbb, 0x6c, 0x96, 0x4e, 0x64, 0x09, 0x7d,
		0x09, 0x5b, 0xd3, 0x32, 0xe5, 0x0c, 0xda, 0x86, 0x07, 0x63, 0xd1, 0x58, 0x7f, 0xa5, 0xab, 0x56,
		0x02, 0x9e, 0x45, 0x7b, 0xb0, 0x3d, 0x16, 0x6e, 0xe9, 0xf8, 0xc8, 0x30, 0x79, 0x41, 0x0f, 0x6c,
		0x5c, 0x33, 0x4d, 0xc3, 0x7c, 0x29, 0xcf, 0x14, 0x7f, 0x27, 0xc1, 0xea, 0xd0, 0x4b, 0x07, 0xdd,
		0x86, 0x1b, 0x15, 0x05, 0xeb, 0xa6, 0x65, 0xab, 0xa5, 0xf2, 0xa8, 0x02, 0x8c, 0x01, 0x28, 0xfb,
		0x8a, 0xa9, 0x95, 0x4d, 0x59, 0x42, 0xf7, 0xa0, 0x30, 0x0a, 0x20, 0x7a, 0x41, 0xb4, 0x86, 0x9c,
		0x41, 0x77, 0xe0, 0xe6, 0x28, 0x5c, 0x37, 0x5b, 0x39, 0x5b, 0xfc, 0x57, 0x06, 0x3e, 0x9f, 0xf4,
		0xa5, 0xcd, 0x3a, 0xb0, 0xbb, 0x6c, 0xfd, 0xad, 0xae, 0xd6, 0x2c, 0xb6, 0xe7, 0x91, 0x1e, 0xdb,
		0xf9, 0x5a, 0x35, 0x91, 0x79, 0xb2, 0xa4, 0x63, 0xc0, 0x6a, 0xf9, 0xa8, 0x52, 0xd2, 0x2d, 0xde,
		0x4d, 0x45, 0xb8, 0x97, 0x06, 0x8f, 0x36, 0x58, 0xce, 0xf4, 0xed, 0xed, 0x38, 0x69, 0xbe, 0x6e,
		0x36, 0x0a, 0x68, 0x07, 0x8a, 0x69, 0xe8, 0x6e, 0x15, 0x34, 0x79, 0x06, 0x7d, 0x0d, 0x5f, 0xa5,
		0x27, 0x6e, 0x5a, 0x86, 0x59, 0xd3, 0x35, 0x5b, 0xa9, 0xda, 0xa6, 0x7e, 0x2c, 0xcf, 0x4e, 0xb3,
		0x5c, 0xcb, 0x38, 0x62, 0xfd, 0x59, 0xb3, 0xe4, 0xb9, 0xe2, 0x9f, 0x25, 0xf8, 0x4c, 0xf5, 0xdc,
		0x90, 0xba, 0x1d, 0xa2, 0x04, 0x26, 0xf9, 0x60, 0x44, 0xe7, 0x19, 0xcf, 0x47, 0x77, 0xe1, 0x4e,
		0xac, 0x2f, 0xe4, 0x6d, 0xc3, 0x34, 0x2c, 0x43, 0xb1, 0xca, 0x38, 0x51, 0xdf, 0x89, 0x30, 0x36,
		0x90, 0x9a, 0x8e, 0xa3, 0xba, 0x8e, 0x87, 0x61, 0xdd, 0xc2, 0x27, 0xa2, 0x15, 0x22, 0x87, 0x19,
		0x8f, 0x55, 0x31, 0x9b, 0x6f, 0x31, 0xff, 0x72, 0xb6, 0xf8, 0x7b, 0x09, 0x72, 0xe2, 0x5b, 0x94,
		0x7f, 0xaa, 0xe4, 0xe1, 0x2a, 0x5b, 0x60, 0xb9, 0x66, 0xd9, 0xd6, 0x49, 0x45, 0xef, 0xef, 0xe1,
		0xbe, 0x3b, 0xdc, 0x1e, 0x6c, 0xab, 0x1c, 0x55, 0x27, 0x72, 0x92, 0x7e, 0x80, 0x78, 0x0a, 0xc3,
		0x70, 0xb0, 0x9c, 0x99, 0x88, 0x89, 0x74, 0xb2, 0xe8, 0x3a, 0x7c, 0xd6, 0x87, 0x39, 0xd4, 0x15,
		0x6c, 0xed, 0xeb, 0x8a, 0x25, 0xcf, 0x14, 0x7f, 0x23, 0xc1, 0xb5, 0xd8, 0x09, 0x2d, 0xf6, 0x62,
		0xa5, 0x2d, 0xd2, 0x28, 0x77, 0x42, 0xd5, 0xe9, 0x04, 0x04, 0x3d, 0x80, 0xbb, 0x5d, 0x0f, 0xb3,
		0x94, 0xea, 0xeb, 0xde, 0x5e, 0xd9, 0xaa, 0xc2, 0x86, 0xbb, 0xb7, 0x9a, 0x54, 0xa8, 0x48, 0x41,
		0x96, 0xd0, 0x7d, 0xf8, 0x62, 0x32, 0x14, 0xeb, 0x55, 0xdd, 0x92, 0x33, 0xc5, 0x7f, 0xe4, 0x60,
		0x23, 0x99, 0x1c, 0x3b, 0xd0, 0x93, 0x46, 0x94, 0xda, 0x3d, 0x28, 0xf4, 0x8b, 0x08, 0x9f, 0x1b,
		0xcc, 0x6b, 0x0f, 0xb6, 0x27, 0xe0, 0x6a, 0xe6, 0xa1, 0x62, 0x6a, 0xec, 0x3a, 0x06, 0xc9, 0x12,
		0x7a, 0x01, 0xcf, 0x26, 0x50, 0xf6, 0x15, 0xad, 0x57, 0xe5, 0xee, 0x1b, 0x47, 0xb1, 0x2c, 0x6c,
		0xec, 0xd7, 0x2c, 0xbd, 0x2a, 0x67, 0x90, 0x0e, 0x4a, 0x8a, 0x40, 0xbf, 0x0f, 0x8d, 0x94, 0xc9,
		0xa2, 0xa7, 0xf0, 0x38, 0x2d, 0x8f, 0xa8, 0x65, 0x8c, 0x23, 0x1d, 0x27, 0xa9, 0x33, 0xe8, 0x5b,
		0xf8, 0x26, 0x85, 0x2a, 0x9e, 0x3c, 0xc4, 0x9d, 0x45, 0xcf, 0xe0, 0x49, 0x6a, 0xf6, 0x6a, 0x19,
		0x6b, 0xf6, 0x91, 0x82, 0x5f, 0xf7, 0x93, 0xe7, 0x90, 0x01, 0x7a, 0xda, 0x83, 0x85, 0xbb, 0xd9,
		0x23, 0x7c, 0x21, 0x21, 0x75, 0x65, 0x8a, 0x2a, 0xb2, 0x40, 0x8a, 0xcc, 0x3c, 0x7a, 0x09, 0xea,
		0x74, 0xa5, 0x98, 0x2c, 0xb4, 0x80, 0xde, 0x82, 0xf5, 0x69, 0xbb, 0xaa, 0xbf, 0xb5, 0x74, 0x6c,
		0x2a, 0x69, 0xca, 0x80, 0x9e, 0xc3, 0xd3, 0xd4, 0xa2, 0xf5, 0xfb, 0x4f, 0x82, 0x9e, 0x43, 0x4f,
		0xe0, 0xd1, 0x04, 0x7a, 0xb2, 0x47, 0x7a, 0xa7, 0x02, 0x43, 0x93, 0x17, 0xd1, 0x63, 0xd8, 0x9b,
		0x40, 0xe4, 0x53, 0x68, 0x57, 0x2d, 0x43, 0x7d, 0x7d, 0x12, 0xdd, 0x2e, 0x19, 0x55, 0x4b, 0x5e,
		0x42, 0x3f, 0x81, 0x1f, 0x4d, 0xa0, 0x75, 0x17, 0xcb, 0xfe, 0xd0, 0x71, 0x62, 0xc4, 0x18, 0xac,
		0x86, 0x75, 0x79, 0x79, 0x8a, 0x3d, 0xa9, 0x1a, 0x2f, 0xd3, 0x2b, 0xb7, 0x82, 0x54, 0x78, 0x31,
		0xd5, 0x88, 0xa8, 0x87, 0x46, 0x49, 0x1b, 0x2d, 0x22, 0xa3, 0x47, 0xb0, 0x3b, 0x41, 0xe4, 0xa0,
		0x8c, 0x55, 0x5d, 0xbc, 0xb1, 0xba, 0x26, 0xb1, 0x8a, 0xbe, 0x81, 0x87, 0x93, 0x48, 0x8a, 0x51,
		0x2a, 0xbf, 0xd1, 0xf1, 0x20, 0x0f, 0xb1, 0xd7, 0xe8, 0x74, 0x4b, 0x37, 0xcc, 0x4a, 0xcd, 0xb2,
		0xab, 0xc6, 0x77, 0xba, 0xbc, 0xc6, 0x5e, 0xa3, 0xa9, 0x3b, 0x15, 0xd7, 0x4a, 0xbe, 0x3a, 0x6c,
		0xc6, 0x43, 0x0f, 0xd9, 0x37, 0x4c, 0x05, 0x9f, 0xc8, 0xeb, 0x29, 0xbd, 0x37, 0x6c, 0x74, 0x7d,
		0x2d, 0xf4, 0xd9, 0x34, 0xcb, 0xd1, 0x15, 0xac, 0x1e, 0x26, 0x2b, 0xbe, 0xc1, 0xde, 0x3a, 0x77,
		0xf8, 0x3f, 0x56, 0x86, 0xce, 0x55, 0x49, 0x8b, 0xdf, 0x83, 0xed, 0x68, 0xdf, 0x46, 0x74, 0xc1,
		0x18, 0xb7, 0xdf, 0x87, 0x1f, 0x4f, 0x47, 0xe9, 0xde, 0x57, 0x4a, 0x58, 0x57, 0xb4, 0x93, 0xee,
		0x91, 0x54, 0x2a, 0xfe, 0x55, 0x82, 0xa2, 0xea, 0xb8, 0x75, 0xd2, 0x8c, 0xff, 0xef, 0x3a, 0x31,
		0xcb, 0x67, 0xf0, 0x64, 0x8a, 0x79, 0x1f, 0x93, 0xef, 0x31, 0x54, 0x3f, 0x95, 0x5c, 0x33, 0x5f,
		0x9b, 0xe5, 0x63, 0x73, 0x12, 0x41, 0x2c, 0xa2, 0x4a, 0xcf, 0xf9, 0x3f, 0x8d, 0xa7, 0x5b, 0x84,
		0x68, 0xbb, 0xff, 0x6c, 0x11, 0x9f, 0x4a, 0x9e, 0x6a, 0x11, 0xfb, 0x6f, 0x61, 0xa3, 0xee, 0xb5,
		0x46, 0x7d, 0xc5, 0xef, 0xcf, 0x2b, 0x6d, 0x5a, 0x61, 0x5f, 0xb0, 0x15, 0xe9, 0xbb, 0xbd, 0x73,
		0x1a, 0x5e, 0x74, 0x4e, 0x77, 0xea, 0x5e, 0x6b, 0x37, 0xf9, 0xfb, 0xe3, 0x36, 0x6d, 0x34, 0x77,
		0xcf, 0xbd, 0xe8, 0xf7, 0x4c, 0xf1, 0x63, 0xe4, 0x33, 0xa7, 0x4d, 0xdf, 0xef, 0x9d, 0xce, 0xf1,
		0xd8, 0xa3, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x00, 0xac, 0xaa, 0x91, 0x4c, 0x1d, 0x00, 0x00,
	},
	// uber/cadence/api/v1/history.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x5f, 0x6c, 0x1c, 0x57,
		0xd5, 0xef, 0xec, 0xda, 0xbb, 0xde, 0xb3, 0x8e, 0x63, 0xdf, 0x24, 0x8e, 0x9d, 0xbf, 0xce, 0x24,
		0x4d, 0x5c, 0xc7, 0x59, 0x27, 0x4e, 0x9a, 0x7c, 0x69, 0xbe, 0xb6, 0x9f, 0xe3, 0xd8, 0xea, 0x4a,
		0xfe, 0x92, 0x68, 0xe2, 0xa4, 0x05, 0x21, 0x2d, 0xe3, 0x99, 0xeb, 0x78, 0xe4, 0xdd, 0x9d, 0xed,
		0xcc, 0xac, 0x37, 0x46, 0xe2, 0x89, 0x07, 0x24, 0xd4, 0x0a, 0xaa, 0x0a, 0x89, 0x0a, 0x10, 0x08,
		0x09, 0xd4, 0x22, 0xa4, 0x22, 0x10, 0x02, 0xc4, 0x0b, 0x20, 0x21, 0x90, 0x40, 0x85, 0x27, 0x5e,
		0x78, 0x80, 0x07, 0x1e, 0xe8, 0x1b, 0x0f, 0x94, 0x37, 0x24, 0x34, 0x77, 0xee, 0xec, 0xce, 0x9f,
		0x7b, 0x67, 0xee, 0xac, 0x37, 0x2d, 0xa8, 0x79, 0xf3, 0xdc, 0x39, 0xf7, 0xcc, 0xef, 0x9e, 0x7b,
		0xce, 0xb9, 0xe7, 0x9e, 0x73, 0xd6, 0x70, 0xaa, 0xbd, 0x81, 0xad, 0x05, 0x4d, 0xd5, 0x71, 0x53,
		0xc3, 0x0b, 0x6a, 0xcb, 0x58, 0xd8, 0xb9, 0xb4, 0xb0, 0x65, 0xd8, 0x8e, 0x69, 0xed, 0x56, 0x5a,
		0x96, 0xe9, 0x98, 0xe8, 0x80, 0x4b, 0x52, 0xa1, 0x24, 0x15, 0xb5, 0x65, 0x54, 0x76, 0x2e, 0x1d,
		0x39, 0xf1, 0xd0, 0x34, 0x1f, 0xd6, 0xf1, 0x02, 0x21, 0xd9, 0x68, 0x6f, 0x2e, 0xe8, 0x6d, 0x4b,
		0x75, 0x0c, 0xb3, 0xe9, 0x4d, 0x3a, 0x72, 0x32, 0xfa, 0xde, 0x31, 0x1a, 0xd8, 0x76, 0xd4, 0x46,
		0x8b, 0x12, 0xcc, 0xb0, 0x3e, 0xac, 0x99, 0x8d, 0x46, 0x97, 0x85, 0xcc, 0xa2, 0x70, 0x54, 0x7b,
		0xbb, 0x6e, 0xd8, 0x4e, 0x12, 0x4d, 0xc7, 0xb4, 0xb6, 0x37, 0xeb, 0x66, 0xc7, 0xa3, 0x91, 0x6f,
		0x41, 0xf1, 0x25, 0x6f, 0x41, 0xe8, 0x3a, 0x14, 0xf0, 0x0e, 0x6e, 0x3a, 0xf6, 0x94, 0x34, 0x93,
		0x9f, 0x2d, 0x2f, 0x9e, 0xaa, 0x30, 0xd6, 0x56, 0xa1, 0xd4, 0x2b, 0x2e, 0xa5, 0x42, 0x27, 0xc8,
		0xef, 0x5f, 0x83, 0xd1, 0xe0, 0x0b, 0x34, 0x0d, 0x23, 0xe4, 0x55, 0xcd, 0xd0, 0xa7, 0xa4, 0x19,
		0x69, 0x36, 0xaf, 0x14, 0xc9, 0x73, 0x55, 0x47, 0xd7, 0x01, 0xbc, 0x57, 0xee, 0xa2, 0xa7, 0x72,
		0x33, 0xd2, 0x6c, 0x79, 0xf1, 0x48, 0xc5, 0x93, 0x48, 0xc5, 0x97, 0x48, 0x65, 0xdd, 0x97, 0x88,
		0x52, 0x22, 0xd4, 0xee, 0x33, 0x9a, 0x82, 0xe2, 0x0e, 0xb6, 0x6c, 0xc3, 0x6c, 0x4e, 0xe5, 0x3d,
		0xa6, 0xf4, 0x11, 0x1d, 0x86, 0xa2, 0xbb, 0x78, 0xf7, 0x73, 0x43, 0xe4, 0x4d, 0xc1, 0x7d, 0xac,
		0xea, 0xe8, 0x6b, 0x12, 0x9c, 0xf7, 0x97, 0x5c, 0xc3, 0x8f, 0xb0, 0xd6, 0x76, 0xf7, 0xa1, 0x66,
		0x3b, 0xaa, 0xe5, 0x60, 0xbd, 0xe6, 0x21, 0x51, 0x1d, 0xc7, 0x32, 0x36, 0xda, 0x0e, 0xb6, 0xa7,
		0x86, 0x09, 0x9e, 0xff, 0x65, 0x2e, 0xfd, 0x65, 0xca, 0x67, 0xc5, 0x67, 0x73, 0xcf, 0xe3, 0x42,
		0x96, 0xbc, 0xd4, 0xe5, 0xf1, 0xd2, 0x53, 0xca, 0xb9, 0x8e, 0x18, 0x29, 0xfa, 0x96, 0x04, 0x17,
		0x18, 0xf0, 0x34, 0xb3, 0xd1, 0xaa, 0x63, 0x26, 0xc0, 0x02, 0x01, 0xf8, 0x82, 0x18, 0xc0, 0x65,
		0x9f, 0x4f, 0x1c, 0xe2, 0x33, 0x1d, 0x51, 0x62, 0xf4, 0x96, 0x04, 0x73, 0x0c, 0x90, 0x9b, 0xaa,
		0x51, 0x67, 0x21, 0x2c, 0x12, 0x84, 0x37, 0xc4, 0x10, 0xae, 0x12, 0x26, 0x71, 0x78, 0x67, 0x3b,
		0x42, 0x94, 0xe8, 0x9b, 0x6c, 0x01, 0xba, 0xba, 0xa5, 0xd7, 0xcc, 0xb6, 0x13, 0x87, 0x37, 0x42,
		0xe0, 0x3d, 0x2f, 0x06, 0xcf, 0x55, 0x3b, 0xfd, 0x4e, 0xdb, 0x89, 0x03, 0x9c, 0xed, 0x08, 0xd2,
		0xa2, 0x37, 0x25, 0x98, 0xd5, 0xb1, 0x66, 0xd8, 0x04, 0x98, 0xab, 0xa5, 0xb6, 0xb6, 0x85, 0xf5,
		0x36, 0x53, 0x78, 0x25, 0x82, 0xee, 0x3a, 0x13, 0xdd, 0x2d, 0xca, 0x64, 0x5d, 0xb5, 0xb7, 0xef,
		0xf9, 0x2c, 0xe2, 0xc8, 0xce, 0xe8, 0x02, 0x74, 0xe8, 0x75, 0x09, 0xce, 0x46, 0x50, 0xf1, 0x6c,
		0x02, 0x08, 0xa6, 0x6b, 0xe9, 0x98, 0x78, 0xe6, 0x20, 0xeb, 0xa9, 0x54, 0x0c, 0x29, 0x25, 0x18,
		0x41, 0x59, 0x50, 0x4a, 0x09, 0xfa, 0x1f, 0x92, 0x12, 0x57, 0xf5, 0xdf, 0x88, 0xa1, 0x4a, 0xd0,
		0xac, 0x51, 0x82, 0xea, 0x7f, 0x52, 0x51, 0xf1, 0x95, 0xea, 0xb4, 0x9e, 0x4e, 0x86, 0xbe, 0x20,
		0xc1, 0xd3, 0x61, 0x4c, 0x3c, 0x4b, 0xdc, 0x47, 0x00, 0x5d, 0x4d, 0x05, 0xc4, 0x33, 0xc2, 0x53,
		0x7a, 0x1a, 0x11, 0xd9, 0x36, 0x55, 0x73, 0x8c, 0x1d, 0xc3, 0xd9, 0x4d, 0x55, 0xee, 0xb1, 0x84,
		0x6d, 0x5b, 0xa2, 0x4c, 0xd2, 0x94, 0x5b, 0x15, 0xa0, 0x23, 0xca, 0x1d, 0x41, 0xc5, 0x53, 0xee,
		0xfd, 0x09, 0xca, 0x1d, 0xc2, 0xc4, 0x55, 0x6e, 0x35, 0x95, 0x8a, 0x21, 0xa5, 0x04, 0xe5, 0x1e,
		0x17, 0x94, 0x52, 0x92, 0x72, 0xab, 0x02, 0x74, 0x44, 0x91, 0xc2, 0xa8, 0x78, 0x8a, 0x34, 0x91,
		0xa0, 0x48, 0x41, 0x48, 0x5c, 0x45, 0x52, 0xd3, 0x88, 0x88, 0xa5, 0x85, 0xc1, 0x24, 0x58, 0x1a,
		0x4a, 0xb0, 0xb4, 0x20, 0x9e, 0x04, 0x4b, 0x53, 0xd3, 0xc9, 0x50, 0x07, 0x4e, 0xb8, 0x20, 0x2c,
		0xbe, 0xf6, 0x1c, 0x20, 0x40, 0x2e, 0x32, 0x81, 0xb8, 0x5c, 0x2d, 0xae, 0xda, 0x1c, 0x75, 0xf8,
		0xaf, 0xd1, 0xab, 0x70, 0xcc, 0xfb, 0xf0, 0xa6, 0x61, 0xb1, 0x3e, 0x7b, 0x90, 0x7c, 0xb6, 0xc2,
		0xff, 0xec, 0xaa, 0x3b, 0x2f, 0xfe, 0xd1, 0x69, 0x87, 0xf7, 0x12, 0x7d, 0x47, 0x82, 0x85, 0x88,
		0x8a, 0xaa, 0x4d, 0x0d, 0xd7, 0x6b, 0x16, 0x7e, 0xb5, 0x8d, 0x6d, 0xe6, 0xea, 0x0f, 0x11, 0x18,
		0x2f, 0xa6, 0x6b, 0x2a, 0xe1, 0xa4, 0xf8, 0x8c, 0xe2, 0xb8, 0xe6, 0x54, 0x61, 0x6a, 0xf4, 0x43,
		0x09, 0xae, 0x50, 0x4c, 0x3e, 0x44, 0x31, 0x25, 0x9e, 0x24, 0x68, 0x97, 0x99, 0x68, 0xe9, 0xd7,
		0xbc, 0x4f, 0x8b, 0x68, 0x74, 0xc5, 0xca, 0x34, 0x03, 0x7d, 0x49, 0x82, 0x73, 0x2c, 0xf1, 0xb2,
		0x80, 0x1e, 0x16, 0xd4, 0xee, 0x65, 0xca, 0x21, 0x45, 0xbb, 0x39, 0x64, 0xe8, 0x33, 0x70, 0xd2,
		0x53, 0x32, 0x3e, 0x92, 0x29, 0x82, 0xe4, 0x12, 0x5f, 0xcf, 0xf8, 0x10, 0x3c, 0x05, 0xe6, 0x7d,
		0xfb, 0xf3, 0x12, 0x9c, 0xa1, 0x9b, 0x47, 0x15, 0x9d, 0xb3, 0x69, 0xd3, 0x04, 0xc1, 0xb3, 0x4c,
		0x04, 0x1e, 0x73, 0x4f, 0xdf, 0x39, 0xdb, 0x34, 0xa3, 0xa5, 0xd0, 0xa0, 0xcf, 0xc2, 0x4c, 0x43,
		0xb5, 0xb6, 0xb1, 0x55, 0xb3, 0xb0, 0x66, 0x5a, 0x3a, 0x0b, 0xc4, 0x11, 0x02, 0x62, 0x91, 0x09,
		0xe2, 0xff, 0xc9, 0x64, 0x85, 0xce, 0x8d, 0x23, 0x38, 0xde, 0x48, 0x22, 0x40, 0xdf, 0x90, 0x60,
		0x9e, 0x75, 0x3f, 0x31, 0x1e, 0x36, 0x55, 0xa6, 0x40, 0x8e, 0x66, 0x09, 0x5f, 0xef, 0x51, 0x36,
		0x22, 0xe1, 0x2b, 0x87, 0x16, 0x7d, 0x5b, 0x82, 0x0a, 0x2b, 0xc2, 0xc6, 0x56, 0xc3, 0x68, 0xaa,
		0x4c, 0xbf, 0x70, 0x2c, 0xc1, 0x2f, 0xc4, 0x43, 0xec, 0x2e, 0x23, 0x86, 0x5f, 0xe8, 0x08, 0x53,
		0xa3, 0x1f, 0x49, 0x70, 0x85, 0x75, 0x95, 0x4a, 0xf5, 0x62, 0xc7, 0x09, 0xda, 0x5b, 0x82, 0x37,
		0xaa, 0x34, 0x57, 0xb6, 0xd0, 0xc9, 0x36, 0x85, 0xa7, 0x01, 0x7c, 0xa3, 0x3c, 0x91, 0x45, 0x03,
		0xf8, 0x06, 0x3a, 0xdb, 0x11, 0xa4, 0x45, 0x7f, 0x95, 0x60, 0x25, 0xe2, 0x71, 0xf1, 0x23, 0x07,
		0x5b, 0x4d, 0xb5, 0x5e, 0x63, 0x20, 0x37, 0x9a, 0x86, 0x63, 0xb0, 0x15, 0xe3, 0x24, 0x81, 0x7e,
		0x2f, 0xdd, 0x05, 0xaf, 0x50, 0xfe, 0xb1, 0xf5, 0x54, 0x7d, 0xe6, 0xf1, 0x05, 0xbd, 0x60, 0xed,
		0x89, 0x03, 0xfa, 0x93, 0x04, 0x37, 0x33, 0x2c, 0x93, 0xe7, 0xb1, 0x66, 0xc8, 0x1a, 0xef, 0xee,
		0x61, 0x8d, 0x3c, 0x67, 0x76, 0xc3, 0xea, 0x7f, 0x3a, 0x7a, 0x4f, 0x82, 0xe7, 0x93, 0x96, 0x93,
		0x6e, 0x27, 0xa7, 0xc8, 0xc2, 0xd6, 0x98, 0x0b, 0xe3, 0x82, 0x49, 0xb5, 0x97, 0x6b, 0xb8, 0xbf,
		0xa9, 0x24, 0x0e, 0x60, 0xa6, 0x4e, 0x9a, 0x8e, 0xd1, 0x6c, 0x63, 0xbd, 0xa6, 0xda, 0xb5, 0x26,
		0xee, 0xc4, 0xd7, 0x21, 0x27, 0xc4, 0x01, 0x8c, 0x0c, 0x0a, 0x65, 0xb7, 0x64, 0xdf, 0xc6, 0x1d,
		0x46, 0x1c, 0xd0, 0xc9, 0x34, 0x03, 0xfd, 0x52, 0x82, 0xeb, 0x24, 0x9a, 0xac, 0x69, 0x5b, 0x46,
		0x5d, 0xcf, 0x68, 0x3f, 0xa7, 0x09, 0xf4, 0x97, 0x98, 0xd0, 0x49, 0x28, 0xb9, 0xec, 0x32, 0xcd,
		0x62, 0x34, 0x97, 0xed, 0xec, 0xd3, 0xd0, 0x4f, 0x25, 0xb8, 0x9a, 0xb2, 0x08, 0x9e, 0x75, 0x9c,
		0x21, 0x2b, 0x58, 0xc9, 0xba, 0x02, 0x9e, 0x49, 0x5c, 0xb4, 0x33, 0xce, 0x41, 0xdf, 0x93, 0xe0,
		0x12, 0x17, 0x35, 0x37, 0xce, 0x7f, 0x9a, 0xc0, 0x5e, 0x62, 0x87, 0x21, 0xcc, 0xaf, 0x73, 0x03,
		0xff, 0x79, 0x2d, 0x03, 0x3d, 0xfa, 0x81, 0x04, 0x97, 0xb9, 0x70, 0x13, 0x2e, 0x91, 0x67, 0x13,
		0x94, 0x9c, 0x0d, 0x38, 0xe1, 0x3a, 0x59, 0xd1, 0x32, 0xcd, 0x40, 0xef, 0x48, 0x70, 0x31, 0xb3,
		0x66, 0x9c, 0x23, 0x88, 0xff, 0x2f, 0x03, 0x62, 0x9e, 0x52, 0x9c, 0xd7, 0x32, 0xe8, 0xc3, 0xbb,
		0x12, 0x2c, 0xf2, 0x05, 0xcc, 0x3d, 0x84, 0x67, 0x09, 0xda, 0x9b, 0x59, 0xe4, 0xcb, 0x3d, 0x89,
		0x2f, 0x68, 0x59, 0x26, 0xa0, 0xef, 0x27, 0xa9, 0x44, 0xc2, 0xa5, 0xf9, 0x99, 0xcc, 0x90, 0xf9,
		0xd7, 0x67, 0x0e, 0x64, 0xde, 0x45, 0xda, 0x8d, 0xcd, 0xf8, 0x90, 0x13, 0x22, 0xc9, 0xb9, 0x84,
		0xd8, 0x8c, 0x83, 0x39, 0x21, 0x9c, 0x5c, 0xd0, 0xb2, 0x4d, 0x21, 0x87, 0xa6, 0x17, 0x8a, 0xf7,
		0x1b, 0xf1, 0x9c, 0x4f, 0x38, 0x34, 0xbd, 0x88, 0xbb, 0x9f, 0x50, 0xe7, 0x9a, 0xdd, 0xdf, 0x54,
		0xf4, 0x2b, 0x09, 0x9e, 0x13, 0x58, 0x10, 0xcf, 0x46, 0xe7, 0xc9, 0x6a, 0xaa, 0xfd, 0xac, 0x86,
		0x67, 0xac, 0x57, 0xec, 0x3e, 0xe6, 0xa1, 0x9f, 0x48, 0xf0, 0x6c, 0xd2, 0x02, 0xf8, 0xf7, 0xa7,
		0x0b, 0x09, 0x07, 0x10, 0x17, 0x04, 0xff, 0x1e, 0x75, 0x11, 0x67, 0x9c, 0x43, 0x1c, 0x4e, 0xbb,
		0x65, 0x63, 0xcb, 0xe9, 0x01, 0xb7, 0xb1, 0x6a, 0x69, 0x5b, 0x01, 0x98, 0x71, 0xdc, 0x95, 0x04,
		0xeb, 0xbd, 0x4f, 0xd8, 0xf9, 0x08, 0xee, 0x11, 0x66, 0xbd, 0x2f, 0x32, 0xac, 0xb7, 0x9d, 0x65,
		0xc2, 0xcd, 0x51, 0x80, 0x1e, 0x10, 0xf9, 0x2f, 0x65, 0x38, 0x27, 0x7a, 0x7a, 0xad, 0xc2, 0xbe,
		0xee, 0x1a, 0x9d, 0xdd, 0x16, 0x26, 0xb5, 0x40, 0x5e, 0x65, 0xd1, 0x67, 0xba, 0xbe, 0xdb, 0xc2,
		0xca, 0x68, 0x27, 0xf0, 0x84, 0x3e, 0x05, 0x87, 0x5a, 0xaa, 0xe5, 0x4a, 0x24, 0x68, 0x74, 0x9b,
		0x26, 0x2d, 0x1f, 0xce, 0x32, 0xf9, 0xdd, 0x25, 0x33, 0x02, 0x36, 0xb1, 0x69, 0x2a, 0x07, 0x5a,
		0xf1, 0x41, 0xf4, 0x1c, 0x94, 0x48, 0x46, 0xa6, 0x6e, 0xd8, 0x0e, 0x29, 0x2c, 0x96, 0x17, 0x8f,
		0xb3, 0x53, 0x1e, 0xaa, 0xbd, 0xbd, 0x66, 0xd8, 0x8e, 0x32, 0xe2, 0xd0, 0xbf, 0xd0, 0x22, 0x0c,
		0x1b, 0xcd, 0x56, 0xdb, 0x21, 0x65, 0xc7, 0xf2, 0xe2, 0x31, 0x0e, 0x92, 0xdd, 0xba, 0xa9, 0xea,
		0x8a, 0x47, 0x8a, 0x54, 0x98, 0x89, 0x84, 0x1c, 0x35, 0xc7, 0xac, 0x69, 0x75, 0xd3, 0xc6, 0xc4,
		0x7f, 0x9b, 0x6d, 0x87, 0xd6, 0x21, 0xa7, 0x63, 0x75, 0xd1, 0x5b, 0xb4, 0x92, 0xac, 0x1c, 0xc3,
		0x21, 0xd9, 0xaf, 0x9b, 0xcb, 0xee, 0xfc, 0x75, 0x6f, 0x3a, 0x7a, 0x19, 0x8e, 0xf6, 0xd2, 0xde,
		0x71, 0xee, 0x85, 0x34, 0xee, 0x87, 0x1d, 0x3f, 0x99, 0x1d, 0x61, 0x7c, 0x03, 0x8e, 0xf4, 0x22,
		0xec, 0xde, 0x2a, 0xac, 0x76, 0xb3, 0x66, 0xe8, 0xa4, 0xf4, 0x57, 0x52, 0x0e, 0x77, 0x29, 0xba,
		0x72, 0x56, 0xda, 0xcd, 0xaa, 0x8e, 0xaa, 0x50, 0xa2, 0xae, 0xd2, 0xb4, 0x48, 0x1d, 0x6e, 0x6c,
		0xf1, 0x3c, 0xdb, 0xb5, 0x53, 0x06, 0x24, 0x84, 0xae, 0xfa, 0x53, 0x94, 0xde, 0x6c, 0x54, 0x85,
		0x89, 0x1e, 0x0e, 0xd7, 0x5d, 0xb5, 0x2d, 0x4c, 0x8b, 0x67, 0xec, 0x3d, 0x58, 0xf5, 0x68, 0x94,
		0xf1, 0xee, 0x34, 0x3a, 0x82, 0x14, 0x98, 0xac, 0xab, 0xee, 0x9d, 0xcf, 0x0b, 0x67, 0xc8, 0x72,
		0xb0, 0xdd, 0xae, 0x3b, 0xb4, 0xf0, 0x95, 0xbc, 0xa7, 0x07, 0xdd, 0xb9, 0xcb, 0xdd, 0xa9, 0x0a,
		0x99, 0x89, 0xae, 0xc3, 0xb4, 0x69, 0x19, 0x0f, 0x0d, 0xcf, 0xd1, 0x46, 0xa4, 0x54, 0x26, 0x52,
		0x9a, 0xf4, 0x09, 0x22, 0x42, 0x3a, 0x02, 0x23, 0x86, 0x8e, 0x9b, 0x8e, 0xe1, 0xec, 0x92, 0x8a,
		0x52, 0x49, 0xe9, 0x3e, 0xa3, 0xcb, 0x30, 0xb9, 0x69, 0x58, 0xb6, 0x13, 0xe7, 0xb9, 0x8f, 0x50,
		0x1e, 0x20, 0x6f, 0x23, 0x0c, 0x97, 0x61, 0xd4, 0xc2, 0x8e, 0xb5, 0x5b, 0x6b, 0x99, 0x75, 0x43,
		0xdb, 0xa5, 0x55, 0x98, 0x19, 0xce, 0x05, 0xd5, 0xb1, 0x76, 0xef, 0x12, 0x3a, 0xa5, 0x6c, 0xf5,
		0x1e, 0xd0, 0x14, 0x14, 0x55, 0xc7, 0xc1, 0x8d, 0x96, 0x43, 0x2a, 0x26, 0xc3, 0x8a, 0xff, 0x88,
		0x96, 0x61, 0x3f, 0x7e, 0xd4, 0x32, 0x3c, 0xc5, 0xf1, 0x8a, 0xfa, 0xe3, 0xa9, 0x45, 0xfd, 0xb1,
		0xde, 0x14, 0x52, 0xd9, 0x3f, 0x0d, 0xfb, 0x34, 0xcb, 0xb5, 0x06, 0x5a, 0xd1, 0x21, 0x15, 0x87,
		0x92, 0x32, 0xea, 0x0e, 0xfa, 0x55, 0x1e, 0xf4, 0x0a, 0x1c, 0xf5, 0x56, 0x1f, 0xae, 0x7e, 0x6d,
		0xa8, 0xda, 0xb6, 0xb9, 0xb9, 0x49, 0x8b, 0x02, 0x09, 0x4a, 0x3d, 0x45, 0x66, 0x07, 0x0b, 0x5f,
		0x37, 0xbd, 0xa9, 0xe8, 0x02, 0x0c, 0x35, 0x70, 0xc3, 0xa4, 0xe9, 0xfc, 0x69, 0x76, 0xa2, 0x0f,
		0x37, 0x4c, 0x85, 0x90, 0x21, 0x05, 0x26, 0x62, 0x1e, 0x9b, 0xe6, 0xe4, 0x9f, 0x66, 0x9f, 0x8d,
		0x11, 0x0f, 0xab, 0x8c, 0xdb, 0x91, 0x11, 0x74, 0x1f, 0x26, 0x5b, 0x16, 0xde, 0xa9, 0xa9, 0x6d,
		0xc7, 0x74, 0xf5, 0x0f, 0x3b, 0xb5, 0x96, 0x69, 0x34, 0x1d, 0x3f, 0xcb, 0xce, 0xdb, 0x2f, 0x1b,
		0x3b, 0x77, 0x09, 0x9d, 0x72, 0xc0, 0x9d, 0xbf, 0xd4, 0x76, 0xcc, 0xc0, 0x20, 0xba, 0x0c, 0x85,
		0x2d, 0xac, 0xea, 0xd8, 0xa2, 0xe9, 0xef, 0xa3, 0xec, 0xa6, 0x0e, 0x42, 0xa2, 0x50, 0x52, 0xf9,
		0x1d, 0x09, 0x9e, 0x11, 0x8f, 0xf6, 0xaf, 0x40, 0x81, 0xda, 0x8b, 0x24, 0x60, 0x2f, 0x94, 0x16,
		0xad, 0xc2, 0x4c, 0x72, 0xb9, 0xd7, 0xd0, 0x89, 0x77, 0xcf, 0x2b, 0xc7, 0xf8, 0x95, 0xda, 0xaa,
		0x2e, 0xbf, 0x2d, 0xc1, 0x59, 0xc1, 0xa0, 0xe1, 0x2a, 0x14, 0x7d, 0x4f, 0x21, 0x09, 0x78, 0x0a,
		0x9f, 0x78, 0x60, 0x50, 0x4d, 0x98, 0x15, 0x8e, 0x98, 0x97, 0x61, 0x94, 0x3a, 0xeb, 0xde, 0xc1,
		0x39, 0xc6, 0x51, 0x02, 0xea, 0x9b, 0xc9, 0xb9, 0x59, 0x76, 0x7a, 0x0f, 0xf2, 0xef, 0x24, 0x38,
		0x23, 0xd2, 0x34, 0x10, 0x3e, 0x01, 0xa5, 0x6c, 0x27, 0xe0, 0x6d, 0x98, 0xe4, 0x9c, 0x32, 0xb9,
		0x34, 0x83, 0x3c, 0x60, 0x33, 0x4e, 0x98, 0x80, 0xa7, 0xc9, 0x87, 0x3c, 0x8d, 0xfc, 0xba, 0x04,
		0x72, 0x7a, 0xbf, 0x01, 0x9a, 0x07, 0x14, 0xad, 0x41, 0x77, 0xbb, 0x90, 0xc6, 0xed, 0x90, 0x08,
		0x22, 0xee, 0x36, 0x17, 0x71, 0xb7, 0xc7, 0x01, 0xfc, 0x84, 0xa0, 0xa1, 0x13, 0x34, 0x25, 0xa5,
		0x44, 0x47, 0xaa, 0xba, 0xfc, 0xf7, 0x88, 0x78, 0xb9, 0x16, 0x92, 0x0d, 0xd1, 0x2c, 0x8c, 0x87,
		0xf3, 0x10, 0x5d, 0xf5, 0x1a, 0xb3, 0x03, 0x2b, 0x8e, 0x60, 0xcf, 0x47, 0xb0, 0x9f, 0x83, 0xfd,
		0x1b, 0x46, 0x53, 0xb5, 0x76, 0x6b, 0xda, 0x16, 0xd6, 0xb6, 0xed, 0x76, 0x83, 0x84, 0x28, 0x25,
		0x65, 0xcc, 0x1b, 0x5e, 0xa6, 0xa3, 0xe8, 0x3c, 0x4c, 0x84, 0xb3, 0x67, 0xf8, 0x91, 0x17, 0x7e,
		0x8c, 0x2a, 0xe3, 0x38, 0x98, 0xd4, 0xc2, 0x8f, 0x1c, 0xf9, 0xb5, 0x3c, 0x9c, 0x16, 0x68, 0x65,
		0x78, 0x6c, 0x2b, 0x8e, 0x9a, 0x45, 0xbe, 0x0f, 0xb3, 0x40, 0x27, 0xa0, 0xbc, 0xa1, 0xda, 0xd8,
		0x3f, 0x3a, 0x3d, 0xb1, 0x94, 0xdc, 0x21, 0xef, 0xc0, 0x3c, 0x06, 0xd0, 0xc4, 0x1d, 0xff, 0xf5,
		0xb0, 0x27, 0xd8, 0x26, 0xee, 0x78, 0x6f, 0xe7, 0x01, 0x6d, 0x9a, 0xd6, 0x36, 0x45, 0xea, 0xf7,
		0xa3, 0x15, 0xbc, 0xa5, 0xb9, 0x6f, 0x08, 0xd6, 0x07, 0xb4, 0x31, 0x6d, 0xd2, 0x75, 0x8e, 0xaa,
		0x6d, 0x36, 0x69, 0x6c, 0x44, 0x9f, 0xd0, 0x2d, 0x18, 0xd6, 0xd4, 0xb6, 0x8d, 0x69, 0x18, 0x54,
		0x11, 0x6e, 0x1a, 0x59, 0x76, 0x67, 0x29, 0xde, 0x64, 0xf9, 0xed, 0x3c, 0x9c, 0x4a, 0x6d, 0xe4,
		0x78, 0x6c, 0x9b, 0x71, 0xd3, 0x5f, 0x83, 0xb7, 0x0b, 0xf3, 0x82, 0x7d, 0x26, 0xc1, 0x15, 0x04,
		0x7d, 0xf2, 0x50, 0x16, 0x9f, 0x1c, 0x54, 0xfd, 0xe1, 0x88, 0xea, 0x47, 0xf6, 0xb7, 0x90, 0xbc,
		0xbf, 0x45, 0xa1, 0xfd, 0x1d, 0xe1, 0xec, 0x2f, 0xc3, 0xcc, 0x4a, 0x2c, 0x33, 0x93, 0xbf, 0x5e,
		0x80, 0x33, 0x22, 0x3d, 0x2e, 0xe8, 0x24, 0x94, 0xbb, 0x85, 0x62, 0xba, 0x4d, 0x25, 0x05, 0xfc,
		0xa1, 0xaa, 0xee, 0x5e, 0xaa, 0x7a, 0x95, 0x64, 0xd7, 0x08, 0x72, 0x09, 0x97, 0xaa, 0xee, 0x27,
		0xc9, 0xa5, 0x4a, 0x0d, 0x3c, 0xb9, 0xaa, 0xa9, 0x9b, 0x0d, 0xd5, 0x68, 0x52, 0xdf, 0x41, 0x9f,
		0xc2, 0x87, 0xc1, 0x50, 0x9f, 0xd7, 0xa1, 0x82, 0xf8, 0x75, 0x68, 0x1d, 0xa6, 0x7d, 0x25, 0x8c,
		0x9f, 0x21, 0xc5, 0xb4, 0x33, 0x64, 0xd2, 0x9f, 0x1b, 0x39, 0x46, 0x22, 0x5c, 0xe9, 0x11, 0x45,
		0xb9, 0x8e, 0x64, 0xe0, 0xea, 0xdd, 0x82, 0x28, 0x57, 0xfe, 0x61, 0x57, 0xea, 0xeb, 0xb0, 0x5b,
		0x85, 0x89, 0x2d, 0xac, 0x5a, 0xce, 0x06, 0x56, 0x7b, 0xe8, 0x20, 0x8d, 0xd5, 0x78, 0x77, 0x4e,
		0x8f, 0x4f, 0x7a, 0x88, 0x52, 0x4e, 0x0f, 0x51, 0x62, 0x77, 0x85, 0xd1, 0x7e, 0xee, 0x0a, 0xbd,
		0x98, 0x73, 0x9f, 0x78, 0xcc, 0xf9, 0x37, 0x09, 0xe4, 0xf4, 0x7e, 0xab, 0x0f, 0xed, 0x70, 0x0f,
		0x86, 0x21, 0x43, 0xe1, 0x0b, 0xcf, 0x8b, 0x30, 0x4a, 0xee, 0x8b, 0xbe, 0xdf, 0x1a, 0x16, 0xf0,
		0x5b, 0x65, 0x77, 0x06, 0x7d, 0x90, 0xff, 0x20, 0x85, 0x5d, 0xc1, 0x80, 0x23, 0x6b, 0xb6, 0x88,
		0x72, 0x19, 0xdc, 0x7d, 0x3e, 0x35, 0xda, 0x18, 0x0a, 0x0b, 0x53, 0xfe, 0xbd, 0x04, 0xa7, 0xd2,
		0x9b, 0x60, 0xfa, 0x0d, 0xc0, 0x3f, 0x8a, 0x15, 0xfd, 0x2c, 0x07, 0xa7, 0x05, 0x5a, 0xc9, 0xdc,
		0x35, 0xe9, 0xd8, 0x51, 0x8d, 0xba, 0x2d, 0xb4, 0x49, 0x3e, 0xf1, 0x63, 0x5b, 0x53, 0x34, 0x42,
		0x1a, 0xea, 0x27, 0x42, 0xda, 0xb3, 0x8a, 0x7f, 0x59, 0x82, 0x39, 0xf1, 0x0e, 0x30, 0x91, 0x33,
		0x6f, 0x30, 0x57, 0xb0, 0x77, 0x25, 0xc8, 0xd8, 0xeb, 0x95, 0x8e, 0xed, 0xa0, 0x1f, 0x06, 0x79,
		0x1e, 0x86, 0x06, 0x36, 0x22, 0x88, 0xf3, 0x02, 0x88, 0xdf, 0x8a, 0xe8, 0x21, 0xaf, 0x2a, 0xd4,
		0xaf, 0x1e, 0xae, 0xc2, 0x4c, 0x5d, 0x75, 0x02, 0x3d, 0x0f, 0xd1, 0x0e, 0x80, 0x9e, 0x64, 0x3d,
		0x3a, 0xd6, 0x56, 0x7a, 0x61, 0x13, 0x43, 0x9f, 0xf3, 0x19, 0xf4, 0x79, 0x28, 0xd5, 0x46, 0x23,
		0x81, 0x9e, 0xfc, 0x9e, 0x04, 0x47, 0x13, 0xba, 0x2c, 0xd1, 0x34, 0x8c, 0x78, 0xdd, 0x65, 0xdd,
		0x7d, 0x2b, 0x92, 0xe7, 0xaa, 0x8e, 0xd6, 0xe0, 0x50, 0xf7, 0x20, 0xdf, 0x34, 0xac, 0x0c, 0x97,
		0x56, 0x44, 0xcf, 0xf1, 0x55, 0xc3, 0xc2, 0x59, 0x8e, 0x5f, 0x91, 0xcd, 0xfe, 0x34, 0x4c, 0x73,
		0xdb, 0x37, 0x93, 0x56, 0x23, 0x1c, 0xb3, 0xcb, 0xbf, 0x96, 0xe0, 0x58, 0x52, 0xe7, 0xde, 0x40,
		0xbe, 0x32, 0x28, 0x79, 0x24, 0x3a, 0xe8, 0x1f, 0x4b, 0x30, 0x93, 0xd6, 0x01, 0x98, 0xb4, 0x9a,
		0xc7, 0x6a, 0xb6, 0x89, 0xc8, 0xff, 0x55, 0x84, 0x8c, 0x8d, 0x26, 0x68, 0x01, 0x0e, 0x92, 0x5e,
		0x96, 0x68, 0xda, 0xd7, 0x5b, 0xd3, 0x44, 0x13, 0x77, 0x22, 0x49, 0xdf, 0x58, 0xe5, 0x25, 0xd7,
		0x5f, 0xe5, 0xe5, 0x49, 0x6d, 0x44, 0xbc, 0x36, 0x22, 0xa2, 0x3b, 0x45, 0x01, 0xdd, 0xb9, 0x03,
		0x93, 0x34, 0xa7, 0x4d, 0x31, 0x1a, 0x4d, 0x07, 0x5b, 0x3b, 0x6a, 0x3d, 0xfd, 0xde, 0x72, 0x90,
		0x4e, 0x24, 0xf0, 0xaa, 0x74, 0x5a, 0xb8, 0xee, 0x52, 0xda, 0x53, 0xdd, 0x25, 0x10, 0xc2, 0x41,
		0x96, 0x10, 0x8e, 0x5f, 0x64, 0x29, 0xf7, 0x5d, 0x64, 0xe9, 0xdd, 0x33, 0x46, 0x85, 0xef, 0x19,
		0xdd, 0x54, 0xff, 0xbe, 0x3d, 0xa4, 0xfa, 0xc7, 0xf6, 0x94, 0xea, 0x77, 0x7d, 0xf0, 0x42, 0xd6,
		0x6e, 0xb7, 0xae, 0xb7, 0x92, 0x82, 0xde, 0x2a, 0xe9, 0x7e, 0xb3, 0x01, 0x87, 0xbb, 0x15, 0xf2,
		0x48, 0xd5, 0xd4, 0xb3, 0xe3, 0xb9, 0xc4, 0x1a, 0x78, 0xb8, 0x6e, 0x7a, 0x08, 0xb3, 0x86, 0xe5,
		0xef, 0x4a, 0x8c, 0x94, 0x36, 0xef, 0x64, 0x11, 0x31, 0x0f, 0x49, 0xc0, 0x3c, 0x02, 0x91, 0x4e,
		0x2e, 0x43, 0xa4, 0x23, 0x7f, 0x20, 0xc1, 0xf1, 0xc4, 0x6e, 0x6d, 0x37, 0xd4, 0xa3, 0xbd, 0xe0,
		0x4d, 0xb5, 0xe1, 0x8b, 0x1a, 0xbc, 0xa1, 0xdb, 0x6a, 0x03, 0xf7, 0xfb, 0xe9, 0x81, 0x9d, 0x2a,
		0x3d, 0x8d, 0x1f, 0x12, 0xbf, 0x59, 0x7f, 0x95, 0xb5, 0x49, 0xbc, 0xee, 0x84, 0x93, 0x50, 0xa6,
		0xfd, 0x21, 0x41, 0x11, 0x78, 0x43, 0x44, 0x04, 0x5d, 0xa7, 0x9e, 0x13, 0x77, 0xea, 0x09, 0x79,
		0x6a, 0xf9, 0x2b, 0x12, 0xcc, 0x65, 0xe8, 0xc8, 0xe9, 0xe5, 0x53, 0xa5, 0x50, 0x3e, 0xb5, 0xdf,
		0x9d, 0x49, 0x82, 0xf6, 0x8b, 0x1c, 0xbc, 0xb0, 0xb7, 0xae, 0xe4, 0x81, 0xe9, 0x7c, 0x2f, 0x57,
		0x97, 0x0b, 0xe5, 0xea, 0xee, 0x03, 0x8a, 0x77, 0xbf, 0x50, 0xfb, 0x3e, 0x2b, 0xd6, 0xe1, 0xaa,
		0x4c, 0xc4, 0x5a, 0x58, 0xd1, 0x14, 0x14, 0x35, 0xb3, 0xe9, 0x58, 0x66, 0x9d, 0x28, 0xda, 0xa8,
		0xe2, 0x3f, 0xa2, 0x0a, 0x1c, 0x88, 0x34, 0x72, 0x99, 0xcd, 0xba, 0x17, 0x99, 0x8f, 0x28, 0x13,
		0xa1, 0xfe, 0xaa, 0x3b, 0xcd, 0xfa, 0xae, 0xfc, 0x66, 0x1e, 0x6e, 0xec, 0xa1, 0xeb, 0x19, 0xdd,
		0x0f, 0xfa, 0xbd, 0x31, 0xce, 0x6f, 0x0a, 0x84, 0x38, 0x87, 0xd2, 0xce, 0x03, 0xba, 0x4f, 0x72,
		0x73, 0xa8, 0xec, 0x7d, 0x19, 0xda, 0xeb, 0xbe, 0xcc, 0x03, 0x8a, 0xf6, 0x9a, 0xd1, 0x0a, 0x45,
		0x5e, 0x19, 0x37, 0x42, 0x4a, 0xe8, 0xa5, 0xb0, 0xfc, 0x5d, 0x2c, 0x84, 0x76, 0x51, 0xfe, 0xa3,
		0x04, 0xd7, 0xfa, 0x6c, 0xd9, 0xe6, 0x60, 0x90, 0x38, 0x18, 0x3e, 0x5c, 0xc5, 0x95, 0xbf, 0x98,
		0x87, 0x6b, 0x7d, 0xb6, 0xd5, 0xfd, 0xb7, 0xda, 0x6a, 0xc4, 0x63, 0x0f, 0xf1, 0x3d, 0xf6, 0xb0,
		0xb8, 0xc7, 0xe6, 0xaa, 0x0e, 0xcf, 0x01, 0x14, 0x79, 0x0e, 0xe0, 0xb5, 0x3c, 0x5c, 0xe9, 0xa7,
		0x35, 0x50, 0xcc, 0xf2, 0x85, 0x38, 0x3f, 0xb1, 0xfc, 0x9e, 0xe5, 0xbf, 0x2f, 0xc1, 0xc5, 0xac,
		0x6d, 0x8e, 0xff, 0xd1, 0x26, 0xcf, 0x3f, 0xab, 0xe4, 0xdf, 0x4a, 0x70, 0x21, 0x53, 0x6b, 0xe4,
		0xc0, 0x5c, 0x00, 0xf3, 0xd6, 0x90, 0xdb, 0xdb, 0xad, 0xe1, 0xcf, 0x23, 0x70, 0xb9, 0x8f, 0xdf,
		0x78, 0x04, 0xb6, 0x43, 0x0a, 0x6d, 0xc7, 0x49, 0x28, 0x77, 0xb7, 0x83, 0xea, 0x7c, 0x49, 0x01,
		0x7f, 0x88, 0x95, 0x42, 0xc8, 0x0f, 0x20, 0x85, 0xd0, 0x6f, 0x3d, 0x71, 0x78, 0xb0, 0x29, 0x84,
		0xc2, 0x63, 0x4d, 0x21, 0x14, 0xfb, 0x4e, 0x21, 0x3c, 0x00, 0xda, 0xa1, 0x4a, 0x39, 0xd2, 0x32,
		0x9c, 0xd7, 0x24, 0x70, 0x36, 0xa1, 0xcd, 0x95, 0x70, 0xa1, 0xc5, 0xb8, 0x89, 0x56, 0x74, 0x28,
		0x68, 0x24, 0xa5, 0xb0, 0x3f, 0x17, 0x51, 0x79, 0x10, 0x50, 0x79, 0x0d, 0xa6, 0x02, 0xea, 0x54,
		0xb3, 0x70, 0xbb, 0x07, 0xbf, 0x4c, 0xe0, 0xcf, 0x25, 0x2a, 0x4e, 0x55, 0x57, 0xdc, 0x29, 0x74,
		0x09, 0x87, 0x3a, 0xac, 0xe1, 0x58, 0x79, 0x72, 0x5f, 0x3f, 0xe5, 0xc9, 0x58, 0xaf, 0xe1, 0x18,
		0xa3, 0xd7, 0xb0, 0x77, 0xd3, 0xda, 0x9f, 0x3d, 0xb7, 0x30, 0xbe, 0x87, 0xdc, 0xc2, 0xc4, 0xde,
		0xda, 0x08, 0x9f, 0x83, 0xb2, 0x8e, 0xeb, 0xea, 0xae, 0xa7, 0x9a, 0xe9, 0x3d, 0x91, 0x40, 0xa8,
		0x89, 0x2a, 0xca, 0x6f, 0xe4, 0xe1, 0x62, 0xd6, 0xdf, 0x60, 0x7d, 0xf4, 0xee, 0x65, 0xcd, 0x8f,
		0x13, 0xbc, 0x4a, 0xd7, 0xd5, 0xcc, 0x3f, 0x20, 0x0a, 0x85, 0x07, 0x01, 0x43, 0x19, 0x0e, 0x1b,
		0x0a, 0xfb, 0x10, 0x2c, 0x70, 0x0e, 0xc1, 0x01, 0xe5, 0x02, 0xe5, 0xdf, 0xe4, 0x60, 0x3e, 0xcb,
		0x0f, 0xcc, 0xb8, 0xfb, 0xc1, 0x3e, 0x7d, 0x73, 0x7b, 0x3d, 0x7d, 0x07, 0xb5, 0x8b, 0x6c, 0xe9,
		0x0e, 0x71, 0xa4, 0xdb, 0xb3, 0xce, 0x61, 0xf1, 0x3c, 0xc8, 0x07, 0x39, 0xc8, 0xf8, 0xd3, 0xb7,
		0x8f, 0x87, 0x30, 0x59, 0x65, 0x9d, 0x61, 0x66, 0x59, 0xa7, 0xd7, 0x8f, 0x50, 0x10, 0xef, 0x47,
		0x90, 0xff, 0x91, 0x83, 0xf3, 0x83, 0xf0, 0x28, 0x1f, 0x53, 0xa1, 0x07, 0x32, 0xee, 0x85, 0x0c,
		0x19, 0x77, 0xf9, 0x9f, 0x39, 0xb8, 0x90, 0xe9, 0x97, 0x88, 0x4f, 0x04, 0x1f, 0x13, 0xbc, 0x9f,
		0x52, 0x2c, 0x64, 0xc9, 0x33, 0x7f, 0x2e, 0xcf, 0x13, 0x3c, 0xaf, 0x87, 0xe4, 0x89, 0xe0, 0x13,
		0x5b, 0x58, 0x0a, 0xfd, 0xf4, 0xbe, 0xff, 0x3c, 0x07, 0x0b, 0x19, 0x7f, 0x21, 0xfa, 0x64, 0x1f,
		0x42, 0xfb, 0x30, 0xe7, 0xc0, 0x7e, 0xf2, 0xe7, 0xaa, 0x51, 0x77, 0xb0, 0x45, 0x3e, 0x75, 0x1c,
		0xa6, 0x57, 0x1e, 0xac, 0xdc, 0x5e, 0xaf, 0xad, 0x56, 0xd7, 0xd6, 0x57, 0x94, 0xda, 0xfa, 0x27,
		0xee, 0xae, 0xd4, 0xaa, 0xb7, 0x1f, 0x2c, 0xad, 0x55, 0x6f, 0x8d, 0x3f, 0x85, 0x4e, 0xc2, 0xd1,
		0xf8, 0xeb, 0xa5, 0xb5, 0xb5, 0x1a, 0x19, 0x1d, 0x97, 0xd0, 0x29, 0x38, 0x1e, 0x27, 0x58, 0x5e,
		0xbb, 0x73, 0x6f, 0x85, 0x92, 0xe4, 0x6e, 0xbe, 0x02, 0x87, 0x35, 0xb3, 0xc1, 0x92, 0xc1, 0xcd,
		0x91, 0xa5, 0x96, 0x71, 0xd7, 0x0d, 0x61, 0xef, 0x4a, 0x9f, 0xbc, 0xf4, 0xd0, 0x70, 0xb6, 0xda,
		0x1b, 0x15, 0xcd, 0x6c, 0x2c, 0x04, 0xff, 0xcf, 0xe9, 0x05, 0x43, 0xaf, 0x2f, 0x3c, 0x34, 0xbd,
		0xff, 0xad, 0x4a, 0xff, 0xe9, 0xe9, 0x0d, 0xb5, 0x65, 0xec, 0x5c, 0xda, 0x28, 0x90, 0xb1, 0xcb,
		0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x63, 0xa5, 0x41, 0x73, 0xd7, 0x55, 0x00, 0x00,
	},
	// uber/cadence/api/v1/query.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5f, 0x73, 0x93, 0x4e,
		0x14, 0xfd, 0x91, 0xdf, 0x4c, 0xc7, 0xde, 0x36, 0xca, 0x6c, 0x75, 0x8c, 0x99, 0xfe, 0xc9, 0xa4,
		0x7d, 0xe8, 0x64, 0x14, 0x4c, 0xf5, 0xad, 0x4f, 0x94, 0xac, 0x0e, 0x0e, 0x05, 0x0a, 0x24, 0x35,
		0xbe, 0x30, 0x84, 0xac, 0x11, 0x4b, 0x58, 0xdc, 0x85, 0xc4, 0x7c, 0x01, 0xdf, 0xfd, 0x34, 0x7e,
		0x3d, 0x07, 0x42, 0x4c, 0x34, 0xd4, 0xf1, 0xed, 0x72, 0xee, 0x39, 0x9c, 0x73, 0x66, 0xe7, 0xc2,
		0x49, 0x36, 0x22, 0x4c, 0x0e, 0xfc, 0x31, 0x89, 0x03, 0x22, 0xfb, 0x49, 0x28, 0xcf, 0xba, 0xf2,
		0x97, 0x8c, 0xb0, 0x85, 0x94, 0x30, 0x9a, 0x52, 0x74, 0x90, 0x13, 0xa4, 0x92, 0x20, 0xf9, 0x49,
		0x28, 0xcd, 0xba, 0xcd, 0x56, 0x95, 0x2a, 0xa0, 0xd3, 0x29, 0x8d, 0x97, 0xb2, 0x66, 0xbb, 0x8a,
		0x31, 0xa7, 0xec, 0xee, 0x63, 0x44, 0xe7, 0x4b, 0x4e, 0xfb, 0x0e, 0xea, 0xb7, 0x25, 0x72, 0x93,
		0x3b, 0xa2, 0x23, 0x80, 0xc2, 0xda, 0x4b, 0x17, 0x09, 0x69, 0x08, 0x2d, 0xe1, 0x7c, 0xd7, 0xde,
		0x2d, 0x10, 0x77, 0x91, 0x10, 0x74, 0xb9, 0x5a, 0xfb, 0x6c, 0xc2, 0x1b, 0xb5, 0x96, 0x70, 0xbe,
		0x77, 0x71, 0x28, 0x55, 0xe4, 0x93, 0x2c, 0x7f, 0x11, 0x51, 0x7f, 0x5c, 0x8a, 0x15, 0x36, 0xe1,
		0xed, 0x1f, 0x02, 0x1c, 0xfc, 0xe6, 0x66, 0x13, 0x9e, 0x45, 0x29, 0xc2, 0xb0, 0xc7, 0x8a, 0x69,
		0x6d, 0xfa, 0xf0, 0xe2, 0xac, 0xf2, 0xaf, 0x1b, 0xb2, 0x3c, 0x8f, 0x0d, 0xec, 0xd7, 0x8c, 0x5e,
		0xc3, 0x8e, 0x1f, 0xf3, 0x39, 0x61, 0xff, 0x94, 0xab, 0xe4, 0xa2, 0x53, 0xa8, 0x13, 0xc6, 0x28,
		0xf3, 0xa6, 0x84, 0x73, 0x7f, 0x42, 0x1a, 0xff, 0x17, 0x9d, 0xf7, 0x0b, 0xf0, 0x7a, 0x89, 0xb5,
		0x09, 0xd4, 0x4b, 0xe7, 0xcf, 0x24, 0x48, 0xc9, 0x18, 0xb9, 0xb0, 0x1f, 0x44, 0x94, 0x13, 0x8f,
		0xa7, 0x7e, 0x9a, 0xf1, 0x32, 0x73, 0xb7, 0xd2, 0x71, 0x55, 0x19, 0x7f, 0x25, 0x41, 0x96, 0x86,
		0x34, 0x56, 0x73, 0xa5, 0x53, 0x08, 0xed, 0xbd, 0x60, 0xfd, 0xd1, 0x89, 0xe1, 0xd1, 0x1f, 0x05,
		0xd1, 0x11, 0x3c, 0xbb, 0xe9, 0x63, 0x7b, 0xe8, 0xd9, 0xd8, 0xe9, 0xeb, 0xae, 0xe7, 0x0e, 0x2d,
		0xec, 0x69, 0xc6, 0x40, 0xd1, 0xb5, 0x9e, 0xf8, 0x1f, 0x3a, 0x86, 0xe6, 0xf6, 0x5a, 0x31, 0x9c,
		0x5b, 0x6c, 0xe3, 0x9e, 0x28, 0xa0, 0x43, 0x68, 0x6c, 0xef, 0xdf, 0x28, 0x9a, 0x8e, 0x7b, 0x62,
		0xad, 0xf3, 0x5d, 0x80, 0xc7, 0x1b, 0xbd, 0x54, 0x1a, 0x8f, 0xc3, 0x3c, 0x20, 0x6a, 0xc3, 0xf1,
		0x4a, 0xf6, 0x0e, 0xab, 0xae, 0xa7, 0x9a, 0x46, 0x4f, 0x73, 0x35, 0xd3, 0xd8, 0xb0, 0x3e, 0x85,
		0x93, 0x7b, 0x38, 0x86, 0xe9, 0x7a, 0xa6, 0x85, 0x0d, 0x51, 0x40, 0x2f, 0xe1, 0xf9, 0x5f, 0x48,
		0xaa, 0x79, 0x6d, 0xe9, 0xd8, 0xc5, 0x3d, 0x4f, 0xd5, 0xb1, 0x62, 0xe8, 0x43, 0xb1, 0xd6, 0xf9,
		0x26, 0xc0, 0x93, 0x22, 0x93, 0x4a, 0x63, 0x1e, 0xf2, 0x94, 0xc4, 0xc1, 0x42, 0x27, 0x33, 0x12,
		0xad, 0x0d, 0x55, 0xd3, 0x70, 0x34, 0xc7, 0xc5, 0x86, 0x3a, 0xf4, 0x74, 0x3c, 0xc0, 0xfa, 0x46,
		0xaa, 0x33, 0x68, 0xdd, 0x47, 0xc2, 0x03, 0x6c, 0xb8, 0x7d, 0x45, 0x17, 0x85, 0x75, 0xbf, 0x6d,
		0x96, 0xe3, 0xda, 0xa6, 0xf1, 0x56, 0xac, 0x5d, 0xbd, 0x87, 0xa7, 0x01, 0x9d, 0x56, 0xbd, 0xe8,
		0xd5, 0x03, 0x25, 0x09, 0xad, 0xfc, 0x7e, 0x2c, 0xe1, 0x43, 0x77, 0x12, 0xa6, 0x9f, 0xb2, 0x91,
		0x14, 0xd0, 0xa9, 0xbc, 0x79, 0x70, 0x2f, 0xc2, 0x71, 0x24, 0x4f, 0xa8, 0x5c, 0xdc, 0x59, 0x79,
		0x7d, 0x97, 0x7e, 0x12, 0xce, 0xba, 0xa3, 0x9d, 0x02, 0x7b, 0xf5, 0x33, 0x00, 0x00, 0xff, 0xff,
		0x7e, 0x63, 0x77, 0x24, 0xf9, 0x03, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) WorkerAPIYARPCClient {
			return NewWorkerAPIYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
