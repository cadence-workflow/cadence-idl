// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: uber/cadence/api/v1/service_visibility.proto

package apiv1

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// VisibilityAPIYARPCClient is the YARPC client-side interface for the VisibilityAPI service.
type VisibilityAPIYARPCClient interface {
	ListWorkflowExecutions(context.Context, *ListWorkflowExecutionsRequest, ...yarpc.CallOption) (*ListWorkflowExecutionsResponse, error)
	ListOpenWorkflowExecutions(context.Context, *ListOpenWorkflowExecutionsRequest, ...yarpc.CallOption) (*ListOpenWorkflowExecutionsResponse, error)
	ListClosedWorkflowExecutions(context.Context, *ListClosedWorkflowExecutionsRequest, ...yarpc.CallOption) (*ListClosedWorkflowExecutionsResponse, error)
	ListArchivedWorkflowExecutions(context.Context, *ListArchivedWorkflowExecutionsRequest, ...yarpc.CallOption) (*ListArchivedWorkflowExecutionsResponse, error)
	ScanWorkflowExecutions(context.Context, *ScanWorkflowExecutionsRequest, ...yarpc.CallOption) (*ScanWorkflowExecutionsResponse, error)
	CountWorkflowExecutions(context.Context, *CountWorkflowExecutionsRequest, ...yarpc.CallOption) (*CountWorkflowExecutionsResponse, error)
	GetSearchAttributes(context.Context, *GetSearchAttributesRequest, ...yarpc.CallOption) (*GetSearchAttributesResponse, error)
}

func newVisibilityAPIYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) VisibilityAPIYARPCClient {
	return &_VisibilityAPIYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "uber.cadence.api.v1.VisibilityAPI",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewVisibilityAPIYARPCClient builds a new YARPC client for the VisibilityAPI service.
func NewVisibilityAPIYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) VisibilityAPIYARPCClient {
	return newVisibilityAPIYARPCClient(clientConfig, nil, options...)
}

// VisibilityAPIYARPCServer is the YARPC server-side interface for the VisibilityAPI service.
type VisibilityAPIYARPCServer interface {
	ListWorkflowExecutions(context.Context, *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error)
	ListOpenWorkflowExecutions(context.Context, *ListOpenWorkflowExecutionsRequest) (*ListOpenWorkflowExecutionsResponse, error)
	ListClosedWorkflowExecutions(context.Context, *ListClosedWorkflowExecutionsRequest) (*ListClosedWorkflowExecutionsResponse, error)
	ListArchivedWorkflowExecutions(context.Context, *ListArchivedWorkflowExecutionsRequest) (*ListArchivedWorkflowExecutionsResponse, error)
	ScanWorkflowExecutions(context.Context, *ScanWorkflowExecutionsRequest) (*ScanWorkflowExecutionsResponse, error)
	CountWorkflowExecutions(context.Context, *CountWorkflowExecutionsRequest) (*CountWorkflowExecutionsResponse, error)
	GetSearchAttributes(context.Context, *GetSearchAttributesRequest) (*GetSearchAttributesResponse, error)
}

type buildVisibilityAPIYARPCProceduresParams struct {
	Server      VisibilityAPIYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildVisibilityAPIYARPCProcedures(params buildVisibilityAPIYARPCProceduresParams) []transport.Procedure {
	handler := &_VisibilityAPIYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "uber.cadence.api.v1.VisibilityAPI",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "ListWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListWorkflowExecutions,
							NewRequest:  newVisibilityAPIServiceListWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListOpenWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListOpenWorkflowExecutions,
							NewRequest:  newVisibilityAPIServiceListOpenWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListClosedWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListClosedWorkflowExecutions,
							NewRequest:  newVisibilityAPIServiceListClosedWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListArchivedWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListArchivedWorkflowExecutions,
							NewRequest:  newVisibilityAPIServiceListArchivedWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ScanWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ScanWorkflowExecutions,
							NewRequest:  newVisibilityAPIServiceScanWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "CountWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.CountWorkflowExecutions,
							NewRequest:  newVisibilityAPIServiceCountWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetSearchAttributes",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetSearchAttributes,
							NewRequest:  newVisibilityAPIServiceGetSearchAttributesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// BuildVisibilityAPIYARPCProcedures prepares an implementation of the VisibilityAPI service for YARPC registration.
func BuildVisibilityAPIYARPCProcedures(server VisibilityAPIYARPCServer) []transport.Procedure {
	return buildVisibilityAPIYARPCProcedures(buildVisibilityAPIYARPCProceduresParams{Server: server})
}

// FxVisibilityAPIYARPCClientParams defines the input
// for NewFxVisibilityAPIYARPCClient. It provides the
// paramaters to get a VisibilityAPIYARPCClient in an
// Fx application.
type FxVisibilityAPIYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxVisibilityAPIYARPCClientResult defines the output
// of NewFxVisibilityAPIYARPCClient. It provides a
// VisibilityAPIYARPCClient to an Fx application.
type FxVisibilityAPIYARPCClientResult struct {
	fx.Out

	Client VisibilityAPIYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxVisibilityAPIYARPCClient provides a VisibilityAPIYARPCClient
// to an Fx application using the given name for routing.
//
//	fx.Provide(
//	  apiv1.NewFxVisibilityAPIYARPCClient("service-name"),
//	  ...
//	)
func NewFxVisibilityAPIYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxVisibilityAPIYARPCClientParams) FxVisibilityAPIYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxVisibilityAPIYARPCClientResult{
			Client: newVisibilityAPIYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxVisibilityAPIYARPCProceduresParams defines the input
// for NewFxVisibilityAPIYARPCProcedures. It provides the
// paramaters to get VisibilityAPIYARPCServer procedures in an
// Fx application.
type FxVisibilityAPIYARPCProceduresParams struct {
	fx.In

	Server      VisibilityAPIYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxVisibilityAPIYARPCProceduresResult defines the output
// of NewFxVisibilityAPIYARPCProcedures. It provides
// VisibilityAPIYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxVisibilityAPIYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxVisibilityAPIYARPCProcedures provides VisibilityAPIYARPCServer procedures to an Fx application.
// It expects a VisibilityAPIYARPCServer to be present in the container.
//
//	fx.Provide(
//	  apiv1.NewFxVisibilityAPIYARPCProcedures(),
//	  ...
//	)
func NewFxVisibilityAPIYARPCProcedures() interface{} {
	return func(params FxVisibilityAPIYARPCProceduresParams) FxVisibilityAPIYARPCProceduresResult {
		return FxVisibilityAPIYARPCProceduresResult{
			Procedures: buildVisibilityAPIYARPCProcedures(buildVisibilityAPIYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "uber.cadence.api.v1.VisibilityAPI",
				FileDescriptors: yarpcFileDescriptorClosurea7341dc69cef4364,
			},
		}
	}
}

type _VisibilityAPIYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_VisibilityAPIYARPCCaller) ListWorkflowExecutions(ctx context.Context, request *ListWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ListWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListWorkflowExecutions", request, newVisibilityAPIServiceListWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyVisibilityAPIServiceListWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_VisibilityAPIYARPCCaller) ListOpenWorkflowExecutions(ctx context.Context, request *ListOpenWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ListOpenWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListOpenWorkflowExecutions", request, newVisibilityAPIServiceListOpenWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListOpenWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyVisibilityAPIServiceListOpenWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_VisibilityAPIYARPCCaller) ListClosedWorkflowExecutions(ctx context.Context, request *ListClosedWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ListClosedWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListClosedWorkflowExecutions", request, newVisibilityAPIServiceListClosedWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListClosedWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyVisibilityAPIServiceListClosedWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_VisibilityAPIYARPCCaller) ListArchivedWorkflowExecutions(ctx context.Context, request *ListArchivedWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ListArchivedWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListArchivedWorkflowExecutions", request, newVisibilityAPIServiceListArchivedWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListArchivedWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyVisibilityAPIServiceListArchivedWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_VisibilityAPIYARPCCaller) ScanWorkflowExecutions(ctx context.Context, request *ScanWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ScanWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ScanWorkflowExecutions", request, newVisibilityAPIServiceScanWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ScanWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyVisibilityAPIServiceScanWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_VisibilityAPIYARPCCaller) CountWorkflowExecutions(ctx context.Context, request *CountWorkflowExecutionsRequest, options ...yarpc.CallOption) (*CountWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "CountWorkflowExecutions", request, newVisibilityAPIServiceCountWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*CountWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyVisibilityAPIServiceCountWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_VisibilityAPIYARPCCaller) GetSearchAttributes(ctx context.Context, request *GetSearchAttributesRequest, options ...yarpc.CallOption) (*GetSearchAttributesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetSearchAttributes", request, newVisibilityAPIServiceGetSearchAttributesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetSearchAttributesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyVisibilityAPIServiceGetSearchAttributesYARPCResponse, responseMessage)
	}
	return response, err
}

type _VisibilityAPIYARPCHandler struct {
	server VisibilityAPIYARPCServer
}

func (h *_VisibilityAPIYARPCHandler) ListWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyVisibilityAPIServiceListWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_VisibilityAPIYARPCHandler) ListOpenWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListOpenWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListOpenWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyVisibilityAPIServiceListOpenWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListOpenWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_VisibilityAPIYARPCHandler) ListClosedWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListClosedWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListClosedWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyVisibilityAPIServiceListClosedWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListClosedWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_VisibilityAPIYARPCHandler) ListArchivedWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListArchivedWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListArchivedWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyVisibilityAPIServiceListArchivedWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListArchivedWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_VisibilityAPIYARPCHandler) ScanWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ScanWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ScanWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyVisibilityAPIServiceScanWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ScanWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_VisibilityAPIYARPCHandler) CountWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *CountWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*CountWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyVisibilityAPIServiceCountWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.CountWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_VisibilityAPIYARPCHandler) GetSearchAttributes(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetSearchAttributesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetSearchAttributesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyVisibilityAPIServiceGetSearchAttributesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetSearchAttributes(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newVisibilityAPIServiceListWorkflowExecutionsYARPCRequest() proto.Message {
	return &ListWorkflowExecutionsRequest{}
}

func newVisibilityAPIServiceListWorkflowExecutionsYARPCResponse() proto.Message {
	return &ListWorkflowExecutionsResponse{}
}

func newVisibilityAPIServiceListOpenWorkflowExecutionsYARPCRequest() proto.Message {
	return &ListOpenWorkflowExecutionsRequest{}
}

func newVisibilityAPIServiceListOpenWorkflowExecutionsYARPCResponse() proto.Message {
	return &ListOpenWorkflowExecutionsResponse{}
}

func newVisibilityAPIServiceListClosedWorkflowExecutionsYARPCRequest() proto.Message {
	return &ListClosedWorkflowExecutionsRequest{}
}

func newVisibilityAPIServiceListClosedWorkflowExecutionsYARPCResponse() proto.Message {
	return &ListClosedWorkflowExecutionsResponse{}
}

func newVisibilityAPIServiceListArchivedWorkflowExecutionsYARPCRequest() proto.Message {
	return &ListArchivedWorkflowExecutionsRequest{}
}

func newVisibilityAPIServiceListArchivedWorkflowExecutionsYARPCResponse() proto.Message {
	return &ListArchivedWorkflowExecutionsResponse{}
}

func newVisibilityAPIServiceScanWorkflowExecutionsYARPCRequest() proto.Message {
	return &ScanWorkflowExecutionsRequest{}
}

func newVisibilityAPIServiceScanWorkflowExecutionsYARPCResponse() proto.Message {
	return &ScanWorkflowExecutionsResponse{}
}

func newVisibilityAPIServiceCountWorkflowExecutionsYARPCRequest() proto.Message {
	return &CountWorkflowExecutionsRequest{}
}

func newVisibilityAPIServiceCountWorkflowExecutionsYARPCResponse() proto.Message {
	return &CountWorkflowExecutionsResponse{}
}

func newVisibilityAPIServiceGetSearchAttributesYARPCRequest() proto.Message {
	return &GetSearchAttributesRequest{}
}

func newVisibilityAPIServiceGetSearchAttributesYARPCResponse() proto.Message {
	return &GetSearchAttributesResponse{}
}

var (
	emptyVisibilityAPIServiceListWorkflowExecutionsYARPCRequest          = &ListWorkflowExecutionsRequest{}
	emptyVisibilityAPIServiceListWorkflowExecutionsYARPCResponse         = &ListWorkflowExecutionsResponse{}
	emptyVisibilityAPIServiceListOpenWorkflowExecutionsYARPCRequest      = &ListOpenWorkflowExecutionsRequest{}
	emptyVisibilityAPIServiceListOpenWorkflowExecutionsYARPCResponse     = &ListOpenWorkflowExecutionsResponse{}
	emptyVisibilityAPIServiceListClosedWorkflowExecutionsYARPCRequest    = &ListClosedWorkflowExecutionsRequest{}
	emptyVisibilityAPIServiceListClosedWorkflowExecutionsYARPCResponse   = &ListClosedWorkflowExecutionsResponse{}
	emptyVisibilityAPIServiceListArchivedWorkflowExecutionsYARPCRequest  = &ListArchivedWorkflowExecutionsRequest{}
	emptyVisibilityAPIServiceListArchivedWorkflowExecutionsYARPCResponse = &ListArchivedWorkflowExecutionsResponse{}
	emptyVisibilityAPIServiceScanWorkflowExecutionsYARPCRequest          = &ScanWorkflowExecutionsRequest{}
	emptyVisibilityAPIServiceScanWorkflowExecutionsYARPCResponse         = &ScanWorkflowExecutionsResponse{}
	emptyVisibilityAPIServiceCountWorkflowExecutionsYARPCRequest         = &CountWorkflowExecutionsRequest{}
	emptyVisibilityAPIServiceCountWorkflowExecutionsYARPCResponse        = &CountWorkflowExecutionsResponse{}
	emptyVisibilityAPIServiceGetSearchAttributesYARPCRequest             = &GetSearchAttributesRequest{}
	emptyVisibilityAPIServiceGetSearchAttributesYARPCResponse            = &GetSearchAttributesResponse{}
)

var yarpcFileDescriptorClosurea7341dc69cef4364 = [][]byte{
	// uber/cadence/api/v1/service_visibility.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcf, 0x73, 0xdb, 0x54,
		0x10, 0xe6, 0xd9, 0x75, 0x82, 0x37, 0x0d, 0x29, 0xaf, 0x9d, 0xd4, 0xa3, 0x96, 0xe2, 0x8a, 0xb4,
		0x78, 0x98, 0x22, 0x61, 0x97, 0xa1, 0x25, 0x39, 0x25, 0x9d, 0x42, 0x53, 0x98, 0xe2, 0x91, 0x33,
		0x61, 0xe0, 0x80, 0x47, 0x96, 0xd7, 0xce, 0x1b, 0xdb, 0x92, 0xa2, 0xf7, 0xe4, 0x58, 0xb9, 0x31,
		0x93, 0x2b, 0x17, 0xe0, 0x00, 0x19, 0xfe, 0x25, 0x66, 0x38, 0xf3, 0xd7, 0x30, 0xfa, 0x61, 0xe1,
		0xc0, 0x93, 0x1c, 0xe7, 0x80, 0x39, 0xf4, 0xe6, 0xb7, 0xde, 0xfd, 0xf4, 0xed, 0x6a, 0xf5, 0xbd,
		0x5d, 0x78, 0xe4, 0x77, 0xd0, 0xd3, 0x2d, 0xb3, 0x8b, 0xb6, 0x85, 0xba, 0xe9, 0x32, 0x7d, 0x5c,
		0xd7, 0x39, 0x7a, 0x63, 0x66, 0x61, 0x7b, 0xcc, 0x38, 0xeb, 0xb0, 0x21, 0x13, 0x81, 0xe6, 0x7a,
		0x8e, 0x70, 0xe8, 0xcd, 0xd0, 0x5b, 0x4b, 0xbc, 0x35, 0xd3, 0x65, 0xda, 0xb8, 0xae, 0x6c, 0xc9,
		0x20, 0xfe, 0x19, 0xaa, 0xa8, 0x32, 0xaf, 0x13, 0xc7, 0x1b, 0xf4, 0x86, 0xce, 0x49, 0xec, 0xa3,
		0xfe, 0x48, 0xe0, 0x9d, 0x2f, 0x19, 0x17, 0x5f, 0x27, 0xe6, 0xe7, 0x13, 0xb4, 0x7c, 0xc1, 0x1c,
		0x9b, 0x1b, 0x78, 0xec, 0x23, 0x17, 0x74, 0x13, 0x56, 0xba, 0xce, 0xc8, 0x64, 0x76, 0x85, 0x54,
		0x49, 0xad, 0x6c, 0x24, 0x27, 0x7a, 0x07, 0xca, 0xae, 0xd9, 0xc7, 0x36, 0x67, 0xa7, 0x58, 0x29,
		0x54, 0x49, 0xad, 0x64, 0xbc, 0x19, 0x1a, 0x5a, 0xec, 0x14, 0xe9, 0x43, 0xd8, 0xb0, 0x71, 0x22,
		0xda, 0x91, 0x87, 0x70, 0x06, 0x68, 0x57, 0x8a, 0x55, 0x52, 0xbb, 0x6e, 0xac, 0x87, 0xe6, 0xa6,
		0xd9, 0xc7, 0x83, 0xd0, 0x48, 0x6f, 0x41, 0xe9, 0xd8, 0x47, 0x2f, 0xa8, 0x5c, 0x8b, 0xb0, 0xe3,
		0x83, 0xfa, 0x33, 0x81, 0x7b, 0x59, 0xa4, 0xb8, 0xeb, 0xd8, 0x1c, 0xe9, 0x4b, 0x00, 0x4c, 0xad,
		0x15, 0x52, 0x2d, 0xd6, 0xd6, 0x1a, 0x1f, 0x68, 0x92, 0x5a, 0x69, 0xff, 0x02, 0xd9, 0xb7, 0x7b,
		0x8e, 0x31, 0x13, 0x2d, 0x23, 0x5b, 0x90, 0x90, 0x55, 0xcf, 0x8a, 0x70, 0x3f, 0xa4, 0xf5, 0x95,
		0x8b, 0xf6, 0x92, 0xea, 0xd5, 0x84, 0xb7, 0xb9, 0x30, 0x3d, 0xd1, 0x16, 0x6c, 0x84, 0xed, 0x1e,
		0x1b, 0x0a, 0xf4, 0xa2, 0xda, 0xad, 0x35, 0xb6, 0xa4, 0xd9, 0xb7, 0x42, 0xef, 0x03, 0x36, 0xc2,
		0xcf, 0x22, 0x5f, 0x63, 0x83, 0x5f, 0x34, 0xd0, 0x6f, 0xe0, 0x46, 0x5a, 0x8a, 0x29, 0x60, 0x29,
		0x02, 0x7c, 0x74, 0xb9, 0x72, 0xc6, 0x38, 0x2f, 0xde, 0x30, 0x36, 0xf0, 0xa2, 0x89, 0xbe, 0x84,
		0x35, 0x11, 0xb8, 0x29, 0xcd, 0x95, 0x08, 0xf5, 0xfd, 0x5c, 0xd4, 0x83, 0xc0, 0xc5, 0x14, 0x10,
		0x44, 0x7a, 0xda, 0x2b, 0xc3, 0x6a, 0x0c, 0xc3, 0xd5, 0x5f, 0x08, 0xa8, 0x79, 0xaf, 0x61, 0x89,
		0x1d, 0xf2, 0x47, 0x11, 0xde, 0x0b, 0xa9, 0x3d, 0x1b, 0x3a, 0x1c, 0xbb, 0xaf, 0x7b, 0xe4, 0x3f,
		0xed, 0x11, 0xfa, 0x02, 0xd6, 0xb9, 0x30, 0x85, 0xcf, 0xa7, 0x68, 0xab, 0x11, 0xda, 0xfd, 0xac,
		0xa4, 0x85, 0xcf, 0x53, 0x9c, 0xeb, 0x7c, 0xe6, 0x3c, 0xdb, 0x6d, 0xe7, 0x04, 0xb6, 0xf2, 0x5f,
		0xe9, 0x12, 0xfb, 0xed, 0x9c, 0xc0, 0x83, 0x90, 0xdc, 0xae, 0x67, 0x1d, 0xb1, 0xf1, 0xd2, 0x3a,
		0x4e, 0xae, 0xe2, 0xbf, 0x11, 0x78, 0x38, 0x8f, 0xdc, 0x12, 0x6b, 0x17, 0xde, 0x7c, 0x2d, 0xcb,
		0xb4, 0xff, 0x77, 0x37, 0x5f, 0x16, 0xa9, 0x25, 0xd6, 0xea, 0x15, 0xdc, 0x7b, 0xe6, 0xf8, 0xf6,
		0x15, 0xa6, 0x84, 0x34, 0xcd, 0xc2, 0x6c, 0x9a, 0x4f, 0xe0, 0xdd, 0x4c, 0xbc, 0x24, 0xcd, 0x5b,
		0x50, 0xb2, 0x42, 0x97, 0x08, 0xaf, 0x68, 0xc4, 0x07, 0xf5, 0x2e, 0x28, 0x9f, 0xa3, 0x68, 0xa1,
		0xe9, 0x59, 0x47, 0xbb, 0x42, 0x78, 0xac, 0xe3, 0x0b, 0x9c, 0x92, 0x50, 0x7f, 0x27, 0x70, 0x47,
		0xfa, 0x77, 0x82, 0xf9, 0x0a, 0xae, 0x0d, 0x30, 0x98, 0x16, 0x6d, 0x5b, 0x5a, 0xb4, 0x9c, 0x78,
		0xed, 0x0b, 0x0c, 0xf8, 0x73, 0x5b, 0x78, 0x81, 0x11, 0xe1, 0x28, 0xdf, 0x41, 0x39, 0x35, 0xd1,
		0x1b, 0x50, 0x1c, 0x60, 0x90, 0xa4, 0x1f, 0xfe, 0xa4, 0x3b, 0x50, 0x1a, 0x9b, 0x43, 0x3f, 0xee,
		0x91, 0xb7, 0x1a, 0x0f, 0xa4, 0xcf, 0xdb, 0xb7, 0xbb, 0x38, 0xc1, 0xee, 0x61, 0xe8, 0x18, 0x2a,
		0x9b, 0x11, 0xc7, 0x6c, 0x17, 0x9e, 0x92, 0xc6, 0x9f, 0xab, 0xb0, 0x7e, 0x98, 0x4e, 0x75, 0xbb,
		0xcd, 0x7d, 0xfa, 0x3d, 0x81, 0x4d, 0xf9, 0x64, 0x44, 0x1b, 0x52, 0xf8, 0xdc, 0xd9, 0x4e, 0x79,
		0xbc, 0x50, 0x4c, 0x52, 0xc5, 0x1f, 0x08, 0x28, 0xd9, 0xf7, 0x2f, 0xfd, 0x24, 0x13, 0x33, 0x77,
		0x6e, 0x52, 0x9e, 0x2c, 0x1c, 0x97, 0xf0, 0xf9, 0x89, 0xc0, 0xdd, 0x3c, 0x85, 0xa6, 0x4f, 0x33,
		0x91, 0xe7, 0xdc, 0xd3, 0xca, 0xa7, 0x57, 0x88, 0x4c, 0x58, 0xfd, 0x9a, 0xcc, 0xb0, 0xd9, 0xea,
		0x47, 0xb7, 0x33, 0xd1, 0xe7, 0xea, 0xb9, 0xb2, 0x73, 0xa5, 0xd8, 0x84, 0x5b, 0xd8, 0x45, 0x72,
		0x95, 0xc9, 0xe8, 0xa2, 0x5c, 0x9d, 0xcc, 0xe8, 0xa2, 0x39, 0x32, 0x76, 0x46, 0xe0, 0x76, 0x86,
		0x06, 0x50, 0x39, 0x60, 0xbe, 0x02, 0x29, 0x1f, 0x2f, 0x16, 0x94, 0xd0, 0x98, 0xc0, 0x4d, 0xc9,
		0x17, 0x4f, 0xf5, 0xcb, 0x6b, 0x43, 0xfc, 0xf4, 0x8f, 0x16, 0x15, 0x93, 0xbd, 0x1e, 0xdc, 0xb6,
		0x9c, 0x91, 0x2c, 0x6c, 0x6f, 0xf3, 0xef, 0x8f, 0xbe, 0x15, 0xef, 0x85, 0xcd, 0x70, 0x59, 0x6b,
		0x92, 0x6f, 0xeb, 0x7d, 0x26, 0x8e, 0xfc, 0x8e, 0x66, 0x39, 0x23, 0x7d, 0x76, 0xbb, 0xfb, 0x90,
		0x75, 0x87, 0x7a, 0xdf, 0xd1, 0xa3, 0xa5, 0x2e, 0x59, 0xf5, 0x76, 0x4c, 0x97, 0x8d, 0xeb, 0x9d,
		0x95, 0xc8, 0xf6, 0xf8, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x69, 0xe0, 0xa8, 0x77, 0x0e,
		0x00, 0x00,
	},
	// uber/cadence/api/v1/visibility.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
		0x14, 0x85, 0x71, 0x69, 0x23, 0x71, 0x53, 0xa8, 0x35, 0x08, 0x02, 0xae, 0x20, 0xc8, 0x62, 0x51,
		0x21, 0x31, 0x96, 0xcb, 0xb2, 0x0b, 0x94, 0x60, 0x83, 0x46, 0x84, 0x24, 0x38, 0x6e, 0x4a, 0xd8,
		0x58, 0x63, 0x7b, 0x1a, 0x46, 0x8c, 0x3d, 0x96, 0x3d, 0x4e, 0xdb, 0xa7, 0xe0, 0x3d, 0x79, 0x0a,
		0xe4, 0xbf, 0x0a, 0x09, 0x57, 0xec, 0xec, 0x73, 0xcf, 0xf9, 0x34, 0xf7, 0x07, 0x5e, 0x97, 0x21,
		0xcb, 0xad, 0x88, 0xc6, 0x2c, 0x8d, 0x98, 0x45, 0x33, 0x6e, 0xed, 0x6c, 0x6b, 0xc7, 0x0b, 0x1e,
		0x72, 0xc1, 0xd5, 0x0d, 0xce, 0x72, 0xa9, 0x24, 0x7a, 0x5c, 0xb9, 0x70, 0xeb, 0xc2, 0x34, 0xe3,
		0x78, 0x67, 0x1b, 0xe3, 0xad, 0x94, 0x5b, 0xc1, 0xac, 0xda, 0x12, 0x96, 0x97, 0x96, 0xe2, 0x09,
		0x2b, 0x14, 0x4d, 0xb2, 0x26, 0x65, 0x98, 0x7d, 0xec, 0x2b, 0x99, 0xff, 0xbc, 0x14, 0xf2, 0xaa,
		0xf1, 0x98, 0x5f, 0x61, 0x74, 0xd1, 0x2a, 0xee, 0x35, 0x8b, 0x4a, 0xc5, 0x65, 0xfa, 0x91, 0x0b,
		0xc5, 0x72, 0x34, 0x86, 0x61, 0x67, 0x0e, 0x78, 0xfc, 0x4c, 0x7b, 0xa5, 0x9d, 0x3c, 0xf0, 0xa0,
		0x93, 0x48, 0x8c, 0x9e, 0xc0, 0x20, 0x2f, 0xd3, 0xaa, 0xb6, 0x57, 0xd7, 0x0e, 0xf2, 0x32, 0x25,
		0xb1, 0x79, 0x02, 0xa8, 0x43, 0xfa, 0x37, 0x19, 0x6b, 0x69, 0x08, 0xf6, 0x53, 0x9a, 0xb0, 0x16,
		0x53, 0x7f, 0x9b, 0xbf, 0x34, 0x38, 0x5a, 0x29, 0x9a, 0x2b, 0x9f, 0x27, 0x9d, 0xef, 0x3d, 0x3c,
		0x64, 0x34, 0x17, 0x9c, 0x15, 0x2a, 0xa8, 0x1a, 0xaa, 0x03, 0xc3, 0x53, 0x03, 0x37, 0xdd, 0xe2,
		0xae, 0x5b, 0xec, 0x77, 0xdd, 0x7a, 0x87, 0x5d, 0xa0, 0x92, 0xd0, 0x19, 0x0c, 0x05, 0x55, 0xb7,
		0xf1, 0xbd, 0xff, 0xc6, 0xa1, 0xb1, 0x57, 0x82, 0xb9, 0x81, 0xc3, 0x95, 0xa2, 0xaa, 0x2c, 0xda,
		0xd7, 0x10, 0x18, 0x14, 0xf5, 0x7f, 0xfd, 0x8c, 0x47, 0xa7, 0x36, 0xee, 0xd9, 0x04, 0xfe, 0x67,
		0x82, 0x1f, 0x84, 0x2c, 0x58, 0x03, 0xf2, 0x5a, 0xc0, 0x9b, 0xdf, 0x1a, 0xe8, 0x24, 0x8d, 0xd9,
		0x35, 0x8b, 0xd7, 0x54, 0x94, 0xac, 0x9a, 0x0d, 0x7a, 0x09, 0x06, 0x99, 0x3b, 0xee, 0x37, 0xd7,
		0x09, 0xd6, 0x93, 0xd9, 0xb9, 0x1b, 0xf8, 0x9b, 0xa5, 0x1b, 0x90, 0xf9, 0x7a, 0x32, 0x23, 0x8e,
		0x7e, 0x0f, 0xbd, 0x80, 0xe7, 0x3d, 0xf5, 0x95, 0xef, 0x91, 0xf9, 0x27, 0x5d, 0xbb, 0x23, 0xfe,
		0xd9, 0xdd, 0x5c, 0x2c, 0x3c, 0x47, 0xdf, 0x43, 0x06, 0x3c, 0xed, 0xc5, 0xfb, 0xfa, 0xfd, 0x3b,
		0xd0, 0xce, 0xe2, 0x7c, 0x3a, 0x73, 0xf5, 0x7d, 0x74, 0x0c, 0xa3, 0x9e, 0xf2, 0x74, 0xb1, 0x98,
		0xe9, 0x07, 0x68, 0x0c, 0xc7, 0x7d, 0xd9, 0x89, 0xef, 0xfa, 0xe4, 0x8b, 0xab, 0x0f, 0xa6, 0x01,
		0x8c, 0x22, 0x99, 0xf4, 0x0d, 0x6b, 0x7a, 0xb4, 0xbe, 0xbd, 0xee, 0x65, 0xb5, 0x8c, 0xa5, 0xf6,
		0xdd, 0xde, 0x72, 0xf5, 0xa3, 0x0c, 0x71, 0x24, 0x13, 0xeb, 0xef, 0x9b, 0x7d, 0xcb, 0x63, 0x61,
		0x6d, 0x65, 0x73, 0xe1, 0xed, 0x01, 0x9f, 0xd1, 0x8c, 0xef, 0xec, 0x70, 0x50, 0x6b, 0xef, 0xfe,
		0x04, 0x00, 0x00, 0xff, 0xff, 0x46, 0x40, 0x75, 0x5d, 0x40, 0x03, 0x00, 0x00,
	},
	// google/protobuf/timestamp.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc9, 0xcc, 0x4d,
		0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0xd0, 0x03, 0x0b, 0x09, 0xf1, 0x43, 0x14, 0xe8, 0xc1, 0x14, 0x28,
		0x59, 0x73, 0x71, 0x86, 0xc0, 0xd4, 0x08, 0x49, 0x70, 0xb1, 0x17, 0xa7, 0x26, 0xe7, 0xe7, 0xa5,
		0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xc1, 0xb8, 0x42, 0x22, 0x5c, 0xac, 0x79, 0x89,
		0x79, 0xf9, 0xc5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x10, 0x8e, 0x53, 0x2b, 0x23, 0x97,
		0x70, 0x72, 0x7e, 0xae, 0x1e, 0x9a, 0xa1, 0x4e, 0x7c, 0x70, 0x23, 0x03, 0x40, 0x42, 0x01, 0x8c,
		0x51, 0x46, 0x50, 0x25, 0xe9, 0xf9, 0x39, 0x89, 0x79, 0xe9, 0x7a, 0xf9, 0x45, 0xe9, 0x48, 0x6e,
		0xac, 0x2c, 0x48, 0x2d, 0xd6, 0xcf, 0xce, 0xcb, 0x2f, 0xcf, 0x43, 0xb8, 0xb7, 0x20, 0xe9, 0x07,
		0x23, 0xe3, 0x22, 0x26, 0x66, 0xf7, 0x00, 0xa7, 0x55, 0x4c, 0x72, 0xee, 0x10, 0xdd, 0x01, 0x50,
		0x2d, 0x7a, 0xe1, 0xa9, 0x39, 0x39, 0xde, 0x20, 0x0d, 0x21, 0x20, 0xbd, 0x49, 0x6c, 0x60, 0xb3,
		0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x65, 0xce, 0x7d, 0xff, 0x00, 0x00, 0x00,
	},
	// uber/cadence/api/v1/workflow.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0xcf, 0x6f, 0xdb, 0xc8,
		0xf5, 0xff, 0x52, 0xb2, 0x1d, 0xfb, 0xc9, 0x3f, 0xe8, 0xb1, 0x1d, 0x2b, 0xce, 0x6e, 0xe2, 0x68,
		0x37, 0x89, 0xa3, 0xef, 0xda, 0x5e, 0x27, 0x9b, 0x64, 0x13, 0x37, 0x4d, 0x69, 0x8a, 0x8e, 0x19,
		0xcb, 0x94, 0x3a, 0xa2, 0xe2, 0x78, 0xd1, 0x96, 0xa0, 0xa5, 0xb1, 0xcd, 0x46, 0x22, 0x05, 0x72,
		0xe4, 0xc4, 0xf7, 0x02, 0x3d, 0xb7, 0xa7, 0xa2, 0xa7, 0xfe, 0x01, 0x05, 0x8a, 0xa2, 0x87, 0x9e,
		0x8a, 0xde, 0x0b, 0xf4, 0xda, 0x7f, 0xa1, 0xe8, 0x7f, 0x51, 0xcc, 0x90, 0x94, 0x28, 0x89, 0x12,
		0xe5, 0x16, 0xd8, 0xde, 0xc2, 0x37, 0x9f, 0xcf, 0xe3, 0x9b, 0x37, 0xef, 0x7d, 0xde, 0x50, 0x0e,
		0xe4, 0xda, 0xa7, 0xc4, 0xdd, 0xae, 0x99, 0x75, 0x62, 0xd7, 0xc8, 0xb6, 0xd9, 0xb2, 0xb6, 0x2f,
		0x77, 0xb6, 0x3f, 0x3a, 0xee, 0x87, 0xb3, 0x86, 0xf3, 0x71, 0xab, 0xe5, 0x3a, 0xd4, 0x41, 0x4b,
		0x0c, 0xb3, 0x15, 0x60, 0xb6, 0xcc, 0x96, 0xb5, 0x75, 0xb9, 0xb3, 0x76, 0xe7, 0xdc, 0x71, 0xce,
		0x1b, 0x64, 0x9b, 0x43, 0x4e, 0xdb, 0x67, 0xdb, 0xf5, 0xb6, 0x6b, 0x52, 0xcb, 0xb1, 0x7d, 0xd2,
		0xda, 0xdd, 0xfe, 0x75, 0x6a, 0x35, 0x89, 0x47, 0xcd, 0x66, 0x2b, 0x00, 0xac, 0xc7, 0xbd, 0xb9,
		0xe6, 0x34, 0x9b, 0x1d, 0x17, 0xb1, 0xb1, 0x51, 0xd3, 0xfb, 0xd0, 0xb0, 0x3c, 0xea, 0x63, 0x72,
		0x7f, 0x9b, 0x81, 0x95, 0xe3, 0x20, 0x5c, 0xe5, 0x13, 0xa9, 0xb5, 0x59, 0x08, 0xaa, 0x7d, 0xe6,
		0xa0, 0x2a, 0xa0, 0x70, 0x1f, 0x06, 0x09, 0x57, 0xb2, 0xc2, 0xba, 0xb0, 0x91, 0x79, 0xfc, 0x60,
		0x2b, 0x66, 0x4b, 0x5b, 0x03, 0x7e, 0xf0, 0xe2, 0xc7, 0x7e, 0x13, 0x7a, 0x0a, 0x13, 0xf4, 0xaa,
		0x45, 0xb2, 0x29, 0xee, 0xe8, 0xde, 0x48, 0x47, 0xfa, 0x55, 0x8b, 0x60, 0x0e, 0x47, 0x2f, 0x00,
		0x3c, 0x6a, 0xba, 0xd4, 0x60, 0x69, 0xc8, 0xa6, 0x39, 0x79, 0x6d, 0xcb, 0xcf, 0xd1, 0x56, 0x98,
		0xa3, 0x2d, 0x3d, 0xcc, 0x11, 0x9e, 0xe1, 0x68, 0xf6, 0xcc, 0xa8, 0xb5, 0x86, 0xe3, 0x11, 0x9f,
		0x3a, 0x91, 0x4c, 0xe5, 0x68, 0x4e, 0xd5, 0x61, 0xd6, 0xa7, 0x7a, 0xd4, 0xa4, 0x6d, 0x2f, 0x3b,
		0xb9, 0x2e, 0x6c, 0xcc, 0x3f, 0xde, 0x19, 0x6f, 0xf7, 0x32, 0x63, 0x56, 0x38, 0x11, 0x67, 0x6a,
		0xdd, 0x07, 0x74, 0x1f, 0xe6, 0x2f, 0x2c, 0x8f, 0x3a, 0xee, 0x95, 0xd1, 0x20, 0xf6, 0x39, 0xbd,
		0xc8, 0x4e, 0xad, 0x0b, 0x1b, 0x69, 0x3c, 0x17, 0x58, 0x8b, 0xdc, 0x88, 0x7e, 0x02, 0x2b, 0x2d,
		0xd3, 0x25, 0x36, 0xed, 0xa6, 0xdf, 0xb0, 0xec, 0x33, 0x27, 0x7b, 0x83, 0x6f, 0x61, 0x23, 0x36,
		0x8a, 0x32, 0x67, 0xf4, 0x9c, 0x24, 0x5e, 0x6a, 0x0d, 0x1a, 0x91, 0x04, 0xf3, 0x5d, 0xb7, 0x3c,
		0x33, 0xd3, 0x89, 0x99, 0x99, 0xeb, 0x30, 0x78, 0x76, 0x36, 0x61, 0xa2, 0x49, 0x9a, 0x4e, 0x76,
		0x86, 0x13, 0x6f, 0xc5, 0xc6, 0x73, 0x44, 0x9a, 0x0e, 0xe6, 0x30, 0x84, 0x61, 0xd1, 0x23, 0xa6,
		0x5b, 0xbb, 0x30, 0x4c, 0x4a, 0x5d, 0xeb, 0xb4, 0x4d, 0x89, 0x97, 0x05, 0xce, 0xbd, 0x1f, 0xcb,
		0xad, 0x70, 0xb4, 0xd4, 0x01, 0x63, 0xd1, 0xeb, 0xb3, 0xa0, 0x22, 0x2c, 0x9a, 0x6d, 0xea, 0x18,
		0x2e, 0xf1, 0x08, 0x35, 0x5a, 0x8e, 0x65, 0x53, 0x2f, 0x9b, 0xe1, 0x3e, 0xd7, 0x63, 0x7d, 0x62,
		0x06, 0x2c, 0x73, 0x1c, 0x5e, 0x60, 0xd4, 0x88, 0x01, 0xdd, 0x86, 0x19, 0xd6, 0x1e, 0x06, 0xeb,
		0x8f, 0xec, 0xec, 0xba, 0xb0, 0x31, 0x83, 0xa7, 0x99, 0xa1, 0x68, 0x79, 0x14, 0xc9, 0x30, 0xdf,
		0x59, 0xf4, 0xcf, 0x61, 0x91, 0xbf, 0xe7, 0xf3, 0xd8, 0xf7, 0xe8, 0x01, 0x0d, 0xcf, 0x86, 0x0e,
		0x78, 0xd6, 0x57, 0xe1, 0x86, 0xe5, 0x19, 0x35, 0xd7, 0xb1, 0xb3, 0x73, 0xeb, 0xc2, 0xc6, 0x34,
		0x9e, 0xb2, 0x3c, 0xd9, 0x75, 0x6c, 0xb4, 0x0b, 0x99, 0x76, 0xab, 0x6e, 0xd2, 0xa0, 0x4a, 0xe7,
		0x13, 0xcf, 0x02, 0x7c, 0x38, 0x3f, 0x88, 0x9f, 0x83, 0xd8, 0x32, 0x5d, 0x6a, 0xf1, 0xb3, 0xac,
		0x39, 0xf6, 0x99, 0x75, 0x9e, 0x5d, 0x58, 0x4f, 0x6f, 0x64, 0x1e, 0xbf, 0x1e, 0xaf, 0x54, 0x59,
		0x6c, 0xac, 0x74, 0x7c, 0x17, 0x32, 0xf7, 0xa0, 0xd8, 0xd4, 0xbd, 0xc2, 0x0b, 0xad, 0x5e, 0x2b,
		0x7a, 0x07, 0x4b, 0x2c, 0x7c, 0xc3, 0xb9, 0x24, 0x6e, 0xc3, 0x6c, 0x19, 0x2d, 0xa7, 0x61, 0xd5,
		0xae, 0xb2, 0x22, 0xef, 0x8c, 0x78, 0x5d, 0x60, 0x1b, 0x2c, 0xf9, 0xf0, 0x32, 0x47, 0xe3, 0xc5,
		0x5a, 0xbf, 0x69, 0x6d, 0x0f, 0x96, 0xe3, 0x02, 0x40, 0x22, 0xa4, 0x3f, 0x90, 0x2b, 0xae, 0x3b,
		0x33, 0x98, 0xfd, 0x13, 0x2d, 0xc3, 0xe4, 0xa5, 0xd9, 0x68, 0xfb, 0x12, 0x32, 0x83, 0xfd, 0x87,
		0x97, 0xa9, 0x6f, 0x85, 0xdc, 0x6f, 0x52, 0x70, 0x67, 0xb0, 0x0d, 0xb9, 0xb3, 0x40, 0x5c, 0xd1,
		0xcb, 0xe8, 0x11, 0x0b, 0xe3, 0x1c, 0x60, 0xb7, 0x02, 0x4c, 0x58, 0xef, 0xb6, 0x4c, 0xa0, 0x46,
		0x8e, 0xd1, 0xd5, 0x16, 0xa7, 0x4d, 0x03, 0x59, 0xbb, 0x35, 0x70, 0x70, 0x85, 0x20, 0x00, 0xfc,
		0x59, 0xc7, 0x45, 0x85, 0x2b, 0x94, 0x23, 0x87, 0x6a, 0xe3, 0xb4, 0x29, 0x3a, 0x86, 0xdb, 0x3c,
		0xbc, 0x21, 0xde, 0xd3, 0x49, 0xde, 0x57, 0x19, 0x3b, 0xc6, 0x71, 0xee, 0xef, 0x02, 0x2c, 0xc5,
		0x68, 0x03, 0x2b, 0xf9, 0xba, 0xd3, 0x34, 0x2d, 0xdb, 0xb0, 0xea, 0x41, 0x92, 0xa7, 0x7d, 0x83,
		0x5a, 0x47, 0x77, 0x21, 0x13, 0x2c, 0xda, 0x66, 0x33, 0xcc, 0x37, 0xf8, 0x26, 0xcd, 0x6c, 0x92,
		0x21, 0x33, 0x22, 0xfd, 0xdf, 0xce, 0x88, 0x7b, 0x30, 0x6b, 0xd9, 0x16, 0xb5, 0x4c, 0x4a, 0xea,
		0x2c, 0xae, 0x09, 0x2e, 0x8f, 0x99, 0x8e, 0x4d, 0xad, 0xe7, 0x7e, 0x25, 0xc0, 0x8a, 0xf2, 0x89,
		0x12, 0xd7, 0x36, 0x1b, 0xdf, 0xcb, 0xdc, 0xea, 0x8f, 0x29, 0x35, 0x18, 0xd3, 0x9f, 0xa7, 0x60,
		0xa9, 0x4c, 0xec, 0xba, 0x65, 0x9f, 0x4b, 0x35, 0x6a, 0x5d, 0x5a, 0xf4, 0x8a, 0x47, 0x74, 0x17,
		0x32, 0x66, 0xf0, 0xdc, 0xcd, 0x32, 0x84, 0x26, 0xb5, 0x8e, 0xf6, 0x61, 0xae, 0x03, 0x48, 0x1c,
		0x8e, 0xa1, 0x6b, 0x3e, 0x1c, 0x67, 0xcd, 0xc8, 0x13, 0x7a, 0x0d, 0x93, 0x6c, 0x50, 0xf9, 0xf3,
		0x71, 0xfe, 0xf1, 0xa3, 0xf8, 0x09, 0xd1, 0x1b, 0x21, 0x9b, 0x49, 0x04, 0xfb, 0x3c, 0xa4, 0xc2,
		0xe2, 0x05, 0x31, 0x5d, 0x7a, 0x4a, 0x4c, 0x6a, 0xd4, 0x09, 0x35, 0xad, 0x86, 0x17, 0x4c, 0xcc,
		0xcf, 0x86, 0x8c, 0x9b, 0xab, 0x86, 0x63, 0xd6, 0xb1, 0xd8, 0xa1, 0x15, 0x7c, 0x16, 0x7a, 0x0b,
		0x4b, 0x0d, 0xd3, 0xa3, 0x46, 0xd7, 0x1f, 0x17, 0xb6, 0xc9, 0x44, 0x61, 0x5b, 0x64, 0xb4, 0x83,
		0x90, 0xc5, 0xf5, 0x6d, 0x1f, 0xb8, 0xd1, 0xef, 0x0a, 0x52, 0xf7, 0x3d, 0x4d, 0x25, 0x7a, 0x5a,
		0x60, 0xa4, 0x8a, 0xcf, 0xe1, 0x7e, 0xb2, 0x70, 0xc3, 0xa4, 0x94, 0x34, 0x5b, 0x94, 0xcf, 0xd0,
		0x49, 0x1c, 0x3e, 0xa2, 0x47, 0x20, 0x36, 0xcd, 0x4f, 0x56, 0xb3, 0xdd, 0x34, 0x02, 0x93, 0xc7,
		0xe7, 0xe1, 0x24, 0x5e, 0x08, 0xec, 0x52, 0x60, 0x66, 0x83, 0xd3, 0xab, 0x5d, 0x90, 0x7a, 0xbb,
		0x11, 0x46, 0x32, 0x93, 0x3c, 0x38, 0x3b, 0x0c, 0x1e, 0x87, 0x0c, 0x0b, 0xe4, 0x53, 0xcb, 0xf2,
		0x7b, 0xd6, 0xf7, 0x01, 0x89, 0x3e, 0xe6, 0xbb, 0x14, 0xee, 0xe4, 0x35, 0xcc, 0xf2, 0xa4, 0x9c,
		0x99, 0x56, 0xa3, 0xed, 0x92, 0x60, 0xea, 0xc5, 0x1f, 0xd3, 0xbe, 0x8f, 0xc1, 0x19, 0xc6, 0x08,
		0x1e, 0xd0, 0xd7, 0xb0, 0xcc, 0x1d, 0xb0, 0x5a, 0x27, 0xae, 0x61, 0xd5, 0x89, 0x4d, 0x2d, 0x7a,
		0x15, 0x0c, 0x3e, 0xc4, 0xd6, 0x8e, 0xf9, 0x92, 0x1a, 0xac, 0xa0, 0x67, 0xb0, 0x1a, 0x1e, 0x41,
		0x3f, 0x69, 0x8e, 0x93, 0x56, 0x82, 0xe5, 0x3e, 0xde, 0x5d, 0xc8, 0x84, 0x09, 0x60, 0x0d, 0x30,
		0xcf, 0x5b, 0x07, 0x42, 0x93, 0x5a, 0xcf, 0xfd, 0x29, 0x05, 0xb7, 0x82, 0xba, 0x94, 0x2f, 0xac,
		0x46, 0xfd, 0x7b, 0xe9, 0xe8, 0xaf, 0x22, 0x6e, 0x59, 0xd7, 0x45, 0x45, 0x4e, 0xfc, 0x18, 0xb9,
		0x82, 0x72, 0xa9, 0xeb, 0xef, 0xff, 0xf4, 0x40, 0xff, 0xb3, 0xd1, 0x18, 0x5c, 0xd8, 0x7c, 0xd5,
		0x0e, 0x46, 0xe3, 0xc4, 0x88, 0xd1, 0xe8, 0x4b, 0x32, 0x57, 0xea, 0x70, 0x34, 0xb6, 0xfa, 0x4d,
		0xe8, 0x26, 0x4c, 0xf9, 0x9a, 0xcb, 0xbb, 0x67, 0x06, 0x07, 0x4f, 0xb9, 0x7f, 0xa6, 0x3a, 0x7a,
		0x53, 0x20, 0x35, 0xcb, 0x0b, 0xf3, 0xd5, 0x91, 0x01, 0x21, 0x59, 0x06, 0x42, 0x62, 0x8f, 0x0c,
		0x0c, 0x96, 0x78, 0xea, 0xba, 0x25, 0xfe, 0x0a, 0x66, 0x7b, 0xba, 0x35, 0xf9, 0xc6, 0x9e, 0xf1,
		0xe2, 0x3b, 0x75, 0xa2, 0xb7, 0x53, 0x31, 0xac, 0x3a, 0xae, 0x75, 0x6e, 0xd9, 0x66, 0xc3, 0xe8,
		0x0b, 0x32, 0x59, 0x5b, 0x56, 0x42, 0x6a, 0xa5, 0x27, 0xd8, 0xbe, 0xfa, 0x9c, 0x1a, 0xa8, 0xcf,
		0xbf, 0xa4, 0xe0, 0x56, 0x28, 0x98, 0x45, 0xa7, 0x66, 0x36, 0x0a, 0x96, 0xd7, 0x32, 0x69, 0xed,
		0x62, 0x3c, 0x7d, 0xff, 0xdf, 0xe7, 0xf3, 0x67, 0x70, 0xa7, 0x37, 0x02, 0xc3, 0x39, 0x33, 0xe8,
		0x85, 0xe5, 0x19, 0xd1, 0x34, 0x8f, 0x76, 0xb8, 0xd6, 0x13, 0x51, 0xe9, 0x4c, 0xbf, 0xb0, 0xbc,
		0x40, 0x15, 0xd1, 0xe7, 0x00, 0xfc, 0xde, 0x42, 0x9d, 0x0f, 0xc4, 0x2f, 0xd3, 0x59, 0xcc, 0x2f,
		0x5a, 0x3a, 0x33, 0xe4, 0xde, 0x42, 0x26, 0x7a, 0xcf, 0xde, 0x85, 0xa9, 0xe0, 0xaa, 0x2e, 0xf0,
		0x5b, 0xea, 0x17, 0x09, 0x57, 0x75, 0xfe, 0x15, 0x13, 0x50, 0x72, 0x7f, 0x48, 0xc1, 0x7c, 0xef,
		0x12, 0x7a, 0x08, 0x0b, 0xa7, 0x96, 0x6d, 0xba, 0x57, 0x46, 0xed, 0x82, 0xd4, 0x3e, 0x78, 0xed,
		0x66, 0x70, 0x08, 0xf3, 0xbe, 0x59, 0x0e, 0xac, 0x68, 0x05, 0xa6, 0xdc, 0xb6, 0x1d, 0x8e, 0xef,
		0x19, 0x3c, 0xe9, 0xb6, 0xd9, 0x3d, 0xe7, 0x15, 0xdc, 0x3e, 0xb3, 0x5c, 0x8f, 0x8d, 0x3c, 0xbf,
		0x1b, 0x8c, 0x9a, 0xd3, 0x6c, 0x35, 0x48, 0x4f, 0xab, 0x67, 0x39, 0x24, 0xec, 0x17, 0x39, 0x04,
		0x70, 0xfa, 0x6c, 0xcd, 0x25, 0x66, 0xe7, 0x6c, 0x92, 0x53, 0x99, 0x09, 0xf0, 0x81, 0x90, 0xcf,
		0x71, 0x69, 0xb7, 0xec, 0xf3, 0x71, 0xeb, 0x78, 0x36, 0x24, 0x70, 0x07, 0x77, 0x00, 0xf8, 0xf7,
		0x0f, 0x35, 0x4f, 0x1b, 0xfe, 0x5c, 0x9c, 0xc6, 0x11, 0x4b, 0xfe, 0x8f, 0x02, 0x2c, 0xc7, 0x4d,
		0x7d, 0x94, 0x83, 0x3b, 0x65, 0x45, 0x2b, 0xa8, 0xda, 0x1b, 0x43, 0x92, 0x75, 0xf5, 0x9d, 0xaa,
		0x9f, 0x18, 0x15, 0x5d, 0xd2, 0x15, 0x43, 0xd5, 0xde, 0x49, 0x45, 0xb5, 0x20, 0xfe, 0x1f, 0xfa,
		0x12, 0xd6, 0x87, 0x60, 0x2a, 0xf2, 0x81, 0x52, 0xa8, 0x16, 0x95, 0x82, 0x28, 0x8c, 0xf0, 0x54,
		0xd1, 0x25, 0xac, 0x2b, 0x05, 0x31, 0x85, 0xfe, 0x1f, 0x1e, 0x0e, 0xc1, 0xc8, 0x92, 0x26, 0x2b,
		0x45, 0x03, 0x2b, 0x3f, 0xae, 0x2a, 0x15, 0x06, 0x4e, 0xe7, 0x7f, 0xd1, 0x8d, 0xb9, 0x47, 0xa2,
		0xa2, 0x6f, 0x2a, 0x28, 0xb2, 0x5a, 0x51, 0x4b, 0xda, 0xa8, 0x98, 0xfb, 0x30, 0x43, 0x62, 0xee,
		0x47, 0x85, 0x31, 0xe7, 0x7f, 0x99, 0xea, 0xfe, 0x3c, 0xa2, 0xd6, 0x31, 0x69, 0x77, 0x44, 0xf9,
		0x4b, 0x58, 0x3f, 0x2e, 0xe1, 0xc3, 0xfd, 0x62, 0xe9, 0xd8, 0x50, 0x0b, 0x06, 0x56, 0xaa, 0x15,
		0xc5, 0x28, 0x97, 0x8a, 0xaa, 0x7c, 0x12, 0x89, 0xe4, 0x5b, 0xf8, 0x66, 0x28, 0x4a, 0x2a, 0x32,
		0x6b, 0xa1, 0x5a, 0x2e, 0xaa, 0x32, 0x7b, 0xeb, 0xbe, 0xa4, 0x16, 0x95, 0x82, 0x51, 0xd2, 0x8a,
		0x27, 0xa2, 0x80, 0xbe, 0x82, 0x8d, 0x71, 0x99, 0x62, 0x0a, 0x6d, 0xc2, 0xa3, 0xa1, 0x68, 0xac,
		0xbc, 0x55, 0x64, 0x3d, 0x02, 0x4f, 0xa3, 0x1d, 0xd8, 0x1c, 0x0a, 0xd7, 0x15, 0x7c, 0xa4, 0x6a,
		0x3c, 0xa1, 0xfb, 0x06, 0xae, 0x6a, 0x9a, 0xaa, 0xbd, 0x11, 0x27, 0xf2, 0x57, 0xb0, 0x38, 0xf0,
		0x1d, 0x87, 0xee, 0xc2, 0x6d, 0x19, 0x97, 0x34, 0xa3, 0xf4, 0x4e, 0xc1, 0x45, 0xa9, 0x3c, 0xb8,
		0xff, 0x21, 0x80, 0xca, 0xa1, 0x5a, 0x2e, 0x87, 0x87, 0x10, 0x07, 0xd8, 0xab, 0xee, 0xef, 0x2b,
		0xd8, 0x28, 0x69, 0x8a, 0x98, 0xca, 0xff, 0x4e, 0x80, 0xc5, 0x81, 0x41, 0xc9, 0x5c, 0x97, 0x25,
		0xac, 0x68, 0xba, 0x21, 0x17, 0x4b, 0x71, 0xb9, 0x1f, 0x02, 0x90, 0xf6, 0x24, 0xad, 0x50, 0xd2,
		0x44, 0x01, 0x3d, 0x80, 0x5c, 0x1c, 0x20, 0x28, 0xc3, 0xa0, 0x2a, 0xc5, 0x14, 0xba, 0x07, 0x9f,
		0xc7, 0xe1, 0x3a, 0x89, 0x12, 0xd3, 0xf9, 0x7f, 0xa5, 0xe0, 0xb3, 0x51, 0x3f, 0x00, 0xb1, 0xe2,
		0xef, 0x64, 0x5c, 0x79, 0xaf, 0xc8, 0x55, 0x9d, 0x95, 0x9b, 0xef, 0x8f, 0x15, 0x5d, 0xb5, 0x12,
		0x89, 0x3c, 0x7a, 0x9a, 0x43, 0xc0, 0x72, 0xe9, 0xa8, 0x5c, 0x54, 0x74, 0x9e, 0xc3, 0x3c, 0x3c,
		0x48, 0x82, 0xfb, 0xb5, 0x25, 0xa6, 0x7a, 0xca, 0x6a, 0x98, 0x6b, 0xbe, 0x6f, 0xd6, 0x85, 0x68,
		0x0b, 0xf2, 0x49, 0xe8, 0x4e, 0x16, 0x0a, 0xe2, 0x04, 0xfa, 0x06, 0xbe, 0x4e, 0x0e, 0x5c, 0xd3,
		0x55, 0xad, 0xaa, 0x14, 0x0c, 0xa9, 0x62, 0x68, 0xca, 0xb1, 0x38, 0x39, 0xce, 0x76, 0x75, 0xf5,
		0x88, 0xb5, 0x46, 0x55, 0x17, 0xa7, 0xf2, 0x7f, 0x15, 0xe0, 0xa6, 0xec, 0xd8, 0xd4, 0xb2, 0xdb,
		0x44, 0xf2, 0x34, 0xf2, 0x51, 0xf5, 0xef, 0x60, 0x8e, 0x8b, 0xee, 0xc3, 0xbd, 0xd0, 0x7f, 0xe0,
		0xde, 0x50, 0x35, 0x55, 0x57, 0x25, 0xbd, 0x84, 0x23, 0xf9, 0x1d, 0x09, 0x63, 0x5a, 0x50, 0x50,
		0xb0, 0x9f, 0xd7, 0xe1, 0x30, 0xac, 0xe8, 0xf8, 0x24, 0x28, 0x05, 0x5f, 0xdc, 0x86, 0x63, 0x79,
		0x85, 0x87, 0xd2, 0x23, 0xa6, 0xf3, 0xbf, 0x17, 0x20, 0x13, 0x7c, 0x98, 0xf3, 0xef, 0xb6, 0x2c,
		0x2c, 0xb3, 0x0d, 0x96, 0xaa, 0xba, 0xa1, 0x9f, 0x94, 0x95, 0xde, 0x1a, 0xee, 0x59, 0xe1, 0xca,
		0x64, 0xe8, 0x25, 0x3f, 0x3b, 0x7e, 0xff, 0xf4, 0x02, 0x82, 0xb7, 0x30, 0x0c, 0x07, 0x8b, 0xa9,
		0x91, 0x18, 0xdf, 0x4f, 0x1a, 0xad, 0xc1, 0xcd, 0x1e, 0xcc, 0x81, 0x22, 0x61, 0x7d, 0x4f, 0x91,
		0x74, 0x71, 0x22, 0xff, 0x5b, 0x01, 0x6e, 0x85, 0x22, 0xac, 0xb3, 0x99, 0x6e, 0x35, 0x49, 0xbd,
		0xd4, 0xa6, 0xb2, 0xd9, 0xf6, 0x08, 0x7a, 0x04, 0xf7, 0x3b, 0xf2, 0xa9, 0x4b, 0x95, 0xc3, 0xee,
		0x59, 0x19, 0xb2, 0xc4, 0x74, 0xa5, 0xbb, 0x9b, 0x44, 0x68, 0x10, 0x82, 0x28, 0xa0, 0x87, 0xf0,
		0xc5, 0x68, 0x28, 0x56, 0x2a, 0x8a, 0x2e, 0xa6, 0xf2, 0xff, 0xc8, 0xc0, 0x6a, 0x34, 0x38, 0xf6,
		0x75, 0x43, 0xea, 0x7e, 0x68, 0x0f, 0x20, 0xd7, 0xeb, 0x24, 0x90, 0xd8, 0xfe, 0xb8, 0x76, 0x60,
		0x73, 0x04, 0xae, 0xaa, 0x1d, 0x48, 0x5a, 0x81, 0x3d, 0x87, 0x20, 0x51, 0x40, 0xaf, 0x61, 0x77,
		0x04, 0x65, 0x4f, 0x2a, 0x74, 0xb3, 0xdc, 0x19, 0x76, 0x92, 0xae, 0x63, 0x75, 0xaf, 0xaa, 0x2b,
		0x15, 0x31, 0x85, 0x14, 0x90, 0x12, 0x1c, 0xf4, 0xea, 0x50, 0xac, 0x9b, 0x34, 0x7a, 0x01, 0x4f,
		0x93, 0xe2, 0xf0, 0x4b, 0x46, 0x3d, 0x52, 0x70, 0x94, 0x3a, 0x81, 0x5e, 0xc2, 0xb3, 0x04, 0x6a,
		0xf0, 0xe6, 0x01, 0xee, 0x24, 0xda, 0x85, 0xe7, 0x89, 0xd1, 0xcb, 0x25, 0x5c, 0x30, 0x8e, 0x24,
		0x7c, 0xd8, 0x4b, 0x9e, 0x42, 0x2a, 0x28, 0x49, 0x2f, 0x0e, 0xd4, 0xcd, 0x88, 0xd1, 0x85, 0x88,
		0xab, 0x1b, 0x63, 0x64, 0x91, 0x19, 0x12, 0xdc, 0x4c, 0xa3, 0x37, 0x20, 0x8f, 0x97, 0x8a, 0xd1,
		0x8e, 0x66, 0xd0, 0x7b, 0xd0, 0xaf, 0x77, 0xaa, 0xca, 0x7b, 0x5d, 0xc1, 0x9a, 0x94, 0xe4, 0x19,
		0xd0, 0x2b, 0x78, 0x91, 0x98, 0xb4, 0x5e, 0xfd, 0x89, 0xd0, 0x33, 0xe8, 0x39, 0x3c, 0x19, 0x41,
		0x8f, 0xd6, 0x48, 0xf7, 0x42, 0xa2, 0x16, 0xc4, 0x59, 0xf4, 0x14, 0x76, 0x46, 0x10, 0x79, 0x17,
		0x1a, 0x15, 0x5d, 0x95, 0x0f, 0x4f, 0xfc, 0xe5, 0xa2, 0x5a, 0xd1, 0xc5, 0x39, 0xf4, 0x23, 0xf8,
		0xc1, 0x08, 0x5a, 0x67, 0xb3, 0xec, 0x1f, 0x0a, 0x8e, 0xb4, 0x18, 0x83, 0x55, 0xb1, 0x22, 0xce,
		0x8f, 0x71, 0x26, 0x15, 0xf5, 0x4d, 0x72, 0xe6, 0x16, 0x90, 0x0c, 0xaf, 0xc7, 0x6a, 0x11, 0xf9,
		0x40, 0x2d, 0x16, 0xe2, 0x9d, 0x88, 0xe8, 0x09, 0x6c, 0x8f, 0x70, 0xb2, 0x5f, 0xc2, 0xb2, 0x12,
		0x4c, 0xac, 0x8e, 0x48, 0x2c, 0xa2, 0x67, 0xf0, 0x78, 0x14, 0x49, 0x52, 0x8b, 0xec, 0xda, 0xd3,
		0xcf, 0x43, 0x6c, 0x8c, 0x8e, 0xb7, 0x75, 0x55, 0x2b, 0x57, 0x75, 0xa3, 0xa2, 0x7e, 0xa7, 0x88,
		0x4b, 0x6c, 0x8c, 0x26, 0x9e, 0x54, 0x98, 0x2b, 0x71, 0x79, 0x50, 0x8c, 0x07, 0x5e, 0xb2, 0xa7,
		0x6a, 0x12, 0x3e, 0x11, 0x57, 0x12, 0x6a, 0x6f, 0x50, 0xe8, 0x7a, 0x4a, 0xe8, 0xe6, 0x38, 0xdb,
		0x51, 0x24, 0x2c, 0x1f, 0x44, 0x33, 0xbe, 0xca, 0xa6, 0xce, 0x3d, 0xfe, 0x63, 0xd0, 0xc0, 0xbd,
		0x2a, 0x2a, 0xf1, 0x3b, 0xb0, 0xe9, 0x9f, 0x5b, 0x4c, 0x15, 0x0c, 0x51, 0xfb, 0x3d, 0xf8, 0xe1,
		0x78, 0x94, 0xce, 0xba, 0x54, 0xc4, 0x8a, 0x54, 0x38, 0xe9, 0xdc, 0x86, 0x85, 0xfc, 0xaf, 0x53,
		0x90, 0x97, 0x4d, 0xbb, 0x46, 0x1a, 0xe1, 0x8f, 0xd0, 0x23, 0xa3, 0xdc, 0x85, 0xe7, 0x63, 0xf4,
		0xfb, 0x90, 0x78, 0x8f, 0xa1, 0x72, 0x5d, 0x72, 0x55, 0x3b, 0xd4, 0x4a, 0xc7, 0xda, 0x28, 0x82,
		0x28, 0x20, 0x0d, 0xde, 0x5e, 0xd7, 0xf1, 0x40, 0x4a, 0xba, 0xf7, 0xd0, 0x14, 0x4f, 0x4a, 0xc5,
		0x3a, 0xe7, 0xbf, 0xc8, 0x8f, 0x97, 0x94, 0xa0, 0x8c, 0xff, 0xb3, 0xa4, 0x5c, 0x97, 0x3c, 0x76,
		0x52, 0xae, 0xeb, 0x78, 0x54, 0x52, 0xf6, 0x7e, 0x0a, 0xab, 0x35, 0xa7, 0x19, 0xf7, 0x03, 0xc7,
		0xde, 0x5c, 0x98, 0x9e, 0x32, 0xfb, 0xc2, 0x2f, 0x0b, 0xdf, 0xed, 0x9c, 0x5b, 0xf4, 0xa2, 0x7d,
		0xba, 0x55, 0x73, 0x9a, 0xdb, 0xd1, 0xbf, 0xdd, 0x6f, 0x5a, 0xf5, 0xc6, 0xf6, 0xb9, 0xe3, 0xff,
		0x5f, 0x80, 0xe0, 0x0f, 0xf9, 0xbb, 0x66, 0xcb, 0xba, 0xdc, 0x39, 0x9d, 0xe2, 0xb6, 0x27, 0xff,
		0x0e, 0x00, 0x00, 0xff, 0xff, 0x25, 0x8b, 0x93, 0x76, 0x88, 0x20, 0x00, 0x00,
	},
	// google/protobuf/duration.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0x29, 0x2d, 0x4a,
		0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0x56,
		0x5c, 0x1c, 0x2e, 0x50, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa9, 0xc9, 0xf9, 0x79, 0x29, 0xc5,
		0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30, 0xae, 0x90, 0x08, 0x17, 0x6b, 0x5e, 0x62, 0x5e,
		0x7e, 0xb1, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xe3, 0xd4, 0xcc, 0xc8, 0x25, 0x9c,
		0x9c, 0x9f, 0xab, 0x87, 0x66, 0xa6, 0x13, 0x2f, 0xcc, 0xc4, 0x00, 0x90, 0x48, 0x00, 0x63, 0x94,
		0x21, 0x54, 0x45, 0x7a, 0x7e, 0x4e, 0x62, 0x5e, 0xba, 0x5e, 0x7e, 0x51, 0x3a, 0xc2, 0x81, 0x25,
		0x95, 0x05, 0xa9, 0xc5, 0xfa, 0xd9, 0x79, 0xf9, 0xe5, 0x79, 0x70, 0xc7, 0x16, 0x24, 0xfd, 0x60,
		0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce, 0x1d, 0xa2, 0x39, 0x00, 0xaa,
		0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4, 0x35, 0x89, 0x0d, 0x6c, 0x94,
		0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xef, 0x8a, 0xb4, 0xc3, 0xfb, 0x00, 0x00, 0x00,
	},
	// uber/cadence/api/v1/common.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x51, 0x73, 0xdb, 0xc4,
		0x13, 0xff, 0x2b, 0x8e, 0x9d, 0x64, 0xed, 0x26, 0xfe, 0x5f, 0x48, 0xe2, 0xa4, 0x04, 0x52, 0xcd,
		0x30, 0x0d, 0x1d, 0x90, 0x27, 0xee, 0x4b, 0x87, 0x4e, 0x01, 0x27, 0x76, 0x12, 0xb5, 0xc1, 0x36,
		0xb2, 0x69, 0xa6, 0x30, 0x83, 0xe6, 0x2c, 0x9d, 0xdc, 0xc3, 0xd2, 0x9d, 0x38, 0x9d, 0x9c, 0xf8,
		0x85, 0xe1, 0x93, 0xf0, 0xc0, 0xd7, 0xe1, 0x91, 0x2f, 0xc4, 0x48, 0x3a, 0xc5, 0x76, 0x71, 0xa6,
		0x3c, 0x30, 0xbc, 0xdd, 0xed, 0xef, 0xb7, 0xbb, 0xbf, 0x3b, 0xed, 0xae, 0x0e, 0x8e, 0xe2, 0x21,
		0x11, 0x75, 0x07, 0xbb, 0x84, 0x39, 0xa4, 0x8e, 0x43, 0x5a, 0x9f, 0x9c, 0xd4, 0x1d, 0x1e, 0x04,
		0x9c, 0x19, 0xa1, 0xe0, 0x92, 0xa3, 0xed, 0x84, 0x61, 0x28, 0x86, 0x81, 0x43, 0x6a, 0x4c, 0x4e,
		0x0e, 0x3e, 0x1a, 0x71, 0x3e, 0xf2, 0x49, 0x3d, 0xa5, 0x0c, 0x63, 0xaf, 0xee, 0xc6, 0x02, 0x4b,
		0x9a, 0x3b, 0xe9, 0xaf, 0xe0, 0xff, 0xd7, 0x5c, 0x8c, 0x3d, 0x9f, 0xdf, 0xb4, 0x6f, 0x89, 0x13,
		0x27, 0x10, 0xfa, 0x18, 0xca, 0x37, 0xca, 0x68, 0x53, 0xb7, 0xa6, 0x1d, 0x69, 0xc7, 0x1b, 0x16,
		0xe4, 0x26, 0xd3, 0x45, 0x3b, 0x50, 0x12, 0x31, 0x4b, 0xb0, 0x95, 0x14, 0x2b, 0x8a, 0x98, 0x99,
		0xae, 0xae, 0x43, 0x25, 0x0f, 0x36, 0x98, 0x86, 0x04, 0x21, 0x58, 0x65, 0x38, 0x20, 0x2a, 0x40,
		0xba, 0x4e, 0x38, 0x4d, 0x47, 0xd2, 0x09, 0x95, 0xd3, 0x7b, 0x39, 0x87, 0xb0, 0xd6, 0xc3, 0x53,
		0x9f, 0x63, 0x37, 0x81, 0x5d, 0x2c, 0x71, 0x0a, 0x57, 0xac, 0x74, 0xad, 0x3f, 0x87, 0xb5, 0x73,
		0x4c, 0xfd, 0x58, 0x10, 0xb4, 0x0b, 0x25, 0x41, 0x70, 0xc4, 0x99, 0xf2, 0x57, 0x3b, 0x54, 0x83,
		0x35, 0x97, 0x48, 0x4c, 0xfd, 0x28, 0x55, 0x58, 0xb1, 0xf2, 0xad, 0xfe, 0x9b, 0x06, 0xab, 0xdf,
		0x90, 0x80, 0xa3, 0x17, 0x50, 0xf2, 0x28, 0xf1, 0xdd, 0xa8, 0xa6, 0x1d, 0x15, 0x8e, 0xcb, 0x8d,
		0x4f, 0x8c, 0x25, 0xf7, 0x67, 0x24, 0x54, 0xe3, 0x3c, 0xe5, 0xb5, 0x99, 0x14, 0x53, 0x4b, 0x39,
		0x1d, 0x5c, 0x43, 0x79, 0xce, 0x8c, 0xaa, 0x50, 0x18, 0x93, 0xa9, 0x52, 0x91, 0x2c, 0x51, 0x03,
		0x8a, 0x13, 0xec, 0xc7, 0x24, 0x15, 0x50, 0x6e, 0x7c, 0xb8, 0x34, 0xbc, 0x3a, 0xa6, 0x95, 0x51,
		0xbf, 0x58, 0x79, 0xa6, 0xe9, 0xbf, 0x6b, 0x50, 0xba, 0x24, 0xd8, 0x25, 0x02, 0x7d, 0xf5, 0x8e,
		0xc4, 0xc7, 0x4b, 0x63, 0x64, 0xe4, 0xff, 0x56, 0xe4, 0x9f, 0x1a, 0x54, 0xfb, 0x04, 0x0b, 0xe7,
		0x6d, 0x53, 0x4a, 0x41, 0x87, 0xb1, 0x24, 0x11, 0xb2, 0x61, 0x93, 0x32, 0x97, 0xdc, 0x12, 0xd7,
		0x5e, 0x90, 0xfd, 0x6c, 0x69, 0xd4, 0x77, 0xdd, 0x0d, 0x33, 0xf3, 0x9d, 0x3f, 0xc7, 0x03, 0x3a,
		0x6f, 0x3b, 0xf8, 0x11, 0xd0, 0xdf, 0x49, 0xff, 0xe2, 0xa9, 0x3c, 0x58, 0x6f, 0x61, 0x89, 0x4f,
		0x7d, 0x3e, 0x44, 0xe7, 0xf0, 0x80, 0x30, 0x87, 0xbb, 0x94, 0x8d, 0x6c, 0x39, 0x0d, 0xb3, 0x02,
		0xdd, 0x6c, 0x3c, 0x5a, 0x1a, 0xab, 0xad, 0x98, 0x49, 0x45, 0x5b, 0x15, 0x32, 0xb7, 0xbb, 0x2b,
		0xe0, 0x95, 0xb9, 0x02, 0xee, 0x65, 0x4d, 0x47, 0xc4, 0x6b, 0x22, 0x22, 0xca, 0x99, 0xc9, 0x3c,
		0x9e, 0x10, 0x69, 0x10, 0xfa, 0x79, 0x23, 0x24, 0x6b, 0xf4, 0x18, 0xb6, 0x3c, 0x82, 0x65, 0x2c,
		0x88, 0x3d, 0xc9, 0xa8, 0xaa, 0xe1, 0x36, 0x95, 0x59, 0x05, 0xd0, 0x5f, 0xc1, 0x5e, 0x3f, 0x0e,
		0x43, 0x2e, 0x24, 0x71, 0xcf, 0x7c, 0x4a, 0x98, 0x54, 0x48, 0x94, 0xf4, 0xea, 0x88, 0xdb, 0x91,
		0x3b, 0x56, 0x91, 0x8b, 0x23, 0xde, 0x77, 0xc7, 0x68, 0x1f, 0xd6, 0x7f, 0xc2, 0x13, 0x9c, 0x02,
		0x59, 0xcc, 0xb5, 0x64, 0xdf, 0x77, 0xc7, 0xfa, 0xaf, 0x05, 0x28, 0x5b, 0x44, 0x8a, 0x69, 0x8f,
		0xfb, 0xd4, 0x99, 0xa2, 0x16, 0x54, 0x29, 0xa3, 0x92, 0x62, 0xdf, 0xa6, 0x4c, 0x12, 0x31, 0xc1,
		0x99, 0xca, 0x72, 0x63, 0xdf, 0xc8, 0xc6, 0x8b, 0x91, 0x8f, 0x17, 0xa3, 0xa5, 0xc6, 0x8b, 0xb5,
		0xa5, 0x5c, 0x4c, 0xe5, 0x81, 0xea, 0xb0, 0x3d, 0xc4, 0xce, 0x98, 0x7b, 0x9e, 0xed, 0x70, 0xe2,
		0x79, 0xd4, 0x49, 0x64, 0xa6, 0xb9, 0x35, 0x0b, 0x29, 0xe8, 0x6c, 0x86, 0x24, 0x69, 0x03, 0x7c,
		0x4b, 0x83, 0x38, 0x98, 0xa5, 0x2d, 0xbc, 0x37, 0xad, 0x72, 0xb9, 0x4b, 0xfb, 0xe9, 0x2c, 0x0a,
		0x96, 0x92, 0x04, 0xa1, 0x8c, 0x6a, 0xab, 0x47, 0xda, 0x71, 0xf1, 0x8e, 0xda, 0x54, 0x66, 0xf4,
		0x02, 0x1e, 0x32, 0xce, 0x6c, 0x91, 0x1c, 0x1d, 0x0f, 0x7d, 0x62, 0x13, 0x21, 0xb8, 0xb0, 0xb3,
		0x91, 0x12, 0xd5, 0x8a, 0x47, 0x85, 0xe3, 0x0d, 0xab, 0xc6, 0x38, 0xb3, 0x72, 0x46, 0x3b, 0x21,
		0x58, 0x19, 0x8e, 0x5e, 0xc2, 0x36, 0xb9, 0x0d, 0x69, 0x26, 0x64, 0x26, 0xb9, 0xf4, 0x3e, 0xc9,
		0x68, 0xe6, 0x95, 0xab, 0xd6, 0x03, 0xd8, 0x33, 0x23, 0xee, 0xa7, 0xc6, 0x0b, 0xc1, 0xe3, 0xb0,
		0x87, 0x85, 0xa4, 0xe9, 0x70, 0x5e, 0x32, 0x30, 0xd1, 0x97, 0x50, 0x8c, 0x24, 0x96, 0x59, 0xc1,
		0x6f, 0x36, 0x8e, 0x97, 0x16, 0xe9, 0x62, 0xc0, 0x7e, 0xc2, 0xb7, 0x32, 0x37, 0x7d, 0x02, 0x0f,
		0x17, 0xd1, 0x33, 0xce, 0x3c, 0x3a, 0x52, 0x0a, 0xd1, 0x35, 0x54, 0x69, 0x0e, 0xdb, 0xa3, 0x04,
		0xcf, 0x5b, 0xfb, 0xb3, 0x7f, 0x90, 0xe9, 0x4e, 0xba, 0xb5, 0x45, 0x17, 0x80, 0x48, 0xff, 0x43,
		0x83, 0x83, 0x66, 0x34, 0x65, 0x4e, 0xfe, 0xdb, 0x58, 0xcc, 0x5b, 0x83, 0x35, 0xc2, 0x92, 0x7b,
		0xce, 0xfe, 0x41, 0xeb, 0x56, 0xbe, 0x45, 0x0d, 0xd8, 0x09, 0x05, 0x71, 0x89, 0x47, 0x19, 0x71,
		0xed, 0x9f, 0x63, 0x12, 0x13, 0x3b, 0xbd, 0x95, 0xac, 0x94, 0xb7, 0x67, 0xe0, 0xb7, 0x09, 0xd6,
		0x49, 0x2e, 0xe9, 0x10, 0x20, 0x23, 0xa6, 0xed, 0x5c, 0x48, 0x89, 0x1b, 0xa9, 0x25, 0x6d, 0xd4,
		0xaf, 0xa1, 0x92, 0xc1, 0x4e, 0xaa, 0x21, 0x2d, 0x92, 0x72, 0xe3, 0x70, 0xe9, 0x01, 0xf3, 0x29,
		0x61, 0x95, 0x53, 0x97, 0x4c, 0xf5, 0x93, 0x1b, 0xa8, 0xcc, 0x0f, 0x02, 0xb4, 0x0f, 0x3b, 0xed,
		0xce, 0x59, 0xb7, 0x65, 0x76, 0x2e, 0xec, 0xc1, 0x9b, 0x5e, 0xdb, 0x36, 0x3b, 0xaf, 0x9b, 0x57,
		0x66, 0xab, 0xfa, 0x3f, 0x74, 0x00, 0xbb, 0x8b, 0xd0, 0xe0, 0xd2, 0x32, 0xcf, 0x07, 0xd6, 0x75,
		0x55, 0x43, 0xbb, 0x80, 0x16, 0xb1, 0x97, 0xfd, 0x6e, 0xa7, 0xba, 0x82, 0x6a, 0xf0, 0xc1, 0xa2,
		0xbd, 0x67, 0x75, 0x07, 0xdd, 0xa7, 0xd5, 0xc2, 0x93, 0x5f, 0x60, 0x7b, 0xc9, 0xc7, 0x45, 0x8f,
		0xe0, 0xd0, 0xec, 0x77, 0xaf, 0x9a, 0x03, 0xb3, 0xdb, 0xb1, 0x2f, 0xac, 0xee, 0x77, 0x3d, 0xbb,
		0x3f, 0x68, 0x0e, 0xe6, 0x75, 0xdc, 0x4b, 0xb9, 0x6c, 0x37, 0xaf, 0x06, 0x97, 0x6f, 0xaa, 0xda,
		0xfd, 0x94, 0x96, 0xd5, 0x34, 0x3b, 0xed, 0x56, 0x75, 0xe5, 0xf4, 0x07, 0xd8, 0x73, 0x78, 0xb0,
		0xec, 0xa6, 0x4e, 0xcb, 0x67, 0xe9, 0x13, 0xa5, 0x97, 0x54, 0x7d, 0x4f, 0xfb, 0xfe, 0x64, 0x44,
		0xe5, 0xdb, 0x78, 0x68, 0x38, 0x3c, 0xa8, 0xcf, 0x3f, 0x68, 0x3e, 0xa7, 0xae, 0x5f, 0x1f, 0xf1,
		0xec, 0x99, 0xa2, 0x5e, 0x37, 0xcf, 0x71, 0x48, 0x27, 0x27, 0xc3, 0x52, 0x6a, 0x7b, 0xfa, 0x57,
		0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0xd9, 0xb2, 0xe0, 0x01, 0x09, 0x00, 0x00,
	},
	// uber/cadence/api/v1/tasklist.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdb, 0x4e, 0xe3, 0x46,
		0x18, 0x6e, 0x4e, 0xbb, 0xf0, 0x67, 0x01, 0xef, 0x00, 0x4b, 0x92, 0xdd, 0x6d, 0xd9, 0x5c, 0x20,
		0x8a, 0x5a, 0x47, 0xd0, 0x56, 0xaa, 0xda, 0x6a, 0xbb, 0x81, 0x44, 0x8b, 0x45, 0x60, 0x23, 0xc7,
		0x4b, 0x45, 0xa5, 0xca, 0x9a, 0xd8, 0x43, 0x98, 0xc6, 0xf6, 0x58, 0x9e, 0x71, 0x02, 0x37, 0xbd,
		0xed, 0x1b, 0xf4, 0x61, 0xfa, 0x0e, 0x7d, 0xa7, 0x6a, 0xc6, 0x4e, 0xc8, 0xc1, 0xa0, 0xee, 0x45,
		0xef, 0x32, 0xff, 0x37, 0xdf, 0x7c, 0xff, 0x39, 0x86, 0x7a, 0xdc, 0x27, 0x51, 0xc3, 0xc1, 0x2e,
		0x09, 0x1c, 0xd2, 0xc0, 0x21, 0x6d, 0x8c, 0x0e, 0x1b, 0x02, 0xf3, 0xa1, 0x47, 0xb9, 0xd0, 0xc3,
		0x88, 0x09, 0x86, 0x36, 0xe5, 0x1d, 0x3d, 0xbd, 0xa3, 0xe3, 0x90, 0xea, 0xa3, 0xc3, 0xda, 0xe7,
		0x03, 0xc6, 0x06, 0x1e, 0x69, 0xa8, 0x2b, 0xfd, 0xf8, 0xba, 0xe1, 0xc6, 0x11, 0x16, 0x94, 0x05,
		0x09, 0xa9, 0xf6, 0xc5, 0x22, 0x2e, 0xa8, 0x4f, 0xb8, 0xc0, 0x7e, 0x98, 0x5e, 0x58, 0x7a, 0x60,
		0x1c, 0xe1, 0x30, 0x24, 0x11, 0x4f, 0xf0, 0xfa, 0x47, 0x58, 0xb1, 0x30, 0x1f, 0x76, 0x28, 0x17,
		0x08, 0x41, 0x31, 0xc0, 0x3e, 0xa9, 0xe4, 0x76, 0x73, 0xfb, 0xab, 0xa6, 0xfa, 0x8d, 0xbe, 0x83,
		0xe2, 0x90, 0x06, 0x6e, 0x25, 0xbf, 0x9b, 0xdb, 0x5f, 0x3f, 0x7a, 0xa3, 0x67, 0x38, 0xa9, 0x4f,
		0x1e, 0x38, 0xa3, 0x81, 0x6b, 0xaa, 0xeb, 0x75, 0x0c, 0xda, 0xc4, 0x7a, 0x4e, 0x04, 0x76, 0xb1,
		0xc0, 0xe8, 0x1c, 0xb6, 0x7c, 0x7c, 0x6b, 0xcb, 0xb0, 0xb9, 0x1d, 0x92, 0xc8, 0xe6, 0xc4, 0x61,
		0x81, 0xab, 0xe4, 0xca, 0x47, 0xaf, 0xf4, 0xc4, 0x53, 0x7d, 0xe2, 0xa9, 0xde, 0x62, 0x71, 0xdf,
		0x23, 0x97, 0xd8, 0x8b, 0x89, 0xf9, 0xdc, 0xc7, 0xb7, 0xf2, 0x41, 0xde, 0x25, 0x51, 0x4f, 0xd1,
		0xea, 0x1f, 0xa1, 0x3a, 0x91, 0xe8, 0xe2, 0x48, 0x50, 0x99, 0x95, 0xa9, 0x96, 0x06, 0x85, 0x21,
		0xb9, 0x4b, 0x23, 0x91, 0x3f, 0xd1, 0x1e, 0x6c, 0xb0, 0x71, 0x40, 0x22, 0xfb, 0x86, 0x71, 0x61,
		0xab, 0x38, 0xf3, 0x0a, 0x5d, 0x53, 0xe6, 0x53, 0xc6, 0xc5, 0x05, 0xf6, 0x49, 0x7d, 0x08, 0xdb,
		0x06, 0x67, 0x9e, 0x4a, 0xf2, 0xfb, 0x88, 0xc5, 0xe1, 0x39, 0x11, 0x11, 0x75, 0x38, 0x6a, 0xc0,
		0x56, 0x40, 0xc6, 0xd9, 0xee, 0xe7, 0xcc, 0xe7, 0x01, 0x19, 0xcf, 0x3b, 0x88, 0xde, 0xc0, 0xb3,
		0x90, 0x79, 0x1e, 0x89, 0x6c, 0x87, 0xc5, 0x81, 0x50, 0x72, 0x05, 0xb3, 0x9c, 0xd8, 0x4e, 0xa4,
		0xa9, 0xfe, 0x67, 0x11, 0xd6, 0x27, 0x41, 0xf4, 0x04, 0x16, 0x31, 0x47, 0x5f, 0x01, 0xea, 0x63,
		0x67, 0xe8, 0xb1, 0x41, 0x42, 0xb3, 0x6f, 0x68, 0x20, 0x94, 0x48, 0xc1, 0xd4, 0x52, 0x44, 0x91,
		0x4f, 0x69, 0x20, 0xd0, 0x6b, 0x80, 0x88, 0x60, 0xd7, 0xf6, 0xc8, 0x88, 0x78, 0xa9, 0xc2, 0xaa,
		0xb4, 0x74, 0xa4, 0x01, 0xbd, 0x84, 0x55, 0xec, 0x0c, 0x53, 0xb4, 0xa0, 0xd0, 0x15, 0xec, 0x0c,
		0x13, 0x70, 0x0f, 0x36, 0x22, 0x2c, 0xc8, 0x6c, 0x2c, 0x45, 0x15, 0xcb, 0x9a, 0x34, 0xdf, 0xc7,
		0xd1, 0x82, 0x35, 0x19, 0xb4, 0x4d, 0x5d, 0xbb, 0xef, 0x31, 0x67, 0x58, 0x29, 0xa9, 0x82, 0xed,
		0x3e, 0xd8, 0x0b, 0x46, 0xeb, 0x58, 0xde, 0x33, 0xcb, 0x92, 0x66, 0xb8, 0xea, 0x80, 0x46, 0xb0,
		0x43, 0x27, 0x79, 0xb5, 0x07, 0x32, 0xb1, 0xb6, 0x9f, 0x64, 0xb6, 0xf2, 0x64, 0xb7, 0xb0, 0x5f,
		0x3e, 0x7a, 0xfb, 0x68, 0x6f, 0x25, 0xd9, 0xd1, 0x33, 0x4b, 0xd3, 0x0e, 0x44, 0x74, 0x67, 0x6e,
		0xd3, 0x4f, 0x2a, 0xdb, 0xd3, 0x07, 0xca, 0x56, 0x13, 0x50, 0x7b, 0x58, 0x25, 0xa3, 0xb1, 0xde,
		0x41, 0x69, 0x24, 0x7b, 0x54, 0x65, 0xbf, 0x7c, 0x74, 0x90, 0x19, 0x46, 0xe6, 0x8b, 0x66, 0x42,
		0xfc, 0x21, 0xff, 0x7d, 0xae, 0xfe, 0x33, 0x94, 0x67, 0x52, 0x87, 0xaa, 0xb0, 0xc2, 0x05, 0x8e,
		0x84, 0x4d, 0xdd, 0xb4, 0xf6, 0x4f, 0xd5, 0xd9, 0x70, 0xd1, 0x36, 0x3c, 0x21, 0x81, 0x2b, 0x81,
		0xa4, 0xdc, 0x25, 0x12, 0xb8, 0x86, 0x5b, 0xff, 0x2b, 0x07, 0xd0, 0x55, 0xad, 0x65, 0x04, 0xd7,
		0x0c, 0xb5, 0x40, 0xf3, 0x30, 0x17, 0x36, 0x76, 0x1c, 0xc2, 0xb9, 0x2d, 0xd7, 0x42, 0x3a, 0x68,
		0xb5, 0xa5, 0x41, 0xb3, 0x26, 0x3b, 0xc3, 0x5c, 0x97, 0x9c, 0xa6, 0xa2, 0x48, 0x23, 0xaa, 0xc1,
		0x0a, 0x75, 0x49, 0x20, 0xa8, 0xb8, 0x4b, 0xa7, 0x65, 0x7a, 0xce, 0x6a, 0x9f, 0x42, 0x46, 0xfb,
		0xd4, 0xff, 0xce, 0x41, 0xb5, 0x27, 0xa8, 0x33, 0xbc, 0x6b, 0xdf, 0x12, 0x27, 0x96, 0x49, 0x68,
		0x0a, 0x11, 0xd1, 0x7e, 0x2c, 0x08, 0x47, 0xef, 0x41, 0x1b, 0xb3, 0x68, 0x48, 0x22, 0x55, 0x21,
		0x5b, 0xee, 0xc3, 0xd4, 0xcf, 0xd7, 0x8f, 0xf6, 0x83, 0xb9, 0x9e, 0xd0, 0xa6, 0xcb, 0xcb, 0x82,
		0x2a, 0x77, 0x6e, 0x88, 0x1b, 0x7b, 0xc4, 0x16, 0xcc, 0x4e, 0xb2, 0x27, 0xc3, 0x66, 0xb1, 0x48,
		0x4b, 0x53, 0x5d, 0x5e, 0x31, 0xe9, 0x36, 0x35, 0x5f, 0x4c, 0xb8, 0x16, 0xeb, 0x49, 0xa6, 0x95,
		0x10, 0xeb, 0x6f, 0xe1, 0xf9, 0xd2, 0x92, 0x41, 0x5f, 0x82, 0xb6, 0xd0, 0xca, 0xbc, 0x92, 0xdb,
		0x2d, 0xec, 0xaf, 0x9a, 0x1b, 0xf3, 0x3d, 0xc8, 0xeb, 0xff, 0x14, 0x61, 0x67, 0xe9, 0x81, 0x13,
		0x16, 0x5c, 0xd3, 0x01, 0xaa, 0xc0, 0xd3, 0x11, 0x89, 0x38, 0x65, 0xc1, 0xa4, 0xc4, 0xe9, 0x11,
		0x1d, 0xc1, 0x66, 0x10, 0xfb, 0xb6, 0x9a, 0xec, 0x70, 0xc2, 0xe2, 0x2a, 0x8a, 0xd2, 0x71, 0xbe,
		0x22, 0xdb, 0x36, 0xf6, 0x4d, 0x82, 0xdd, 0xe9, 0x93, 0x1c, 0x7d, 0x0b, 0x5b, 0x92, 0x33, 0x8e,
		0xa8, 0xac, 0xc9, 0x3d, 0xa9, 0x30, 0x25, 0xa1, 0x20, 0xf6, 0x7f, 0x91, 0xf0, 0x0c, 0x8b, 0xc2,
		0xc6, 0xa2, 0x4a, 0x51, 0x4d, 0xe3, 0xbb, 0x47, 0xb3, 0xbf, 0x10, 0x8a, 0x3e, 0xef, 0x4b, 0x32,
		0x8f, 0xeb, 0xd1, 0xbc, 0x83, 0x1e, 0x68, 0x4b, 0xce, 0x95, 0x94, 0x56, 0xf3, 0x93, 0xb4, 0x16,
		0x42, 0x48, 0xc4, 0x36, 0xc6, 0xf3, 0xd6, 0x1a, 0x85, 0xcd, 0x0c, 0xa7, 0x66, 0xc7, 0xb7, 0x94,
		0x8c, 0xef, 0x4f, 0xf3, 0xe3, 0xbb, 0xf7, 0xdf, 0x7c, 0x99, 0x19, 0xdd, 0xda, 0xef, 0xb0, 0x95,
		0xe5, 0xd3, 0xff, 0xa1, 0x75, 0xf0, 0x07, 0x3c, 0x9b, 0xfd, 0xb7, 0x45, 0x35, 0x78, 0x61, 0x35,
		0x7b, 0x67, 0x76, 0xc7, 0xe8, 0x59, 0xf6, 0x99, 0x71, 0xd1, 0xb2, 0x8d, 0x8b, 0xcb, 0x66, 0xc7,
		0x68, 0x69, 0x9f, 0xa1, 0x2a, 0x6c, 0x2f, 0x60, 0x17, 0x1f, 0xcc, 0xf3, 0x66, 0x47, 0xcb, 0x65,
		0x40, 0x3d, 0xcb, 0x38, 0x39, 0xbb, 0xd2, 0xf2, 0xe8, 0x15, 0x54, 0x16, 0xa0, 0x76, 0xf7, 0xb4,
		0x7d, 0xde, 0x36, 0x9b, 0x1d, 0xad, 0x70, 0xe0, 0xde, 0xeb, 0x5b, 0x77, 0x21, 0x99, 0xd7, 0xb7,
		0xae, 0xba, 0xed, 0x19, 0xfd, 0x97, 0xb0, 0xb3, 0x80, 0xb5, 0xda, 0x27, 0x46, 0xcf, 0xf8, 0x70,
		0xa1, 0xe5, 0x32, 0xc0, 0xe6, 0x89, 0x65, 0x5c, 0x1a, 0xd6, 0x95, 0x96, 0x3f, 0xfe, 0x0d, 0x76,
		0x1c, 0xe6, 0x67, 0x65, 0xe7, 0x78, 0x6d, 0x9a, 0x1e, 0x39, 0xc3, 0xdd, 0xdc, 0xaf, 0x87, 0x03,
		0x2a, 0x6e, 0xe2, 0xbe, 0xee, 0x30, 0xbf, 0x31, 0xfb, 0x95, 0xf5, 0x35, 0x75, 0xbd, 0xc6, 0x80,
		0x25, 0x1f, 0x3e, 0xe9, 0x27, 0xd7, 0x8f, 0x38, 0xa4, 0xa3, 0xc3, 0xfe, 0x13, 0x65, 0xfb, 0xe6,
		0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x45, 0xbe, 0xb6, 0x96, 0x09, 0x00, 0x00,
	},
	// google/protobuf/wrappers.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x2f, 0x4a, 0x2c,
		0x28, 0x48, 0x2d, 0x2a, 0xd6, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0xca,
		0x5c, 0xdc, 0x2e, 0xf9, 0xa5, 0x49, 0x39, 0xa9, 0x61, 0x89, 0x39, 0xa5, 0xa9, 0x42, 0x22, 0x5c,
		0xac, 0x65, 0x20, 0x86, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x63, 0x10, 0x84, 0xa3, 0xa4, 0xc4, 0xc5,
		0xe5, 0x96, 0x93, 0x9f, 0x58, 0x82, 0x45, 0x0d, 0x13, 0x92, 0x1a, 0xcf, 0xbc, 0x12, 0x33, 0x13,
		0x2c, 0x6a, 0x98, 0x61, 0x6a, 0x94, 0xb9, 0xb8, 0x43, 0x71, 0x29, 0x62, 0x41, 0x35, 0xc8, 0xd8,
		0x08, 0x8b, 0x1a, 0x56, 0x34, 0x83, 0xb0, 0x2a, 0xe2, 0x85, 0x29, 0x52, 0xe4, 0xe2, 0x74, 0xca,
		0xcf, 0xcf, 0xc1, 0xa2, 0x84, 0x03, 0xc9, 0x9c, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0x74, 0x2c, 0x8a,
		0x38, 0x91, 0x1c, 0xe4, 0x54, 0x59, 0x92, 0x5a, 0x8c, 0x45, 0x0d, 0x0f, 0x54, 0x8d, 0x53, 0x33,
		0x23, 0x97, 0x70, 0x72, 0x7e, 0xae, 0x1e, 0x5a, 0xf0, 0x3a, 0xf1, 0x86, 0x43, 0xc3, 0x3f, 0x00,
		0x24, 0x12, 0xc0, 0x18, 0x65, 0x08, 0x55, 0x91, 0x9e, 0x9f, 0x93, 0x98, 0x97, 0xae, 0x97, 0x5f,
		0x94, 0x8e, 0x88, 0xab, 0x92, 0xca, 0x82, 0xd4, 0x62, 0xfd, 0xec, 0xbc, 0xfc, 0xf2, 0x3c, 0x78,
		0xbc, 0x15, 0x24, 0xfd, 0x60, 0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce,
		0x1d, 0xa2, 0x39, 0x00, 0xaa, 0x43, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x1b, 0xa4, 0x3e, 0x04, 0xa4,
		0x35, 0x89, 0x0d, 0x6c, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x92, 0x48, 0x30, 0x06,
		0x02, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) VisibilityAPIYARPCClient {
			return NewVisibilityAPIYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
